{
  "version": 3,
  "sources": ["../../../src/client/islands/LedgerFilterIsland.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\ntype PageData = {\n    kind: 'invoices' | 'subscriptions';\n    storeId: string;\n    filterUrl: string;\n    csrfToken?: string | null;\n};\n\nconst data: PageData = (window as any).__PAGE__ || {\n    kind: 'invoices',\n    storeId: '',\n    filterUrl: '',\n    csrfToken: null\n};\n\nfunction qs(sel: string, root: Document | HTMLElement = document) {\n    return root.querySelector(sel) as HTMLElement | null;\n}\n\n// add a helper to read meta fallback\nfunction readMetaCsrf() {\n    const m = document.querySelector('meta[name=\"csrf-token\"]') as HTMLMetaElement | null;\n    return m?.content || null;\n}\n\nasync function postFormAsHtml(url: string, form: HTMLFormElement) {\n    // Build URL-encoded body like a normal <form>\n    const fd = new FormData(form);\n    const qs = new URLSearchParams();\n    for (const [k, v] of fd as any) qs.append(k, String(v ?? ''));\n\n    const token = data.csrfToken || readMetaCsrf();\n    if (token && !qs.get('_csrf')) qs.append('_csrf', token);\n\n    const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Accept': 'text/html',\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        },\n        body: qs.toString(),\n        credentials: 'same-origin',\n    });\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    return res.text();\n}\n\n\n\nfunction attachFilter(formId: string) {\n    const form = document.getElementById(formId) as HTMLFormElement | null;\n    const target = document.getElementById('ledger-results');\n    if (!form || !target) return;\n\n    form.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        try {\n            target.classList.add('opacity-60', 'pointer-events-none');\n            const html = await postFormAsHtml(data.filterUrl, form);\n            target.innerHTML = html;\n            // tell RowActions island to rebind\n            document.dispatchEvent(new CustomEvent('ledger:updated'));\n        } catch (err) {\n            console.warn('filter failed', err);\n        } finally {\n            target.classList.remove('opacity-60', 'pointer-events-none');\n        }\n    });\n}\n\n// auto-bind\nattachFilter(data.kind === 'subscriptions' ? 'subscription-filter-form' : 'invoice-filter-form');\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAQA,QAAM,OAAkB,OAAe,YAAY;AAAA,MAC/C,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,IACf;AAOA,aAAS,eAAe;AACpB,YAAM,IAAI,SAAS,cAAc,yBAAyB;AAC1D,aAAO,GAAG,WAAW;AAAA,IACzB;AAEA,mBAAe,eAAe,KAAa,MAAuB;AAE9D,YAAM,KAAK,IAAI,SAAS,IAAI;AAC5B,YAAMA,MAAK,IAAI,gBAAgB;AAC/B,iBAAW,CAAC,GAAG,CAAC,KAAK,GAAW,CAAAA,IAAG,OAAO,GAAG,OAAO,KAAK,EAAE,CAAC;AAE5D,YAAM,QAAQ,KAAK,aAAa,aAAa;AAC7C,UAAI,SAAS,CAACA,IAAG,IAAI,OAAO,EAAG,CAAAA,IAAG,OAAO,SAAS,KAAK;AAEvD,YAAM,MAAM,MAAM,MAAM,KAAK;AAAA,QACzB,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,UAAU;AAAA,UACV,gBAAgB;AAAA,QACpB;AAAA,QACA,MAAMA,IAAG,SAAS;AAAA,QAClB,aAAa;AAAA,MACjB,CAAC;AACD,UAAI,CAAC,IAAI,GAAI,OAAM,IAAI,MAAM,QAAQ,IAAI,MAAM,EAAE;AACjD,aAAO,IAAI,KAAK;AAAA,IACpB;AAIA,aAAS,aAAa,QAAgB;AAClC,YAAM,OAAO,SAAS,eAAe,MAAM;AAC3C,YAAM,SAAS,SAAS,eAAe,gBAAgB;AACvD,UAAI,CAAC,QAAQ,CAAC,OAAQ;AAEtB,WAAK,iBAAiB,UAAU,OAAO,MAAM;AACzC,UAAE,eAAe;AACjB,YAAI;AACA,iBAAO,UAAU,IAAI,cAAc,qBAAqB;AACxD,gBAAM,OAAO,MAAM,eAAe,KAAK,WAAW,IAAI;AACtD,iBAAO,YAAY;AAEnB,mBAAS,cAAc,IAAI,YAAY,gBAAgB,CAAC;AAAA,QAC5D,SAAS,KAAK;AACV,kBAAQ,KAAK,iBAAiB,GAAG;AAAA,QACrC,UAAE;AACE,iBAAO,UAAU,OAAO,cAAc,qBAAqB;AAAA,QAC/D;AAAA,MACJ,CAAC;AAAA,IACL;AAGA,iBAAa,KAAK,SAAS,kBAAkB,6BAA6B,qBAAqB;AAAA;AAAA;",
  "names": ["qs"]
}
