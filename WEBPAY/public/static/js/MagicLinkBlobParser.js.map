{
  "version": 3,
  "sources": ["../../../src/client/islands/helpers/MagicLinkBlobParser.ts"],
  "sourcesContent": ["export class MagicLinkBlobParser {\n  /**\n   * Parses and validates the magic-link blob from base64url string.\n   * @param u base64url-encoded blob\n   * @returns { unsignedCall: any, expiry: number }\n   * @throws Error if malformed, expired, or invalid structure\n   */\n  static parseAndValidate(u: string): { unsignedCall: any; expiry: number } {\n    // Step 1: Decode base64url (replace -/_ and pad)\n    let base64 = u.replace(/-/g, '+').replace(/_/g, '/');\n    while (base64.length % 4) base64 += '=';\n    let decoded: string;\n    try {\n      decoded = atob(base64);\n    } catch {\n      throw new Error('Malformed magic-link (base64 decode failed)');\n    }\n\n    // Step 2: Parse JSON\n    let payload: any;\n    try {\n      payload = JSON.parse(decoded);\n    } catch {\n      throw new Error('Malformed magic-link (JSON parse failed)');\n    }\n\n    // Step 3: Check structure\n    if (\n      typeof payload !== 'object' ||\n      typeof payload.unsignedCall !== 'object' ||\n      typeof payload.expiry !== 'number'\n    ) {\n      throw new Error('Malformed magic-link blob');\n    }\n\n    // Step 4: Expiry\n    if (Date.now() > payload.expiry) {\n      throw new Error('This payment link has expired.');\n    }\n\n    // Step 5: Validate unsignedCall\n    const unsignedCall = payload.unsignedCall;\n    if (\n      unsignedCall.function !== 'pay-invoice' ||\n      unsignedCall.postConditionMode !== 'deny' ||\n      !Array.isArray(unsignedCall.postConditions)\n    ) {\n      throw new Error('Malformed or unauthorized payment request.');\n    }\n\n    // Step 6: At least one FT postcondition for sBTC\n    const hasSBTC = unsignedCall.postConditions.some(\n      (pc: any) =>\n        pc.conditionCode === 'Equal' &&\n        typeof pc.amount === 'string' &&\n        pc.assetInfo &&\n        typeof pc.assetInfo === 'object' &&\n        typeof pc.assetInfo.assetName === 'string' &&\n        /sb?tc/i.test(pc.assetInfo.assetName)\n    );\n    if (!hasSBTC) {\n      throw new Error('Payment request missing valid sBTC postcondition.');\n    }\n\n    // All checks passed\n    return {\n      unsignedCall,\n      expiry: payload.expiry\n    };\n  }\n}\n"],
  "mappings": ";AAAO,IAAM,sBAAN,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,OAAO,iBAAiB,GAAkD;AAExE,QAAI,SAAS,EAAE,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG;AACnD,WAAO,OAAO,SAAS,EAAG,WAAU;AACpC,QAAI;AACJ,QAAI;AACF,gBAAU,KAAK,MAAM;AAAA,IACvB,QAAQ;AACN,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,QAAI;AACJ,QAAI;AACF,gBAAU,KAAK,MAAM,OAAO;AAAA,IAC9B,QAAQ;AACN,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAGA,QACE,OAAO,YAAY,YACnB,OAAO,QAAQ,iBAAiB,YAChC,OAAO,QAAQ,WAAW,UAC1B;AACA,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAGA,QAAI,KAAK,IAAI,IAAI,QAAQ,QAAQ;AAC/B,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAGA,UAAM,eAAe,QAAQ;AAC7B,QACE,aAAa,aAAa,iBAC1B,aAAa,sBAAsB,UACnC,CAAC,MAAM,QAAQ,aAAa,cAAc,GAC1C;AACA,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAM,UAAU,aAAa,eAAe;AAAA,MAC1C,CAAC,OACC,GAAG,kBAAkB,WACrB,OAAO,GAAG,WAAW,YACrB,GAAG,aACH,OAAO,GAAG,cAAc,YACxB,OAAO,GAAG,UAAU,cAAc,YAClC,SAAS,KAAK,GAAG,UAAU,SAAS;AAAA,IACxC;AACA,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,WAAO;AAAA,MACL;AAAA,MACA,QAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AACF;",
  "names": []
}
