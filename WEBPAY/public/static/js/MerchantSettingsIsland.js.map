{
  "version": 3,
  "sources": ["../../../src/client/islands/MerchantSettingsIsland.ts"],
  "sourcesContent": ["/* eslint-disable no-alert, no-console */\n\ntype PageData = {\n    kind: 'merchant-settings';\n    storeId: string;\n    saveUrl: string;\n    csrfToken?: string | null;\n    initial?: Record<string, any> | null;\n  };\n  const data: PageData = (window as any).__PAGE__ || {\n    kind: 'merchant-settings',\n    storeId: '',\n    saveUrl: '',\n    csrfToken: null,\n    initial: null,\n  };\n\n  function toUrlEncoded(obj: Record<string, any>) {\n    const qs = new URLSearchParams();\n    for (const [k, v] of Object.entries(obj)) qs.append(k, String(v ?? ''));\n    return qs;\n  }\n\n  function readMetaCsrf(): string | null {\n    const m = document.querySelector('meta[name=\"csrf-token\"]') as HTMLMetaElement | null;\n    return m?.content || null;\n  }\n\n  function snapshotFormGeneric(form: HTMLFormElement) {\n    const fd = new FormData(form);\n    const body: Record<string, any> = {};\n    for (const [k, v] of fd.entries()) body[k] = typeof v === 'string' ? v : '';\n    return body;\n  }\n\n  async function postFormUrlencoded(url: string, body: Record<string, any>) {\n    const token = data.csrfToken || readMetaCsrf();\n    const qs = toUrlEncoded(body);\n    if (token && !qs.get('_csrf')) qs.append('_csrf', token);\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'text/html',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      },\n      body: qs.toString(),\n      credentials: 'same-origin',\n    });\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    return res.text();\n  }\n\n  function fillFormFromInitial() {\n    const form = document.getElementById('merchant-settings-form') as HTMLFormElement | null;\n    if (!form || !data.initial) return;\n    const m = data.initial;\n\n    // prefer snake_case form names; read camelCase fallback from initial\n    const pairs: Array<[string, string[]]> = [\n      ['display_name', ['display_name','displayName']],\n      ['logo_url', ['logo_url','logoUrl']],\n      ['brand_color', ['brand_color','brandColor']],\n      ['support_email', ['support_email','supportEmail']],\n      ['support_url', ['support_url','supportUrl']],\n      ['principal', ['principal']],\n    ];\n\n    for (const [field, keys] of pairs) {\n      const el = form.querySelector(`[name=\"${field}\"]`) as HTMLInputElement | null;\n      if (!el) continue;\n      let v = '';\n      for (const k of keys) { if (m[k] != null) { v = String(m[k]); break; } }\n      el.value = v;\n    }\n  }\n\n  function attachReset() {\n    const form = document.getElementById('merchant-settings-form') as HTMLFormElement | null;\n    const btn = form?.querySelector('[data-reset]') as HTMLButtonElement | null;\n    if (!form || !btn) return;\n    btn.addEventListener('click', () => {\n      form.reset();\n      fillFormFromInitial();\n    });\n  }\n\n  function attachSubmit() {\n    const form = document.getElementById('merchant-settings-form') as HTMLFormElement | null;\n    if (!form) return;\n    form.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      if (!data.saveUrl) return;\n\n      const body = snapshotFormGeneric(form);\n\n      form.classList.add('opacity-60','pointer-events-none');\n      const submitBtn = form.querySelector('button[type=\"submit\"]') as HTMLButtonElement | null;\n      const original = submitBtn?.textContent || null;\n      if (submitBtn) submitBtn.textContent = 'Saving\u2026';\n\n      try {\n        await postFormUrlencoded(data.saveUrl, body);\n        alert('Settings saved.');\n      } catch (err) {\n        console.warn('Save failed', err);\n        alert('Could not save settings.');\n      } finally {\n        if (submitBtn && original !== null) submitBtn.textContent = original;\n        form.classList.remove('opacity-60','pointer-events-none');\n      }\n    });\n  }\n\n  // boot\n  fillFormFromInitial();\n  attachReset();\n  attachSubmit();\n"],
  "mappings": "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",
  "names": []
}
