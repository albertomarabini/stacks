{"version":3,"file":"SubscriptionService.js","sourceRoot":"","sources":["../../src/services/SubscriptionService.ts"],"names":[],"mappings":"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","sourcesContent":["// src/services/SubscriptionService.ts\nimport crypto from 'crypto';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type {\n  IContractCallBuilder,\n  IStacksChainClient,\n  IConfigService,\n  IInvoiceIdCodec,\n} from '../contracts/interfaces';\nimport { PricingService } from './PricingService';\nimport type {\n  SubscriptionRow,\n  PublicInvoiceDTO,\n  UnsignedContractCall,\n} from '../contracts/domain';\n\ntype CreateSubInput = {\n  subscriber: string;\n  amountSats: number;\n  intervalBlocks: number;\n  mode?: 'invoice' | 'direct';\n};\n\nexport class SubscriptionService {\n  private store!: ISqliteStore;\n  private builder!: IContractCallBuilder;\n  private chain!: IStacksChainClient;\n  private cfg!: IConfigService;\n  private codec!: IInvoiceIdCodec;\n  private pricing!: PricingService;\n\n  bindDependencies(deps: {\n    store: ISqliteStore;\n    builder: IContractCallBuilder;\n    chain: IStacksChainClient;\n    cfg: IConfigService;\n    codec: IInvoiceIdCodec;\n    pricing: PricingService;\n  }): void {\n    this.store = deps.store;\n    this.builder = deps.builder;\n    this.chain = deps.chain;\n    this.cfg = deps.cfg;\n    this.codec = deps.codec;\n    this.pricing = deps.pricing;\n  }\n\n  async createSubscription(\n    store: { id: string; principal: string },\n    body: CreateSubInput,\n  ): Promise<{ row: SubscriptionRow; unsignedCall?: UnsignedContractCall }> {\n    const id = crypto.randomUUID();\n    const idHex = this.generateUniqueSubHex();\n    const now = Math.floor(Date.now() / 1000);\n    const tip = await this.chain.getTip();\n    const nextInvoiceAt = tip.height + body.intervalBlocks;\n    const mode = body.mode ?? 'invoice';\n\n    const row: SubscriptionRow = {\n      id,\n      id_hex: idHex,\n      store_id: store.id,\n      merchant_principal: store.principal,\n      subscriber: body.subscriber,\n      amount_sats: body.amountSats,\n      interval_blocks: body.intervalBlocks,\n      active: 1,\n      created_at: now,\n      last_billed_at: undefined,\n      next_invoice_at: nextInvoiceAt,\n      last_paid_invoice_id: undefined,\n      mode,\n    };\n\n    this.store.insertSubscription(row);\n\n    let unsignedCall: UnsignedContractCall | undefined;\n    if (mode === 'direct') {\n      unsignedCall = this.builder.buildCreateSubscription({\n        idHex,\n        merchant: store.principal,\n        subscriber: body.subscriber,\n        amountSats: body.amountSats,\n        intervalBlocks: body.intervalBlocks,\n      });\n    }\n\n    return { row, unsignedCall };\n  }\n\n// src/services/SubscriptionService.ts\nasync generateInvoiceForSubscription(\n  sub: SubscriptionRow,\n  opts: { storeId: string; merchantPrincipal: string; ttlSeconds: number; memo?: string; webhookUrl?: string }\n): Promise<{ invoice: PublicInvoiceDTO; unsignedCall: UnsignedContractCall }> {\n  const idHex = this.generateUniqueInvoiceHex();\n  const nowMs = Date.now();\n  const nowSecs = Math.floor(nowMs / 1000);\n\n  // --- USD price snapshot with fallback (match InvoiceService.createInvoice) ---\n  let usdAtCreate: number;\n  try {\n    usdAtCreate = await this.pricing.getUsdPriceSnapshot();\n  } catch (e: any) {\n    // don’t fail the request — UI only uses this for display\n    const fallback = Number(process.env.PRICE_SNAPSHOT_DEFAULT ?? 0);\n    usdAtCreate = Number.isFinite(fallback) && fallback > 0 ? fallback : 0;\n  }\n\n  // --- expiry (add cushion; avoid instant-expire edge cases) ---\n  const avgBlockSecs = this.cfg.getAvgBlockSecs?.() ?? 30;\n  const minCushionBlocks = 10;\n  const tip = await this.chain.getTip(); // assumes { height }\n  const ttlBlocks = Math.ceil(opts.ttlSeconds / avgBlockSecs);\n  const expiresAtBlock = tip.height + Math.max(minCushionBlocks, ttlBlocks + 1);\n\n  const unsignedCall = this.builder.buildCreateInvoice({\n    idHex,\n    amountSats: sub.amount_sats,\n    memo: opts.memo,\n    expiresAtBlock,\n  });\n\n  const idRaw = crypto.randomUUID();\n  const quoteExpiresAt = nowMs + opts.ttlSeconds * 1000;\n\n  this.store.invoices.insert({\n    id_raw: idRaw,\n    id_hex: idHex,\n    store_id: opts.storeId,\n    amount_sats: sub.amount_sats,\n    usd_at_create: usdAtCreate,\n    quote_expires_at: quoteExpiresAt,\n    merchant_principal: opts.merchantPrincipal,\n    status: 'unpaid',\n    payer: undefined,\n    txid: undefined,\n    memo: opts.memo,\n    webhook_url: opts.webhookUrl,\n    created_at: nowSecs,\n    refunded_at: undefined,\n    refund_amount: 0,\n    refund_txid: undefined,\n    subscription_id: sub.id,\n    refund_count: 0,\n    expired: 0,\n  });\n\n  // Best-effort; don’t let this break the response\n  try { this.store.advanceSubscriptionSchedule(sub.id); } catch {}\n\n  const invoice: PublicInvoiceDTO = {\n    invoiceId: idRaw,\n    idHex,\n    storeId: opts.storeId,\n    amountSats: sub.amount_sats,\n    usdAtCreate,\n    quoteExpiresAt,\n    merchantPrincipal: opts.merchantPrincipal,\n    status: 'unpaid',\n    payer: undefined,\n    txId: undefined,\n    memo: opts.memo ?? undefined,\n    subscriptionId: sub.id,\n    createdAt: nowSecs,\n    refundAmount: 0,\n    refundTxId: undefined,\n    store: undefined,\n  };\n\n  return { invoice, unsignedCall };\n}\n\n  async setMode(\n    sub: SubscriptionRow,\n    mode: 'invoice' | 'direct',\n  ): Promise<{ row: SubscriptionRow; unsignedCall?: UnsignedContractCall }> {\n    this.store.updateSubscriptionMode(sub.id, sub.store_id, mode);\n    let unsignedCall: UnsignedContractCall | undefined;\n\n    if (mode === 'direct') {\n      const onchain = await this.chain.readSubscription(sub.id_hex);\n      if (!onchain) {\n        unsignedCall = this.builder.buildCreateSubscription({\n          idHex: sub.id_hex,\n          merchant: sub.merchant_principal,\n          subscriber: sub.subscriber,\n          amountSats: sub.amount_sats,\n          intervalBlocks: sub.interval_blocks,\n        });\n      }\n    }\n\n    const updated =\n      this.store.getSubscriptionByIdForStore(sub.id, sub.store_id) ||\n      ({ ...sub, mode } as SubscriptionRow);\n\n    return { row: updated, unsignedCall };\n  }\n\n  async cancel(\n    sub: SubscriptionRow,\n  ): Promise<{ row: SubscriptionRow; unsignedCall: UnsignedContractCall }> {\n    this.store.deactivateSubscription(sub.id, sub.store_id);\n    const unsignedCall = this.builder.buildCancelSubscription({ idHex: sub.id_hex });\n    const updated =\n      this.store.getSubscriptionByIdForStore(sub.id, sub.store_id) ||\n      ({ ...sub, active: 0 } as SubscriptionRow);\n    return { row: updated, unsignedCall };\n  }\n\n  private generateUniqueSubHex(): string {\n    let idHex: string;\n    do {\n      idHex = this.codec.generateRandomBuff32Hex();\n      this.codec.assertHex64(idHex);\n    } while (this.store.subscriptionExists(idHex));\n    return idHex;\n  }\n\n  private generateUniqueInvoiceHex(): string {\n    let idHex: string;\n    do {\n      idHex = this.codec.generateRandomBuff32Hex();\n      this.codec.assertHex64(idHex);\n    } while (!this.store.ensureInvoiceIdHexUnique(idHex));\n    return idHex;\n  }\n}\n"]}