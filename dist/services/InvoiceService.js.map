{"version":3,"file":"InvoiceService.js","sourceRoot":"","sources":["../../src/services/InvoiceService.ts"],"names":[],"mappings":"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","sourcesContent":["// src/services/InvoiceService.ts\nimport crypto from 'crypto';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type {\n  IStacksChainClient,\n  IContractCallBuilder,\n  IConfigService,\n  IInvoiceIdCodec,\n} from '../contracts/interfaces';\nimport { PricingService } from './PricingService';\nimport type { PublicInvoiceDTO, UnsignedContractCall } from '../contracts/domain';\nimport { getAddressFromPrivateKey } from '@stacks/transactions';\n\ntype StoreLike = { id: string; principal: string };\n\nexport class InvoiceService {\n  private store!: ISqliteStore;\n  private chain!: IStacksChainClient;\n  private builder!: IContractCallBuilder;\n  private cfg!: IConfigService;\n  private pricing!: PricingService;\n  private codec!: IInvoiceIdCodec;\n\n  bindDependencies(deps: {\n    store: ISqliteStore;\n    chain: IStacksChainClient;\n    builder: IContractCallBuilder;\n    cfg: IConfigService;\n    pricing: PricingService;\n    codec: IInvoiceIdCodec;\n  }): void {\n    this.store = deps.store;\n    this.chain = deps.chain;\n    this.builder = deps.builder;\n    this.cfg = deps.cfg;\n    this.pricing = deps.pricing;\n    this.codec = deps.codec;\n  }\n\n  async createInvoice(\n    store: StoreLike,\n    input: {\n      amountSats: number;\n      ttlSeconds: number;\n      memo?: string;\n      webhookUrl?: string;\n    },\n  ): Promise<PublicInvoiceDTO & { magicLink: string; unsignedTx?: UnsignedContractCall }> {\n    this.assertPositiveInt(input.amountSats, 'amountSats');\n    this.assertPositiveInt(input.ttlSeconds, 'ttlSeconds');\n\n    const idHex = this.codec.generateRandomBuff32Hex();\n    this.codec.assertHex64(idHex);\n\n    let usdAtCreate: number;\n    try {\n      usdAtCreate = await this.pricing.getUsdPriceSnapshot();\n    } catch (e: any) {\n      if (e?.code === 'price_unavailable') {\n        // Accept invoice creation without a live USD quote (display-only in UI)\n        const fallback = Number(process.env.PRICE_SNAPSHOT_DEFAULT ?? 0);\n        usdAtCreate = Number.isFinite(fallback) && fallback > 0 ? fallback : 0;\n      } else {\n        throw e;\n      }\n    }\n    const tipHeight = await this.chain.getTipHeight();\n    const avgBlockSecs = this.cfg.getAvgBlockSecs();\n    const minCushionBlocks = 10;\n    const ttlBlocks = Math.ceil(input.ttlSeconds / avgBlockSecs);\n    const expiresAtBlock = tipHeight + Math.max(minCushionBlocks, ttlBlocks + 1);\n\n    const unsignedTx = this.builder.buildCreateInvoice({\n      idHex,\n      amountSats: input.amountSats,\n      memo: input.memo,\n      expiresAtBlock,\n    });\n\n    const nowMs = Date.now();\n    const nowSecs = Math.floor(nowMs / 1000);\n    const quoteExpiresAt = nowMs + input.ttlSeconds * 1000;\n    const idRaw = crypto.randomUUID();\n\n    this.store.invoices.insert({\n      id_raw: idRaw,\n      id_hex: idHex,\n      store_id: store.id,\n      amount_sats: input.amountSats,\n      usd_at_create: usdAtCreate,\n      quote_expires_at: quoteExpiresAt,\n      merchant_principal: store.principal,\n      status: 'unpaid',\n      payer: undefined,\n      txid: undefined,\n      memo: input.memo,\n      webhook_url: input.webhookUrl,\n      created_at: nowSecs,\n      refunded_at: undefined,\n      refund_amount: 0,\n      refund_txid: undefined,\n      subscription_id: undefined,\n      refund_count: 0,\n      expired: 0,\n    } as any);\n\n    const dto: PublicInvoiceDTO = {\n      invoiceId: idRaw,\n      idHex,\n      storeId: store.id,\n      amountSats: input.amountSats,\n      usdAtCreate,\n      quoteExpiresAt,\n      merchantPrincipal: store.principal,\n      status: 'unpaid',\n      payer: undefined,\n      txId: undefined,\n      memo: input.memo,\n      subscriptionId: undefined,\n      createdAt: nowSecs,\n      refundAmount: 0,\n      refundTxId: undefined,\n      store: undefined,\n    };\n\n    const magicLink = `/i/${idRaw}`;\n    return { ...dto, magicLink, unsignedTx };\n  }\n\n  async broadcastCreateInvoice(unsignedCall: UnsignedContractCall, merchantKey: string): Promise<string> {\n    // Sign as merchant; Stacks.js will POST /v2/transactions and return { txid }. :contentReference[oaicite:7]{index=7}turn3file16\n    const { txid } = await this.chain.signAndBroadcast(unsignedCall as any, merchantKey);\n    return txid;\n  }\n\n  private assertPositiveInt(n: number, name: string): void {\n    if (!Number.isInteger(n) || n <= 0) {\n      throw new TypeError(`${name} must be a positive integer`);\n    }\n  }\n}\n"]}