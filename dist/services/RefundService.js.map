{"version":3,"file":"RefundService.js","sourceRoot":"","sources":["../../src/services/RefundService.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IStacksChainClient,\n  IContractCallBuilder,\n  IPostConditionFactory,\n  IAssetInfoFactory,\n  IInvoiceIdCodec,\n  IConfigService,\n} from '../contracts/interfaces';\nimport type {\n  UnsignedContractCall,\n  MerchantRow,\n  InvoiceRow,\n} from '../contracts/domain';\n\n/** Two-entry coalescer (local to refund logs) */\nclass DuoCoalescer {\n  private last?: { key: string; line: string; count: number };\n  private prev?: { key: string; line: string; count: number };\n  constructor(private emit: (line: string) => void) {}\n  push(key: string, line: string) {\n    if (this.last?.key === key) { this.last.count++; return; }\n    if (this.prev?.key === key) { this.flushOne(this.last); this.last = { key, line: this.prev.line, count: this.prev.count + 1 }; this.prev = undefined; return; }\n    if (this.prev) this.flushOne(this.prev);\n    this.prev = this.last;\n    this.last = { key, line, count: 1 };\n  }\n  flushAll() { this.flushOne(this.prev); this.flushOne(this.last); this.prev = this.last = undefined; }\n  private flushOne(e?: { key: string; line: string; count: number }) {\n    if (!e) return;\n    if (e.count <= 1) this.emit(e.line);\n    else this.emit(`${e.line} … called x ${e.count} times`);\n  }\n}\n\nexport class RefundService {\n  private chain!: IStacksChainClient;\n  private builder!: IContractCallBuilder;\n  private pcf!: IPostConditionFactory;\n  private aif!: IAssetInfoFactory;\n  private codec!: IInvoiceIdCodec;\n  private cfg!: IConfigService;\n\n  //DO NOT TOUCH! DEBUGGING FIXTURES\n  private debug = String(process.env.GLOBAL_DEBUGGING || '') === '1';\n  private dlog = (...a: any[]) => { if (this.debug) console.log('[REFUND]', ...a); };\n  private fold = new DuoCoalescer(line => this.dlog(line));\n\n  bindDependencies(deps: {\n    chain: IStacksChainClient;\n    builder: IContractCallBuilder;\n    pcf: IPostConditionFactory;\n    aif: IAssetInfoFactory;\n    codec: IInvoiceIdCodec;\n    cfg: IConfigService;\n  }): void {\n    this.chain = deps.chain;\n    this.builder = deps.builder;\n    this.pcf = deps.pcf;\n    this.aif = deps.aif;\n    this.codec = deps.codec;\n    this.cfg = deps.cfg;\n    // if (this.debug) process.once('beforeExit', () => this.fold.flushAll());\n  }\n\n  async precheckBalance(merchantPrincipal: string, amountSats: number): Promise<boolean> {\n    const token = this.cfg.getSbtcContractId();\n    // if (this.debug) this.dlog('precheckBalance', { merchantPrincipal, token });\n    if (!token) return false;\n    const bal = await this.chain.getFungibleBalance(token, merchantPrincipal);\n    // if (this.debug) {\n    //   this.fold.push(\n    //     `BAL:${merchantPrincipal}:${bal.toString()}:${amountSats}`,\n    //     `merchant sBTC balance { principal: ${merchantPrincipal}, balance: ${bal.toString()}, want: ${String(amountSats)} }`\n    //   );\n    // }\n    return bal >= BigInt(amountSats);\n  }\n\n  async buildRefundPayload(\n    store: MerchantRow,\n    invoice: InvoiceRow,\n    amountSats: number,\n    memo?: string,\n  ): Promise<UnsignedContractCall> {\n    // Keep contract-level state machine: only paid/partially_refunded are refundable\n    if (!(invoice.status === 'paid' || invoice.status === 'partially_refunded')) {\n      throw new Error('not_refundable');\n    }\n\n    // Validate 64-hex id buffer\n    this.codec.assertHex64(invoice.id_hex);\n    if (this.debug) this.dlog('buildRefundPayload.in', {\n      store: store.principal,\n      idHex: invoice.id_hex.slice(0, 8) + '…',\n      amountSats,\n      memo: memo ?? null\n    });\n\n    // Keep only minimal sanity on the amount (positive integer).\n    if (!Number.isFinite(amountSats) || amountSats <= 0) {\n      throw new Error('invalid_amount');\n    }\n\n    const payload = this.builder.buildRefundInvoice({\n      idHex: invoice.id_hex,\n      amountSats,\n      memo,\n      merchantPrincipal: store.principal,\n    });\n\n    // show a compact view that proves PCs/mode are present (if builder sets them)\n    const pcs = (payload as any).postConditions || (payload as any).post_conditions || [];\n    this.dlog('buildRefundPayload.out', {\n      fn: payload.functionName,\n      where: `${payload.contractAddress}.${payload.contractName}`,\n      args: (payload.functionArgs || []).map((a: any) => a?.type || typeof a),\n      pcCount: pcs.length,\n      pcm: (payload as any).postConditionMode || (payload as any).post_condition_mode\n    });\n\n    return payload;\n  }\n}\n\nexport default RefundService;\n"]}