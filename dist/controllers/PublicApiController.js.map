{"version":3,"file":"PublicApiController.js","sourceRoot":"","sources":["../../src/controllers/PublicApiController.ts"],"names":[],"mappings":"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","sourcesContent":["// src/controllers/PublicApiController.ts\nimport type { Request, Response } from 'express';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type {\n  IStacksChainClient,\n  IContractCallBuilder,\n  IAssetInfoFactory,\n  IConfigService,\n  IInvoiceIdCodec,\n} from '../contracts/interfaces';\nimport type { PublicInvoiceDTO } from '../contracts/domain';\nimport { InvoiceIdGuard } from '../delegates/InvoiceIdGuard';\nimport { InvoiceStatusResolver } from '../delegates/InvoiceStatusResolver';\nimport { StorePublicProfileProjector } from '../delegates/StorePublicProfileProjector';\nimport { PayInvoiceTxAssembler, HttpError } from '../delegates/PayInvoiceTxAssembler';\n\nconst HttpStatusMap = {\n  invalidPayload: 400,\n  notFound: 404,\n  conflict: 409,\n  unprocessable: 422,\n  upgradeRequired: 426,\n} as const;\n\nconst PublicErrors = {\n  notFound: { error: 'notFound' },\n  invalidId: { error: 'invalidId' },\n  expired: { error: 'expired' },\n  invalidState: { error: 'invalidState' },\n  missingIdentifier: { error: 'missingIdentifier' },\n  missingSbtcToken: { error: 'missingSbtcToken' },\n} as const;\n\n// ✳️ include \"cancelled\" defensively, though canonical is \"canceled\" in DB/specs\nconst NonPayableStatuses = new Set([\n  'paid',\n  'canceled',\n  'cancelled',\n  'expired',\n  'refunded',\n  'partially_refunded',\n]);\n\nexport class PublicApiController {\n  private store!: ISqliteStore;\n  private chain!: IStacksChainClient;\n  private builder!: IContractCallBuilder;\n  private aif!: IAssetInfoFactory;\n  private cfg!: IConfigService;\n  private codec!: IInvoiceIdCodec;\n\n  private idGuard!: InvoiceIdGuard;\n  private statusResolver!: InvoiceStatusResolver;\n  private profileProjector!: StorePublicProfileProjector;\n  private txAssembler!: PayInvoiceTxAssembler;\n\n  private cors: any;\n\n  // Best-effort CORS header setter in case route middleware didn't run.\n  // If the store (or row.store) has an allow-list, reflect the Origin when allowed,\n  // otherwise fall back to \"*\". Also sets Vary: Origin when reflecting.\n  private setCorsIfMissing(req: Request, res: Response, allowListCsv?: string): void {\n    // already set by middleware? leave it alone\n    if (res.getHeader('Access-Control-Allow-Origin')) return;\n\n    const origin = String(req.headers.origin || '');\n    const list = (allowListCsv || '')\n      .split(',')\n      .map(s => s.trim())\n      .filter(Boolean);\n\n    // reflect when explicitly allowed; otherwise use \"*\"\n    const allow = (origin && list.length && list.includes(origin)) ? origin : '*';\n\n    res.setHeader('Access-Control-Allow-Origin', allow);\n    if (allow !== '*') {\n      // ensure caches don’t coalesce different origins\n      const prevVary = String(res.getHeader('Vary') || '').trim();\n      res.setHeader('Vary', prevVary ? `${prevVary}, Origin` : 'Origin');\n    }\n  }\n\n  bindDependencies(deps: {\n    store: ISqliteStore;\n    chain: IStacksChainClient;\n    builder: IContractCallBuilder;\n    aif: IAssetInfoFactory;\n    cfg: IConfigService;\n    codec: IInvoiceIdCodec;\n  }): void {\n    this.store = deps.store;\n    this.chain = deps.chain;\n    this.builder = deps.builder;\n    this.aif = deps.aif;\n    this.cfg = deps.cfg;\n    this.codec = deps.codec;\n\n    this.idGuard = new InvoiceIdGuard(this.codec);\n    // ✅ pass chain + idGuard only; resolver will duck-type the chain\n    this.statusResolver = new InvoiceStatusResolver(this.chain, this.idGuard);\n    this.profileProjector = new StorePublicProfileProjector();\n    this.txAssembler = new PayInvoiceTxAssembler(\n      this.builder,\n      this.aif,\n      this.cfg,\n      this.chain,\n      this.idGuard,\n      NonPayableStatuses,\n    );\n  }\n\n  bindCorsPolicy(corsMwFactory: any): void {\n    this.cors = corsMwFactory;\n  }\n\n  async getInvoice(req: Request, res: Response): Promise<void> {\n    const idRaw = req.params.invoiceId;\n    const row = this.store.getInvoiceWithStore(idRaw);\n    if (!row) {\n      res.status(HttpStatusMap.notFound).json(PublicErrors.notFound);\n      return;\n    }\n\n    try {\n      this.idGuard.validateHexIdOrThrow(row.id_hex);\n    } catch {\n      res.status(HttpStatusMap.invalidPayload).json(PublicErrors.invalidId);\n      return;\n    }\n\n    const onchain = await this.statusResolver.readOnchainStatus(row.id_hex);\n    const status = this.statusResolver.computeDisplayStatus(\n      { id_hex: row.id_hex, status: row.status as any, quote_expires_at: row.quote_expires_at },\n      onchain as any,\n      Date.now(),\n    );\n\n    const storeProfile = this.profileProjector.project(row.store as any);\n    const dto: PublicInvoiceDTO = {\n      invoiceId: row.id_raw,\n      idHex: row.id_hex,\n      storeId: row.store_id,\n      amountSats: row.amount_sats,\n      usdAtCreate: row.usd_at_create,\n      quoteExpiresAt: row.quote_expires_at,\n      merchantPrincipal: row.merchant_principal,\n      status: status as any,\n      payer: row.payer ?? undefined,\n      txId: row.txid ?? undefined,\n      memo: row.memo ?? undefined,\n      subscriptionId: row.subscription_id ?? undefined,\n      createdAt: row.created_at,\n      refundAmount: row.refund_amount ? row.refund_amount : undefined,\n      refundTxId: row.refund_txid ?? undefined,\n      store: storeProfile,\n    };\n\n    // ensure CORS header for public GET (browser won't preflight)\n    const allowed = (row.store as any)?.allowed_origins || (row.store as any)?.allowedOrigins;\n    this.setCorsIfMissing(req, res, allowed);\n    res.json(dto);\n  }\n\n  async createTx(req: Request, res: Response): Promise<void> {\n    const body = (req.body as any) || {};\n    const invoiceId = body.invoiceId ? String(body.invoiceId) : '';\n    const payerPrincipal = body.payerPrincipal ? String(body.payerPrincipal) : undefined;\n\n    if (!invoiceId) {\n      this.setCorsIfMissing(req, res); // no store context yet\n      res.status(400).json(PublicErrors.missingIdentifier);\n      return;\n    }\n\n    const row = this.store.getInvoiceWithStore(invoiceId);\n    const allowFromRow = row ? ((row.store as any)?.allowed_origins || (row.store as any)?.allowedOrigins) : undefined;\n\n    if (!row) {\n      this.setCorsIfMissing(req, res);\n      res.status(404).json(PublicErrors.notFound);\n      return;\n    }\n\n    // ✳️ Harden: compute effective status (DB + on-chain) before building.\n    let effectiveStatus = String(row.status || '').toLowerCase();\n    try {\n      // Validate that the stored id_hex is sane; if invalid, we will surface invalidId below\n      this.idGuard.validateHexIdOrThrow(row.id_hex);\n      const onchain = await this.statusResolver.readOnchainStatus(row.id_hex);\n      effectiveStatus = this.statusResolver.computeDisplayStatus(\n        { id_hex: row.id_hex, status: effectiveStatus as any, quote_expires_at: row.quote_expires_at },\n        onchain as any,\n        Date.now(),\n      ).toLowerCase();\n    } catch (e) {\n      // If id invalid, map to 400; otherwise continue with DB status.\n      if (e instanceof Error && /invalid/i.test(e.message)) {\n        this.setCorsIfMissing(req, res, allowFromRow);\n        res.status(HttpStatusMap.invalidPayload).json(PublicErrors.invalidId);\n        return;\n      }\n    }\n\n    if (NonPayableStatuses.has(effectiveStatus)) {\n      this.setCorsIfMissing(req, res, allowFromRow);\n      // small debug hint for ops (status reason)\n      res.setHeader('X-Blocked-Reason', `status=${effectiveStatus}`);\n      res.status(409).json(PublicErrors.invalidState);\n      return;\n    }\n\n    try {\n      const payload = await this.txAssembler.buildUnsignedPayInvoice(row as any, payerPrincipal);\n      this.setCorsIfMissing(req, res, allowFromRow);\n      res.json(payload);\n    } catch (e: any) {\n      if (e instanceof HttpError) {\n        this.setCorsIfMissing(req, res, allowFromRow);\n        if (e.code === 'merchant-inactive') {\n          res.status(e.status).json(PublicErrors.invalidState); return;\n        } else if (e.code === 'expired') {\n          res.status(e.status).json(PublicErrors.expired); return;\n        } else if (e.code === 'missing-token') {\n          res.status(e.status).json(PublicErrors.missingSbtcToken); return;\n        } else if (e.code === 'invalid-id') {\n          res.status(e.status).json(PublicErrors.invalidId); return;\n        } else {\n          res.status(HttpStatusMap.conflict).json(PublicErrors.invalidState); return;\n        }\n      }\n      this.setCorsIfMissing(req, res, allowFromRow);\n      res.status(HttpStatusMap.conflict).json(PublicErrors.invalidState);\n    }\n  }\n\n  async getStorePublicProfile(req: Request, res: Response): Promise<void> {\n    const storeId = req.params.storeId;\n    const rows = this.store.listMerchantsProjection() as any[];\n    const m = rows.find((r) => r.id === storeId);\n    if (!m) {\n      res.status(HttpStatusMap.notFound).json(PublicErrors.notFound);\n      return;\n    }\n    const profile = this.profileProjector.project(m);\n\n    // ensure CORS header on simple GET\n    this.setCorsIfMissing(req, res, (m as any).allowed_origins || (m as any).allowedOrigins);\n    res.json(profile);\n  }\n}\n"]}