{"version":3,"file":"WebhookDispatcher.js","sourceRoot":"","sources":["../../src/webhooks/WebhookDispatcher.ts"],"names":[],"mappings":";;;;;;AAAA,oCAAoC;AACpC,kDAA0B;AAI1B,kFAA+E;AAC/E,8EAA2E;AAwB3E,MAAa,iBAAiB;IAA9B;QAGmB,WAAM,GAAG,IAAI,iDAAuB,EAAE,CAAC;QACvC,aAAQ,GAAG,IAAI,6CAAqB,EAAE,CAAC;QAChD,aAAQ,GAAgB,IAAI,GAAG,EAAE,CAAC;IA2M5C,CAAC;IAzMC,qBAAqB,CAAC,KAAmB,EAAE,SAAiC;QAC1E,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;IACpC,CAAC;IAED,8EAA8E;IAC9E,sBAAsB,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACpE,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACxF,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACzF,MAAM,OAAO,GACX,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ;YAC1B,CAAC,CAAC,GAAG,CAAC,IAAI;YACV,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC3B,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC3B,CAAC,CAAC,EAAE,CAAC;QACT,MAAM,MAAM,GAAY,IAAI,CAAC,KAAa,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC;QAC7E,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QACtF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;YAClC,OAAO;QACT,CAAC;QACD,IAAI,EAAE,CAAC;IACT,CAAC;IAED,iFAAiF;IACjF,+DAA+D;IACvD,iBAAiB,CAAC,CAAmB;QAC3C,QAAQ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;YAClB,KAAK,MAAM,CAAC,CAAC,OAAO,cAAc,CAAC;YACnC,KAAK,SAAS,CAAC,CAAC,OAAO,iBAAiB,CAAC;YACzC,KAAK,UAAU,CAAC,CAAC,OAAO,kBAAkB,CAAC;YAC3C,OAAO,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,oEAAoE;IACpE,iDAAiD;IACjD,qCAAqC;IACrC,sFAAsF;IAC9E,YAAY,CAAC,OAAe,EAAE,SAA2B;QAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACnC,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,EAAE,CAAC;gBACjE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;YACD,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QACjE,CAAC;QAAC,MAAM,CAAC;YACP,2DAA2D;YAC3D,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;YAC5C,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QACnE,CAAC;IACH,CAAC;IAED,0EAA0E;IAC1E,KAAK,CAAC,QAAQ,CAAC,GAAgB;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;QAC1E,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QAE/C,MAAM,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAE1C,qEAAqE;QACrE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;QAE9E,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE;YAC/D,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,OAAO,EAAE,QAAQ,EAAE,2BAA2B;YAC9C,QAAQ,EAAE,aAAa;YACvB,GAAG;SACJ,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC;QACxF,MAAM,OAAO,GAAG,EAAE,cAAc,EAAE,kBAAkB,EAAE,GAAG,UAAU,EAAE,CAAC;QAEtE,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAC/E,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBAC5C,IAAI,CAAC,aAAa,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YACvE,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,aAAa,CACtB;oBACE,YAAY,EAAE,SAAS;oBACvB,QAAQ,EAAE,aAAa;oBACvB,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,SAAS,EAAE,GAAG,CAAC,SAAS;oBACxB,cAAc,EAAE,GAAG,CAAC,cAAc;oBAClC,SAAS,EAAE,GAAG,CAAC,SAAS;oBACxB,OAAO,EAAE,QAAQ;iBAClB,EACD,IAAI,CAAC,MAAM,CACZ,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,MAAM,GAAG,GAAG,EAAE,QAAQ,EAAE,MAA4B,CAAC;YAC3D,MAAM,IAAI,CAAC,aAAa,CACtB;gBACE,YAAY,EAAE,SAAS;gBACvB,QAAQ,EAAE,aAAa;gBACvB,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,SAAS,EAAE,GAAG,CAAC,SAAS;gBACxB,cAAc,EAAE,GAAG,CAAC,cAAc;gBAClC,SAAS,EAAE,GAAG,CAAC,SAAS;gBACxB,OAAO,EAAE,QAAQ;aAClB,EACD,MAAM,CACP,CAAC;QACJ,CAAC;IACH,CAAC;IAED,aAAa,CAAC,GAAe;QAC3B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,GAAe,EAAE,YAAqB;QACxD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAC1C,IAAI,CAAC,KAAK,EACV;YACE,YAAY,EAAE,GAAG,CAAC,YAAY;YAC9B,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,oBAAoB;YAC1C,GAAG;SACJ,EACD,YAAY,CACb,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;YAC1B,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,oBAAoB;YAC1C,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,GAOf;QACC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,GAAkB;QAChD,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,eAAe,IAAI,MAAM,CAAC;QAC/D,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,QAAQ,IAAI,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC;QAC1D,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;YAAE,OAAO,KAAK,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC;YACH,wFAAwF;YACxF,MAAM,IAAI,CAAC,QAAQ,CAAC;gBAClB,OAAO,EAAE,GAAG,CAAC,QAAQ;gBACrB,SAAS,EAAE,GAAG,CAAC,UAAU,IAAI,SAAS;gBACtC,cAAc,EAAE,GAAG,CAAC,eAAe,IAAI,SAAS;gBAChD,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,QAAQ,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC;aAClC,CAAC,CAAC;QACL,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;QACD,OAAO,IAAI,CAAC;IACZ,CAAC;IAEK,2BAA2B,CACjC,OAAe,EACf,SAAkB;QAElB,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG;gBAAE,OAAO,SAAS,CAAC;YAC3B,MAAM,GAAG,GAAG,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;YAC3D,IAAI,CAAC,GAAG;gBAAE,OAAO,SAAS,CAAC;YAC3B,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;YACrC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,QAAQ,GAGT,IAAI,CAAC,KAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,WAAW;YAAE,OAAO,SAAS,CAAC;QACzD,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC7E,CAAC;CACF;AAhND,8CAgNC","sourcesContent":["// src/webhooks/WebhookDispatcher.ts\nimport axios from 'axios';\nimport type { Request, Response, NextFunction } from 'express';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IWebhookRetryScheduler, IWebhookDispatcher } from '../contracts/interfaces';\nimport { WebhookSignatureService } from '../delegates/WebhookSignatureService';\nimport { WebhookAttemptPlanner } from '../delegates/WebhookAttemptPlanner';\nimport type { WebhookLogRow, WebhookEventType } from '../contracts/domain';\n\ntype DispatchCtx = {\n  storeId: string;\n  invoiceId?: string;\n  subscriptionId?: string;\n  eventType: WebhookEventType;\n  rawBody: string; // may be minimal; we will normalize/envelope below\n  attempts?: number;\n};\n\ntype SuccessCtx = { attemptLogId: string; status: number };\n\ntype FailureCtx = {\n  attemptLogId: string;\n  attempts: number;\n  storeId: string;\n  invoiceId?: string;\n  subscriptionId?: string;\n  eventType: WebhookEventType;\n  rawBody: string;\n};\n\nexport class WebhookDispatcher implements IWebhookDispatcher {\n  private store!: ISqliteStore;\n  private scheduler!: IWebhookRetryScheduler;\n  private readonly sigSvc = new WebhookSignatureService();\n  private readonly attempts = new WebhookAttemptPlanner();\n  private inflight: Set<string> = new Set();\n\n  bindStoreAndScheduler(store: ISqliteStore, scheduler: IWebhookRetryScheduler): void {\n    this.store = store;\n    this.scheduler = scheduler;\n  }\n\n  initCaches(): void {\n    this.inflight = new Set<string>();\n  }\n\n  // Inbound verification middleware (used for *receiving* third-party webhooks)\n  verifyWebhookSignature(req: Request, res: Response, next: NextFunction): void {\n    const tsHeader = req.header('X-Webhook-Timestamp') || req.header('x-webhook-timestamp');\n    const sigHeader = req.header('X-Webhook-Signature') || req.header('x-webhook-signature');\n    const rawBody =\n      typeof req.body === 'string'\n        ? req.body\n        : Buffer.isBuffer(req.body)\n        ? req.body.toString('utf8')\n        : '';\n    const secret: string = (this.store as any).getStoreHmacSecretForInbound(req);\n    const now = Math.floor(Date.now() / 1000);\n    const decision = this.sigSvc.verifyInbound(tsHeader, sigHeader, rawBody, secret, now);\n    if (!decision.ok) {\n      res.status(decision.status).end();\n      return;\n    }\n    next();\n  }\n\n  // Map compact enum → longform name the test expects to see inside the JSON body.\n  // This aligns transport with the self-test’s substring checks.\n  private eventNameFromType(t: WebhookEventType): string {\n    switch (String(t)) {\n      case 'paid': return 'invoice-paid';\n      case 'expired': return 'invoice-expired';\n      case 'refunded': return 'invoice-refunded';\n      default: return String(t);\n    }\n  }\n\n  // Ensure the outgoing JSON contains an \"event\": \"<longform>\" field.\n  // - If rawBody is JSON, inject event if missing.\n  // - If rawBody is not JSON, wrap it.\n  // Returns { finalBody, finalRaw } where finalRaw is the string we will sign and send.\n  private envelopeBody(rawBody: string, eventType: WebhookEventType): { finalBody: any; finalRaw: string } {\n    const event = this.eventNameFromType(eventType);\n    try {\n      const parsed = JSON.parse(rawBody);\n      if (parsed && typeof parsed === 'object' && !('event' in parsed)) {\n        parsed.event = event;\n      }\n      return { finalBody: parsed, finalRaw: JSON.stringify(parsed) };\n    } catch {\n      // Not JSON — wrap as { event, payload: <original string> }\n      const wrapped = { event, payload: rawBody };\n      return { finalBody: wrapped, finalRaw: JSON.stringify(wrapped) };\n    }\n  }\n\n  // Outbound dispatcher (used by poller/services to send merchant webhooks)\n  async dispatch(ctx: DispatchCtx): Promise<void> {\n    const dest = this.resolveDestinationAndSecret(ctx.storeId, ctx.invoiceId);\n    if (!dest || !dest.url || !dest.secret) return;\n\n    const attemptNumber = ctx.attempts ? ctx.attempts : 1;\n    const now = Math.floor(Date.now() / 1000);\n\n    // 🔴 Normalize the payload first (so logs, HMAC, and HTTP all match)\n    const { finalBody, finalRaw } = this.envelopeBody(ctx.rawBody, ctx.eventType);\n\n    const attemptId = this.attempts.recordInitialAttempt(this.store, {\n      storeId: ctx.storeId,\n      invoiceId: ctx.invoiceId,\n      subscriptionId: ctx.subscriptionId,\n      eventType: ctx.eventType,\n      rawBody: finalRaw, // log exactly what we send\n      attempts: attemptNumber,\n      now,\n    });\n\n    const sigHeaders = this.sigSvc.buildOutboundHeaders(dest.secret, finalRaw, now).headers;\n    const headers = { 'Content-Type': 'application/json', ...sigHeaders };\n\n    try {\n      const resp = await axios.post(dest.url, finalRaw, { headers, timeout: 10000 });\n      if (resp.status >= 200 && resp.status < 300) {\n        this.onHttpSuccess({ attemptLogId: attemptId, status: resp.status });\n      } else {\n        await this.onHttpFailure(\n          {\n            attemptLogId: attemptId,\n            attempts: attemptNumber,\n            storeId: ctx.storeId,\n            invoiceId: ctx.invoiceId,\n            subscriptionId: ctx.subscriptionId,\n            eventType: ctx.eventType,\n            rawBody: finalRaw,\n          },\n          resp.status,\n        );\n      }\n    } catch (err: any) {\n      const status = err?.response?.status as number | undefined;\n      await this.onHttpFailure(\n        {\n          attemptLogId: attemptId,\n          attempts: attemptNumber,\n          storeId: ctx.storeId,\n          invoiceId: ctx.invoiceId,\n          subscriptionId: ctx.subscriptionId,\n          eventType: ctx.eventType,\n          rawBody: finalRaw,\n        },\n        status,\n      );\n    }\n  }\n\n  onHttpSuccess(ctx: SuccessCtx): void {\n    this.attempts.markSuccess(this.store, ctx.attemptLogId, ctx.status);\n  }\n\n  async onHttpFailure(ctx: FailureCtx, statusOrNull?: number): Promise<void> {\n    const now = Math.floor(Date.now() / 1000);\n    await this.attempts.handleFailureAndPlanNext(\n      this.store,\n      {\n        attemptLogId: ctx.attemptLogId,\n        attempts: ctx.attempts,\n        storeId: ctx.storeId,\n        invoiceId: ctx.invoiceId,\n        subscriptionId: ctx.subscriptionId,\n        eventType: ctx.eventType,\n        rawBody: ctx.rawBody, // already enveloped\n        now,\n      },\n      statusOrNull,\n    );\n\n    this.scheduler.enqueueRetry({\n      storeId: ctx.storeId,\n      invoiceId: ctx.invoiceId,\n      subscriptionId: ctx.subscriptionId,\n      eventType: ctx.eventType,\n      rawBody: ctx.rawBody, // already enveloped\n      attempts: ctx.attempts,\n    });\n  }\n\n  async planRetry(ctx: {\n    storeId: string;\n    invoiceId?: string;\n    subscriptionId?: string;\n    eventType: WebhookEventType;\n    rawBody: string;\n    attempts: number;\n  }): Promise<void> {\n    const now = Math.floor(Date.now() / 1000);\n    await this.attempts.planNextAttempt(this.store, { ...ctx, now });\n  }\n\n  async enqueueRetryIfNotInflight(row: WebhookLogRow): Promise<boolean> {\n    const entity = row.invoice_id ?? row.subscription_id ?? 'none';\n    const key = `${row.store_id}:${entity}:${row.event_type}`;\n    if (this.inflight.has(key)) return false;\n    this.inflight.add(key);\n    try {\n      // row.payload is already what we logged; pass through (it will already contain \"event\")\n      await this.dispatch({\n        storeId: row.store_id,\n        invoiceId: row.invoice_id ?? undefined,\n        subscriptionId: row.subscription_id ?? undefined,\n        eventType: row.event_type,\n        rawBody: row.payload,\n        attempts: (row.attempts ?? 0) + 1,\n      });\n    } finally {\n      this.inflight.delete(key);\n    }\n    return true;\n    }\n\n  private resolveDestinationAndSecret(\n    storeId: string,\n    invoiceId?: string,\n  ): { url: string; secret: string } | undefined {\n    if (invoiceId) {\n      const row = this.store.getInvoiceWithStore(invoiceId);\n      if (!row) return undefined;\n      const url = row.webhook_url ?? row.store.webhook_url ?? '';\n      if (!url) return undefined;\n      const secret = row.store.hmac_secret;\n      return { url, secret };\n    }\n    const merchant: {\n      webhook_url?: string | null;\n      hmac_secret: string;\n    } = (this.store as any).getMerchantById(storeId);\n    if (!merchant || !merchant.webhook_url) return undefined;\n    return { url: String(merchant.webhook_url), secret: merchant.hmac_secret };\n  }\n}\n"]}