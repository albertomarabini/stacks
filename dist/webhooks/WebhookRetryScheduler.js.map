{"version":3,"file":"WebhookRetryScheduler.js","sourceRoot":"","sources":["../../src/webhooks/WebhookRetryScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["// src/webhooks/WebhookRetryScheduler.ts\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IWebhookDispatcher, IWebhookRetryScheduler } from '../contracts/interfaces';\nimport type { WebhookLogRow, WebhookEventType } from '../contracts/domain';\n\ntype EnqueueCtx = {\n  storeId: string;\n  invoiceId?: string;\n  subscriptionId?: string;\n  eventType: WebhookEventType;\n  rawBody: string;\n  attempts: number;\n};\n\nexport class WebhookRetryScheduler implements IWebhookRetryScheduler {\n  private store!: ISqliteStore;\n  private dispatcher!: IWebhookDispatcher;\n  private timerId: NodeJS.Timeout | undefined;\n  private readonly intervalMs = 30000;\n  private readonly inflight = new Set<string>();\n\n  bindDependencies(store: ISqliteStore, dispatcher: IWebhookDispatcher): void {\n    this.store = store;\n    this.dispatcher = dispatcher;\n  }\n\n  async bootstrap(): Promise<void> {\n    if (this.timerId !== undefined) return;\n\n    const _now = Math.floor(Date.now() / 1000);\n    const rows: WebhookLogRow[] = this.store.selectDueWebhookRetries();\n    const seen = new Set<string>();\n    for (const r of rows) {\n      const entity = r.invoice_id ?? r.subscription_id ?? 'none';\n      const key = `${r.store_id}:${entity}:${r.event_type}`;\n      if (seen.has(key)) continue;\n      seen.add(key);\n      this.enqueueRetry({\n        storeId: r.store_id,\n        invoiceId: r.invoice_id ?? undefined,\n        subscriptionId: r.subscription_id ?? undefined,\n        eventType: r.event_type,\n        rawBody: r.payload,\n        attempts: r.attempts,\n      });\n    }\n\n    this.timerId = setInterval(() => this.onWake(), this.intervalMs);\n  }\n\n  onWake(): void {\n    const now = Math.floor(Date.now() / 1000);\n    void this.processDueRetries(now);\n  }\n\n  async processDueRetries(nowEpochSecs: number): Promise<void> {\n    const rows: WebhookLogRow[] = this.store.getDueWebhookAttempts(nowEpochSecs);\n    for (const r of rows) {\n      await this.dispatcher.dispatch({\n        storeId: r.store_id,\n        invoiceId: r.invoice_id ?? undefined,\n        subscriptionId: r.subscription_id ?? undefined,\n        eventType: r.event_type,\n        rawBody: r.payload,\n        attempts: r.attempts,\n      });\n    }\n  }\n\n  enqueueRetry(ctx: EnqueueCtx): void {\n    const id = ctx.invoiceId ?? ctx.subscriptionId ?? 'none';\n    const key = `${ctx.storeId}:${id}:${ctx.eventType}`;\n    if (this.inflight.has(key)) return;\n    this.inflight.add(key);\n\n    const backoff = [60, 120, 240, 480, 960];\n    const idx = Math.min(Math.max(ctx.attempts, 1), backoff.length) - 1;\n    const delayMs = backoff[idx] * 1000;\n\n    setTimeout(async () => {\n      try {\n        await this.dispatcher.dispatch({\n          storeId: ctx.storeId,\n          invoiceId: ctx.invoiceId,\n          subscriptionId: ctx.subscriptionId,\n          eventType: ctx.eventType,\n          rawBody: ctx.rawBody,\n          attempts: ctx.attempts,\n        });\n      } finally {\n        this.inflight.delete(key);\n      }\n    }, delayMs);\n  }\n}\n"]}