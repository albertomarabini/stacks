{"version":3,"file":"MerchantOnchainSyncPlanner.js","sourceRoot":"","sources":["../../src/delegates/MerchantOnchainSyncPlanner.ts"],"names":[],"mappings":";;;AAKA,MAAa,0BAA0B;IACrC,KAAK,CAAC,YAAY,CAChB,KAAmB,EACnB,KAAyB,EACzB,OAA6B,EAC7B,OAAe;QAEf,gFAAgF;QAChF,MAAM,QAAQ,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QACpF,IAAI,CAAC,QAAQ;YAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAEzC,MAAM,SAAS,GAAW,QAAQ,CAAC,SAAS,CAAC;QAE7C,2DAA2D;QAC3D,MAAM,YAAY,GAAY,MAAO,KAAa,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC;QAE1F,4DAA4D;QAC5D,oCAAoC;QACpC,kDAAkD;QAClD,gFAAgF;QAChF,MAAM,KAAK,GAA2B,EAAE,CAAC;QAEzC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,KAAK,CAAC,IAAI,CACR,OAAO,CAAC,qBAAqB,CAAC;gBAC5B,QAAQ,EAAE,SAAS;gBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,SAAS;aACjC,CAAC,CACH,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,IAAI,CACR,OAAO,CAAC,sBAAsB,CAAC;YAC7B,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM;SAC1B,CAAC,CACH,CAAC;QAEF,0EAA0E;QAC1E,oEAAoE;QACpE,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,KAAK,CAAC,mBAAmB,CAAC,OAAO,EAAE;gBAChD,MAAM,EAAE,QAAQ;gBAChB,kBAAkB,EAAE,KAAK;aAC1B,CAAU,CAAC;YAEZ,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;gBACzB,wDAAwD;gBACxD,MAAM,KAAK,GAAuB,GAAG,EAAE,MAAM,CAAC;gBAC9C,MAAM,UAAU,GAAuB,GAAG,EAAE,WAAW,CAAC;gBACxD,IAAI,CAAC,KAAK,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,IAAI,CAAC;oBAAE,SAAS;gBAE1E,KAAK,CAAC,IAAI,CACR,OAAO,CAAC,kBAAkB,CAAC;oBACzB,KAAK;oBACL,UAAU;oBACV,IAAI,EAAE,GAAG,EAAE,IAAI,IAAI,SAAS;oBAC5B,kEAAkE;iBACnE,CAAC,CACH,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,MAAM,CAAC;YACP,uEAAuE;QACzE,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;CACF;AAnED,gEAmEC","sourcesContent":["// src/delegates/MerchantOnchainSyncPlanner.ts\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IStacksChainClient, IContractCallBuilder } from '../contracts/interfaces';\nimport type { UnsignedContractCall } from '../contracts/domain';\n\nexport class MerchantOnchainSyncPlanner {\n  async planForStore(\n    store: ISqliteStore,\n    chain: IStacksChainClient,\n    builder: IContractCallBuilder,\n    storeId: string\n  ): Promise<{ notFound: true } | { calls: UnsignedContractCall[] }> {\n    // Resolve merchant row (projection has enough fields for principal/active/name)\n    const merchant = store.listMerchantsProjection().find((m: any) => m.id === storeId);\n    if (!merchant) return { notFound: true };\n\n    const principal: string = merchant.principal;\n\n    // Determine if the merchant is already registered on-chain\n    const isRegistered: boolean = await (chain as any).isMerchantRegisteredOnChain(principal);\n\n    // We will accumulate calls in the correct dependency order:\n    // 1) register-merchant (if missing)\n    // 2) set-merchant-active (mirror current DB flag)\n    // 3) create-invoice for any unpaid DTOs that are not yet on-chain (best-effort)\n    const calls: UnsignedContractCall[] = [];\n\n    if (!isRegistered) {\n      calls.push(\n        builder.buildRegisterMerchant({\n          merchant: principal,\n          name: merchant.name ?? undefined,\n        }),\n      );\n    }\n\n    calls.push(\n      builder.buildSetMerchantActive({\n        merchant: principal,\n        active: !!merchant.active,\n      }),\n    );\n\n    // Best-effort: propose create-invoice for every unpaid DTO of this store.\n    // We intentionally omit expiresAtBlock (builder handles undefined).\n    try {\n      const unpaid = store.listInvoicesByStore(storeId, {\n        status: 'unpaid',\n        orderByCreatedDesc: false,\n      }) as any[];\n\n      for (const inv of unpaid) {\n        // Defensive checks (shape may vary across DAO versions)\n        const idHex: string | undefined = inv?.id_hex;\n        const amountSats: number | undefined = inv?.amount_sats;\n        if (!idHex || typeof amountSats !== 'number' || amountSats <= 0) continue;\n\n        calls.push(\n          builder.buildCreateInvoice({\n            idHex,\n            amountSats,\n            memo: inv?.memo ?? undefined,\n            // expiresAtBlock intentionally omitted; builder accepts undefined\n          }),\n        );\n      }\n    } catch {\n      // If DAO shape lacks listInvoicesByStore, just skip invoice mirroring.\n    }\n\n    return { calls };\n  }\n}\n"]}