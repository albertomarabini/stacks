{"version":3,"file":"SubscriptionLifecycleProcessor.js","sourceRoot":"","sources":["../../src/delegates/SubscriptionLifecycleProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// src/delegates/SubscriptionLifecycleProcessor.ts\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IStacksChainClient, IWebhookDispatcher } from '../contracts/interfaces';\nimport type { NormalizedEvent } from '../contracts/domain';\n\nexport class SubscriptionLifecycleProcessor {\n  constructor(\n    private store: ISqliteStore,\n    private chain: IStacksChainClient,\n    private dispatcher: IWebhookDispatcher,\n  ) {}\n\n  async processBatch(\n    batch: NormalizedEvent[],\n    tipHeight: number,\n    minConfirmations: number,\n  ): Promise<void> {\n    // create-subscription\n    for (const e of batch) {\n      if (e.type !== 'create-subscription') continue;\n      const conf = tipHeight - e.block_height + 1;\n      if (conf < minConfirmations) continue;\n\n      const storeId = this.store.getStoreIdByPrincipal(e.merchantPrincipal!);\n      if (!storeId) continue;\n\n      this.store.upsertSubscriptionByHex({\n        idHex: e.idHex,\n        storeId,\n        merchantPrincipal: e.merchantPrincipal!,\n        subscriber: e.subscriber!,\n        amountSats: e.amountSats!,\n        intervalBlocks: e.intervalBlocks!,\n        active: 1,\n      });\n\n      const onchain = await this.chain.readSubscription(e.idHex);\n      const nextDue = onchain?.nextDue ? Number(onchain.nextDue) : 0;\n\n      const rawBody = JSON.stringify({\n        subscriptionId: e.idHex,\n        merchant: e.merchantPrincipal!,\n        subscriber: e.subscriber!,\n        amountSats: e.amountSats!,\n        intervalBlocks: e.intervalBlocks!,\n        nextDue,\n      });\n\n      await this.dispatcher.dispatch({\n        storeId,\n        subscriptionId: e.idHex,\n        eventType: 'subscription-created',\n        rawBody,\n      });\n    }\n\n    // cancel-subscription\n    for (const e of batch) {\n      if (e.type !== 'cancel-subscription') continue;\n      const conf = tipHeight - e.block_height + 1;\n      if (conf < minConfirmations) continue;\n\n      this.store.setSubscriptionActive({ idHex: e.idHex, active: 0 });\n\n      const onchain = await this.chain.readSubscription(e.idHex);\n      const storeId = onchain ? this.store.getStoreIdByPrincipal(onchain.merchant) : undefined;\n      if (!storeId) continue;\n\n      const rawBody = JSON.stringify({ subscriptionId: e.idHex });\n\n      await this.dispatcher.dispatch({\n        storeId,\n        subscriptionId: e.idHex,\n        eventType: 'subscription-canceled',\n        rawBody,\n      });\n    }\n\n    // pay-subscription\n    for (const e of batch) {\n      if (e.type !== 'pay-subscription') continue;\n      const conf = tipHeight - e.block_height + 1;\n      if (conf < minConfirmations) continue;\n\n      const onchain = await this.chain.readSubscription(e.idHex);\n      const amountSats = onchain ? Number(onchain.amountSats) : 0;\n      const nextDue = onchain ? Number(onchain.nextDue) : 0;\n      const merchant = onchain?.merchant;\n      const storeId = merchant ? this.store.getStoreIdByPrincipal(merchant) : undefined;\n      if (!storeId) continue;\n\n      // DB linkage update (idempotency handled in DAO)\n      this.store.updateSubscriptionLastPaid({ subscriptionId: e.idHex, lastPaidInvoiceId: '' });\n\n      const rawBody = JSON.stringify({\n        subscriptionId: e.idHex,\n        subscriber: e.sender!,\n        amountSats,\n        txId: e.tx_id,\n        nextDue,\n      });\n\n      await this.dispatcher.dispatch({\n        storeId,\n        subscriptionId: e.idHex,\n        eventType: 'subscription-paid',\n        rawBody,\n      });\n    }\n  }\n}\n"]}