{"version":3,"file":"PayInvoiceTxAssembler.js","sourceRoot":"","sources":["../../src/delegates/PayInvoiceTxAssembler.ts"],"names":[],"mappings":";;;AAQA,+CAAiD;AAWjD,MAAa,SAAU,SAAQ,KAAK;IAClC,YAAmB,MAAc,EAAS,IAAY,EAAE,OAAgB;QACtE,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC;QADN,WAAM,GAAN,MAAM,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAQ;IAEtD,CAAC;CACF;AAJD,8BAIC;AAED,MAAa,qBAAqB;IAQhC,YACE,OAA6B,EAC7B,GAAsB,EACtB,GAAmB,EACnB,KAAyB,EACzB,OAAuB,EACvB,kBAA+B;QAE/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,KAAK,kBAAU,CAAC,CAAC,yCAAyC;IAC5D,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,GAAoB,EACpB,cAAuB;QAEvB,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;QACrG,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,SAAS,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QAE7D,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE9C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;QAC7C,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,SAAS,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACxD,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,oBAAoB;QAEjD,0DAA0D;QAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,gBAAgB,CAAC;QACrD,IAAI,UAAU;YAAE,MAAM,IAAI,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QACpD,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5C,MAAM,IAAI,SAAS,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,cAAc,GAAG,CAAC,OAAO,cAAc,KAAK,QAAQ,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;YACtF,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAE3B,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;YAClC,KAAK,EAAE,GAAG,CAAC,MAAM;YACjB,UAAU,EAAE,GAAG,CAAC,WAAW;YAC3B,cAAc,EAAE,cAAc;YAC9B,iBAAiB,EAAE,GAAG,CAAC,kBAAkB;SAC1C,CAAC,CAAC;IACL,CAAC;CACF;AAxDD,sDAwDC","sourcesContent":["// src/delegates/PayInvoiceTxAssembler.ts\nimport type {\n  IContractCallBuilder,\n  IAssetInfoFactory,\n  IConfigService,\n  IStacksChainClient,\n} from '../contracts/interfaces';\nimport { InvoiceIdGuard } from '../delegates/InvoiceIdGuard';\nimport { Validation } from '../validation/rules';\n\ntype InvoiceRowForTx = {\n  id_hex: string;\n  amount_sats: number;\n  merchant_principal: string;\n  status: string;\n  quote_expires_at: number; // ms epoch\n  store: { active: number | boolean };\n};\n\nexport class HttpError extends Error {\n  constructor(public status: number, public code: string, message?: string) {\n    super(message ?? code);\n  }\n}\n\nexport class PayInvoiceTxAssembler {\n  private readonly builder: IContractCallBuilder;\n  private readonly aif: IAssetInfoFactory;\n  private readonly cfg: IConfigService;\n  private readonly chain: IStacksChainClient;\n  private readonly idGuard: InvoiceIdGuard;\n  private readonly nonPayableStatuses: Set<string>;\n\n  constructor(\n    builder: IContractCallBuilder,\n    aif: IAssetInfoFactory,\n    cfg: IConfigService,\n    chain: IStacksChainClient,\n    idGuard: InvoiceIdGuard,\n    nonPayableStatuses: Set<string>,\n  ) {\n    this.builder = builder;\n    this.aif = aif;\n    this.cfg = cfg;\n    this.chain = chain;\n    this.idGuard = idGuard;\n    this.nonPayableStatuses = nonPayableStatuses;\n    void Validation; // imported per spec; no runtime use here\n  }\n\n  async buildUnsignedPayInvoice(\n    row: InvoiceRowForTx,\n    payerPrincipal?: string,\n  ): Promise<any> {\n    const isActive = (typeof row.store.active === 'boolean') ? row.store.active : row.store.active === 1;\n    if (!isActive) throw new HttpError(422, 'merchant-inactive');\n\n    this.idGuard.validateHexIdOrThrow(row.id_hex);\n\n    const tokenId = this.cfg.getSbtcContractId();\n    if (!tokenId) throw new HttpError(422, 'missing-token');\n    this.aif.getSbtcAssetInfo(); // surface misconfig\n\n    // TTL + mirror status checks only (no on-chain call here)\n    const ttlExpired = Date.now() > row.quote_expires_at;\n    if (ttlExpired) throw new HttpError(409, 'expired');\n    if (this.nonPayableStatuses.has(row.status)) {\n      throw new HttpError(409, 'invalid-state');\n    }\n\n    const effectivePayer = (typeof payerPrincipal === 'string' && payerPrincipal.length > 0)\n      ? payerPrincipal\n      : row.merchant_principal;\n\n    return this.builder.buildPayInvoice({\n      idHex: row.id_hex,\n      amountSats: row.amount_sats,\n      payerPrincipal: effectivePayer,\n      merchantPrincipal: row.merchant_principal,\n    });\n  }\n}\n"]}