{"version":3,"file":"SqlInListBuilder.js","sourceRoot":"","sources":["../../src/delegates/SqlInListBuilder.ts"],"names":[],"mappings":";AAAA,oCAAoC;;;AAEpC,MAAa,gBAAgB;IAC3B,aAAa,CACX,MAAc,EACd,MAA8B;QAE9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QACD,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;YACnB,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,QAAQ,EAAE,CAAC;gBACrC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QACD,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,OAAO;YACL,MAAM,EAAE,GAAG,MAAM,QAAQ,YAAY,GAAG;YACxC,MAAM,EAAE,MAAM;SACf,CAAC;IACJ,CAAC;CACF;AApBD,4CAoBC","sourcesContent":["// src/delegates/SqlInListBuilder.ts\n\nexport class SqlInListBuilder {\n  buildInClause(\n    column: string,\n    values: Array<string | number>,\n  ): { clause: string; params: Array<string | number> } {\n    if (!Array.isArray(values) || values.length === 0) {\n      throw new Error('values must be a non-empty array');\n    }\n    for (const v of values) {\n      const t = typeof v;\n      if (t !== 'string' && t !== 'number') {\n        throw new Error('values must contain only strings or numbers');\n      }\n    }\n    const placeholders = values.map(() => '?').join(',');\n    return {\n      clause: `${column} IN (${placeholders})`,\n      params: values,\n    };\n  }\n}\n"]}