{"version":3,"file":"WebhookAdminRetryService.js","sourceRoot":"","sources":["../../src/delegates/WebhookAdminRetryService.ts"],"names":[],"mappings":";;;AAKA,MAAa,wBAAwB;IACnC,KAAK,CAAC,KAAK,CACT,KAAmB,EACnB,UAA8B,EAC9B,YAAoB;QAMpB,MAAM,GAAG,GAAG,KAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG;YAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;QAEvC,MAAM,aAAa,GAAG,KAAK,CAAC,2BAA2B,CAAC;YACtD,OAAO,EAAE,GAAG,CAAC,QAAQ;YACrB,SAAS,EAAE,GAAG,CAAC,UAAU,IAAI,SAAS;YACtC,cAAc,EAAE,GAAG,CAAC,eAAe,IAAI,SAAS;YAChD,SAAS,EAAE,GAAG,CAAC,UAAiB;SACjC,CAAC,CAAC;QACH,IAAI,aAAa;YAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;QAExD,MAAM,QAAQ,GAAG,MAAO,UAAkB,CAAC,yBAAyB,CAAC,GAAoB,CAAC,CAAC;QAC3F,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC;CACF;AAxBD,4DAwBC","sourcesContent":["// src/delegates/WebhookAdminRetryService.ts\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IWebhookDispatcher } from '../contracts/interfaces';\nimport type { WebhookLogRow } from '../contracts/domain';\n\nexport class WebhookAdminRetryService {\n  async retry(\n    store: ISqliteStore,\n    dispatcher: IWebhookDispatcher,\n    webhookLogId: string\n  ): Promise<\n    | { type: 'not-found' }\n    | { type: 'already-delivered' }\n    | { type: 'enqueued'; enqueued: boolean }\n  > {\n    const row = store.getWebhookLogById(webhookLogId);\n    if (!row) return { type: 'not-found' };\n\n    const successExists = store.existsSuccessfulDeliveryFor({\n      storeId: row.store_id,\n      invoiceId: row.invoice_id ?? undefined,\n      subscriptionId: row.subscription_id ?? undefined,\n      eventType: row.event_type as any,\n    });\n    if (successExists) return { type: 'already-delivered' };\n\n    const enqueued = await (dispatcher as any).enqueueRetryIfNotInflight(row as WebhookLogRow);\n    return { type: 'enqueued', enqueued: !!enqueued };\n  }\n}\n"]}