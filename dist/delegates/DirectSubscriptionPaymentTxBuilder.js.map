{"version":3,"file":"DirectSubscriptionPaymentTxBuilder.js","sourceRoot":"","sources":["../../src/delegates/DirectSubscriptionPaymentTxBuilder.ts"],"names":[],"mappings":";;;AAIA,MAAa,kCAAkC;IAC7C,YACmB,KAAyB,EACzB,OAA6B,EAC7B,KAAsB;QAFtB,UAAK,GAAL,KAAK,CAAoB;QACzB,YAAO,GAAP,OAAO,CAAsB;QAC7B,UAAK,GAAL,KAAK,CAAiB;IACtC,CAAC;IAEJ,KAAK,CAAC,QAAQ,CACZ,GAAoB,EACpB,cAAsB,EACtB,iBAAyB;QAEzB,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC9C,MAAM,CAAC,GAAQ,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YACpE,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC;YACtB,MAAM,CAAC,CAAC;QACV,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEnC,IAAI,cAAc,KAAK,GAAG,CAAC,UAAU,EAAE,CAAC;YACtC,MAAM,CAAC,GAAQ,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACxD,CAAC,CAAC,IAAI,GAAG,eAAe,CAAC;YACzB,MAAM,CAAC,CAAC;QACV,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACtC,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,eAAe,EAAE,CAAC;YACrC,MAAM,CAAC,GAAQ,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACjE,CAAC,CAAC,IAAI,GAAG,WAAW,CAAC;YACrB,MAAM,CAAC,CAAC;QACV,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,CAAC,GAAQ,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC/C,CAAC,CAAC,IAAI,GAAG,eAAe,CAAC;YACzB,MAAM,CAAC,CAAC;QACV,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;YACvC,KAAK,EAAE,GAAG,CAAC,MAAM;YACjB,UAAU,EAAE,GAAG,CAAC,WAAW;YAC3B,UAAU,EAAE,cAAc;YAC1B,QAAQ,EAAE,iBAAiB;SAC5B,CAAC,CAAC;IACL,CAAC;CACF;AA/CD,gFA+CC","sourcesContent":["// src/delegates/DirectSubscriptionPaymentTxBuilder.ts\nimport type { IStacksChainClient, IContractCallBuilder, IInvoiceIdCodec } from '../contracts/interfaces';\nimport type { SubscriptionRow, UnsignedContractCall } from '../contracts/domain';\n\nexport class DirectSubscriptionPaymentTxBuilder {\n  constructor(\n    private readonly chain: IStacksChainClient,\n    private readonly builder: IContractCallBuilder,\n    private readonly codec: IInvoiceIdCodec\n  ) {}\n\n  async assemble(\n    sub: SubscriptionRow,\n    payerPrincipal: string,\n    merchantPrincipal: string\n  ): Promise<UnsignedContractCall> {\n    if (sub.active !== 1 || sub.mode !== 'direct') {\n      const e: any = new Error('Subscription not payable in direct mode');\n      e.code = 'bad_status';\n      throw e;\n    }\n\n    this.codec.assertHex64(sub.id_hex);\n\n    if (payerPrincipal !== sub.subscriber) {\n      const e: any = new Error('Payer must equal subscriber');\n      e.code = 'invalid_payer';\n      throw e;\n    }\n\n    const tip = await this.chain.getTip();\n    if (tip.height < sub.next_invoice_at) {\n      const e: any = new Error('Current height below next invoice at');\n      e.code = 'too_early';\n      throw e;\n    }\n\n    const token = await this.chain.readSbtcToken();\n    if (!token) {\n      const e: any = new Error('sBTC token not set');\n      e.code = 'missing_token';\n      throw e;\n    }\n\n    return this.builder.buildPaySubscription({\n      idHex: sub.id_hex,\n      amountSats: sub.amount_sats,\n      subscriber: payerPrincipal,\n      merchant: merchantPrincipal,\n    });\n  }\n}\n"]}