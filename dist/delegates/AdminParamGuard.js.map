{"version":3,"file":"AdminParamGuard.js","sourceRoot":"","sources":["../../src/delegates/AdminParamGuard.ts"],"names":[],"mappings":";;;AAGA,MAAa,eAAe;IAC1B,UAAU,CAAC,EAAU;QACnB,MAAM,EAAE,GACN,4FAA4F,CAAC;QAC/F,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;YACjB,MAAM,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED,qBAAqB,CAAC,CAAS;QAC7B,4DAA4D;QAC5D,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;YAAE,MAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;QAC9F,OAAO,IAAI,CAAC;IACd,CAAC;IAEH,oBAAoB,CAClB,KAAoC;QAEpC,MAAM,OAAO,GAAG,IAAI,GAAG,CAAgB;YACrC,QAAQ;YACR,MAAM;YACN,oBAAoB;YACpB,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAC;QACH,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QACtB,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YAC9B,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBACV,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;iBACpB,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnC,MAAM,GAAG,GAAoB,EAAE,CAAC;QAChC,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC;YACpB,IAAI,OAAO,CAAC,GAAG,CAAC,CAAkB,CAAC;gBAAE,GAAG,CAAC,IAAI,CAAC,CAAkB,CAAC,CAAC;QACpE,CAAC;QACD,OAAO,GAEN,CAAC;IACJ,CAAC;CACF;AAzCD,0CAyCC","sourcesContent":["// src/delegates/AdminParamGuard.ts\nimport type { InvoiceStatus } from '../contracts/domain';\n\nexport class AdminParamGuard {\n  assertUuid(id: string): void {\n    const re =\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n    if (!re.test(id)) {\n      throw new TypeError('Invalid UUID');\n    }\n  }\n\n  assertStacksPrincipal(p: string) {\n    // allow mainnet (SP…) and testnet (ST…) standard principals\n    if (!/^S[PT][0-9A-Z]{38,60}$/i.test(p)) throw new TypeError('Invalid Stacks principal/address');\n      return true;\n    }\n\n  parseInvoiceStatuses(\n    input: string | string[] | undefined,\n  ): Array<'unpaid' | 'paid' | 'partially_refunded' | 'refunded' | 'canceled' | 'expired'> {\n    const allowed = new Set<InvoiceStatus>([\n      'unpaid',\n      'paid',\n      'partially_refunded',\n      'refunded',\n      'canceled',\n      'expired',\n    ]);\n    if (!input) return [];\n    const arr = Array.isArray(input)\n      ? input\n      : String(input)\n          .split(',')\n          .map((s) => s.trim())\n          .filter((s) => s.length > 0);\n    const out: InvoiceStatus[] = [];\n    for (const s of arr) {\n      if (allowed.has(s as InvoiceStatus)) out.push(s as InvoiceStatus);\n    }\n    return out as Array<\n      'unpaid' | 'paid' | 'partially_refunded' | 'refunded' | 'canceled' | 'expired'\n    >;\n  }\n}\n"]}