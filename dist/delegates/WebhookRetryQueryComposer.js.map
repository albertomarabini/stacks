{"version":3,"file":"WebhookRetryQueryComposer.js","sourceRoot":"","sources":["../../src/delegates/WebhookRetryQueryComposer.ts"],"names":[],"mappings":";;;AAUA,MAAa,yBAAyB;IAIpC,YAAY,IAAsC;QAChD,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACrF,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,OAAO,IAAI,CAAC,WAAW,KAAK,QAAQ,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,EAAE,CAAC;YAClE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAC5C,CAAC;IAED,0BAA0B;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACrD,MAAM,GAAG,GAAG;;;;2BAIW,IAAI,CAAC,WAAW;;0DAEe,WAAW;;;;;;;;;;;KAWhE,CAAC;QACF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;IAC7B,CAAC;IAED,wBAAwB,CAAC,YAAoB;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG;;;;yBAIS,IAAI,CAAC,WAAW;uCACF,WAAW;;KAE7C,CAAC;QACF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC;IACzC,CAAC;IAED,kCAAkC,CAAC,GAKlC;QACC,MAAM,GAAG,GAAG;;;;;;;;;KASX,CAAC;QACF,MAAM,MAAM,GAAG;YACb,GAAG,CAAC,OAAO;YACX,GAAG,CAAC,SAAS;YACb,GAAG,CAAC,SAAS,IAAI,IAAI;YACrB,GAAG,CAAC,SAAS,IAAI,IAAI;YACrB,GAAG,CAAC,cAAc,IAAI,IAAI;YAC1B,GAAG,CAAC,cAAc,IAAI,IAAI;SAC3B,CAAC;QACF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;IACzB,CAAC;IAED,qCAAqC,CAAC,OAAe,EAAE,SAAiB;QACtE,MAAM,GAAG,GAAG;;;;;;;;KAQX,CAAC;QACF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAAC;IAC/C,CAAC;IAEO,aAAa,CAAC,cAAsB;QAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzF,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjE,OAAO,QAAQ,cAAc,IAAI,KAAK,SAAS,IAAI,MAAM,CAAC;IAC5D,CAAC;CACF;AAhGD,8DAgGC","sourcesContent":["// src/delegates/WebhookRetryQueryComposer.ts\nimport type { WebhookEventType } from '../contracts/domain';\n\nexport type ComposedQuery = { sql: string; params: any[] };\n\nexport interface WebhookRetryQueryComposerOptions {\n  maxAttempts: number;\n  backoffSeconds: number[];\n}\n\nexport class WebhookRetryQueryComposer {\n  private readonly maxAttempts: number;\n  private readonly backoffSeconds: number[];\n\n  constructor(opts: WebhookRetryQueryComposerOptions) {\n    if (!opts || !Array.isArray(opts.backoffSeconds) || opts.backoffSeconds.length === 0) {\n      throw new Error('backoffSeconds must be a non-empty array');\n    }\n    if (typeof opts.maxAttempts !== 'number' || opts.maxAttempts <= 0) {\n      throw new Error('maxAttempts must be a positive number');\n    }\n    this.maxAttempts = opts.maxAttempts;\n    this.backoffSeconds = opts.backoffSeconds;\n  }\n\n  composeSelectDueRetriesSQL(): ComposedQuery {\n    const backoffCase = this.buildCaseExpr('w.attempts');\n    const sql = `\n      SELECT *\n      FROM webhook_logs w\n      WHERE w.success = 0\n        AND w.attempts < ${this.maxAttempts}\n        AND (\n          (strftime('%s','now') - w.last_attempt_at) >= ${backoffCase}\n        )\n        AND w.last_attempt_at = (\n          SELECT MAX(w2.last_attempt_at)\n          FROM webhook_logs w2\n          WHERE w2.store_id = w.store_id\n            AND COALESCE(w2.invoice_id, '') = COALESCE(w.invoice_id, '')\n            AND COALESCE(w2.subscription_id, '') = COALESCE(w.subscription_id, '')\n            AND w2.event_type = w.event_type\n        )\n      ORDER BY w.last_attempt_at ASC\n    `;\n    return { sql, params: [] };\n  }\n\n  composeGetDueAttemptsSQL(nowEpochSecs: number): ComposedQuery {\n    const backoffCase = this.buildCaseExpr('attempts');\n    const sql = `\n      SELECT *\n      FROM webhook_logs\n      WHERE success = 0\n        AND attempts < ${this.maxAttempts}\n        AND (? - last_attempt_at) >= ${backoffCase}\n      ORDER BY last_attempt_at ASC\n    `;\n    return { sql, params: [nowEpochSecs] };\n  }\n\n  composeExistsSuccessfulDeliverySQL(ctx: {\n    storeId: string;\n    invoiceId?: string;\n    subscriptionId?: string;\n    eventType: WebhookEventType;\n  }): ComposedQuery {\n    const sql = `\n      SELECT 1\n      FROM webhook_logs\n      WHERE store_id = ?\n        AND event_type = ?\n        AND (invoice_id IS ? OR invoice_id = ?)\n        AND (subscription_id IS ? OR subscription_id = ?)\n        AND success = 1\n      LIMIT 1\n    `;\n    const params = [\n      ctx.storeId,\n      ctx.eventType,\n      ctx.invoiceId ?? null,\n      ctx.invoiceId ?? null,\n      ctx.subscriptionId ?? null,\n      ctx.subscriptionId ?? null,\n    ];\n    return { sql, params };\n  }\n\n  composeHasSuccessfulExpiredWebhookSQL(storeId: string, invoiceId: string): ComposedQuery {\n    const sql = `\n      SELECT 1\n      FROM webhook_logs\n      WHERE store_id = ?\n        AND invoice_id = ?\n        AND event_type = 'invoice-expired'\n        AND success = 1\n      LIMIT 1\n    `;\n    return { sql, params: [storeId, invoiceId] };\n  }\n\n  private buildCaseExpr(attemptsColumn: string): string {\n    const whens = this.backoffSeconds.map((sec, idx) => `WHEN ${idx} THEN ${sec}`).join(' ');\n    const last = this.backoffSeconds[this.backoffSeconds.length - 1];\n    return `CASE ${attemptsColumn} ${whens} ELSE ${last} END`;\n  }\n}\n"]}