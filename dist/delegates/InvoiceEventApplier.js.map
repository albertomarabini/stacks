{"version":3,"file":"InvoiceEventApplier.js","sourceRoot":"","sources":["../../src/delegates/InvoiceEventApplier.ts"],"names":[],"mappings":"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","sourcesContent":["// src/delegates/InvoiceEventApplier.ts\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { IWebhookDispatcher } from '../contracts/interfaces';\nimport type { NormalizedEvent, InvoiceStatus } from '../contracts/domain';\n\nexport class InvoiceEventApplier {\n  constructor(private store: ISqliteStore, private dispatcher: IWebhookDispatcher) {}\n\n  async handlePaid(e: NormalizedEvent): Promise<void> {\n    this.store.markInvoicePaid(e.idHex, e.sender ?? 'unknown', e.tx_id ?? '');\n    const all = this.store.selectAdminInvoices() as any[];\n    const row =\n      all.find((r) => r.id_hex === e.idHex) ??\n      (this.store.selectAdminInvoices(['paid'] as InvoiceStatus[])).find((r) => r.id_hex === e.idHex)!;\n\n    const rawBody = JSON.stringify({\n      invoiceId: row.id_raw,\n      status: 'paid' as const,\n      txId: e.tx_id ?? null,\n      payer: e.sender ?? null,\n      amountSats: row.amount_sats,\n    });\n\n    await this.dispatcher.dispatch({\n      storeId: row.store_id,\n      invoiceId: row.id_raw,\n      eventType: 'paid',\n      rawBody,\n    });\n  }\n\n  async handleRefund(e: NormalizedEvent): Promise<void> {\n    const n = (v: unknown) => Number(v ?? 0);\n    const refundAmount = n((e as any).refundAmountSats ?? (e as any).amountSats);\n\n    if (!Number.isFinite(refundAmount) || refundAmount <= 0) {\n      // nothing to apply (defensive guard)\n      return;\n    }\n\n    this.store.upsertInvoiceRefund(e.idHex, refundAmount, e.tx_id);\n\n    const rows = this.store.selectAdminInvoices(\n      ['refunded', 'partially_refunded', 'paid'] as InvoiceStatus[],\n    );\n    const row = rows.find((r) => r.id_hex === e.idHex)!;\n\n    const rawBody = JSON.stringify({\n      invoiceId: row.id_raw,\n      status: refundAmount >= Number(row.amount_sats) ? 'refunded' : 'refunded',\n      refundTxId: e.tx_id,\n      refundAmount,\n    });\n\n    await this.dispatcher.dispatch({\n      storeId: row.store_id,\n      invoiceId: row.id_raw,\n      eventType: 'refunded',\n      rawBody,\n    });\n  }\n\n\n  async handleCanceled(e: NormalizedEvent): Promise<void> {\n    this.store.markInvoiceCanceled(e.idHex);\n\n    const rows = this.store.selectAdminInvoices(['canceled'] as InvoiceStatus[]);\n    const row = rows.find((r) => r.id_hex === e.idHex)!;\n\n    const rawBody = JSON.stringify({ invoiceId: row.id_raw });\n\n    await this.dispatcher.dispatch({\n      storeId: row.store_id,\n      invoiceId: row.id_raw,\n      eventType: 'invoice-canceled',\n      rawBody,\n    });\n  }\n}\n"]}