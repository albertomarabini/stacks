{"version":3,"file":"MerchantCreationService.js","sourceRoot":"","sources":["../../src/delegates/MerchantCreationService.ts"],"names":[],"mappings":";;;;;;AAAA,2CAA2C;AAC3C,oDAA4B;AAK5B,MAAa,uBAAuB;IAClC,KAAK,CAAC,MAAM,CACV,KAAmB,EACnB,IAAS;QAET,MAAM,EAAE,GAAG,gBAAM,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE1D,MAAM,SAAS,GAAsB;YACnC,EAAE;YACF,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,SAAS;YAC5B,YAAY,EAAE,IAAI,CAAC,YAAY,IAAI,SAAS;YAC5C,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,SAAS;YACpC,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,SAAS;YAC1C,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,SAAS;YAC1C,WAAW,EAAE,UAAU;YACvB,eAAe,EAAE,MAAM;YACvB,MAAM,EAAE,CAAC;YACT,aAAa,EAAE,IAAI,CAAC,aAAa,IAAI,SAAS;YAC9C,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,SAAS;YAC1C,eAAe,EAAE,IAAI,CAAC,eAAe,IAAI,SAAS;YAClD,UAAU,EAAE,SAAS;SACtB,CAAC;QAEF,IAAI,CAAC;YACH,KAAK,CAAC,cAAc,CAAC,SAAwB,CAAC,CAAC;QACjD,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,EAAE,CAAC;gBAC5D,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;YAChC,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;QAED,MAAM,GAAG,GAAgB;YACvB,EAAE;YACF,SAAS,EAAE,SAAS,CAAC,SAAS;YAC9B,IAAI,EAAE,SAAS,CAAC,IAAI,IAAI,SAAS;YACjC,WAAW,EAAE,SAAS,CAAC,YAAY,IAAI,SAAS;YAChD,OAAO,EAAE,SAAS,CAAC,QAAQ,IAAI,SAAS;YACxC,UAAU,EAAE,SAAS,CAAC,WAAW,IAAI,SAAS;YAC9C,UAAU,EAAE,SAAS,CAAC,WAAW,IAAI,SAAS;YAC9C,MAAM,EAAE,IAAI;YACZ,YAAY,EAAE,SAAS,CAAC,aAAa,IAAI,SAAS;YAClD,UAAU,EAAE,SAAS,CAAC,WAAW,IAAI,SAAS;YAC9C,cAAc,EAAE,SAAS,CAAC,eAAe,IAAI,SAAS;YACtD,SAAS;SACV,CAAC;QAEF,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;IACpC,CAAC;CACF;AArDD,0DAqDC","sourcesContent":["// src/delegates/MerchantCreationService.ts\nimport crypto from 'crypto';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { MerchantRow } from '../contracts/domain';\nimport type { MerchantDto } from './AdminDtoProjector';\n\nexport class MerchantCreationService {\n  async create(\n    store: ISqliteStore,\n    body: any\n  ): Promise<{ status: 'created'; dto: MerchantDto } | { status: 'conflict' }> {\n    const id = crypto.randomUUID();\n    const createdAt = Math.floor(Date.now() / 1000);\n    const apiKey = crypto.randomBytes(32).toString('hex');\n    const hmacSecret = crypto.randomBytes(32).toString('hex');\n\n    const insertRow: MerchantRow | any = {\n      id,\n      principal: String(body.principal),\n      name: body.name ?? undefined,\n      display_name: body.display_name ?? undefined,\n      logo_url: body.logo_url ?? undefined,\n      brand_color: body.brand_color ?? undefined,\n      webhook_url: body.webhook_url ?? undefined,\n      hmac_secret: hmacSecret,\n      stx_private_key: apiKey,\n      active: 1,\n      support_email: body.support_email ?? undefined,\n      support_url: body.support_url ?? undefined,\n      allowed_origins: body.allowed_origins ?? undefined,\n      created_at: createdAt,\n    };\n\n    try {\n      store.insertMerchant(insertRow as MerchantRow);\n    } catch (e: any) {\n      if (e && (e.code === 'SQLITE_CONSTRAINT' || e.errno === 19)) {\n        return { status: 'conflict' };\n      }\n      throw e;\n    }\n\n    const dto: MerchantDto = {\n      id,\n      principal: insertRow.principal,\n      name: insertRow.name ?? undefined,\n      displayName: insertRow.display_name ?? undefined,\n      logoUrl: insertRow.logo_url ?? undefined,\n      brandColor: insertRow.brand_color ?? undefined,\n      webhookUrl: insertRow.webhook_url ?? undefined,\n      active: true,\n      supportEmail: insertRow.support_email ?? undefined,\n      supportUrl: insertRow.support_url ?? undefined,\n      allowedOrigins: insertRow.allowed_origins ?? undefined,\n      createdAt,\n    };\n\n    return { status: 'created', dto };\n  }\n}\n"]}