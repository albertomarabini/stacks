{"version":3,"file":"WebhookSignatureService.js","sourceRoot":"","sources":["../../src/delegates/WebhookSignatureService.ts"],"names":[],"mappings":"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","sourcesContent":["// src/delegates/WebhookSignatureService.ts\nimport crypto from 'crypto';\n\ntype VerifyOk = { ok: true };\ntype VerifyFail = { ok: false; status: 401 | 409 };\n\nexport class WebhookSignatureService {\n  private readonly maxSkewSeconds: number;\n  private readonly replayTtlSeconds: number;\n  private readonly replayCache = new Map<string, number>();\n\n  constructor(maxSkewSeconds: number = 300, replayTtlSeconds: number = 600) {\n    this.maxSkewSeconds = maxSkewSeconds;\n    this.replayTtlSeconds = replayTtlSeconds;\n  }\n\n  buildOutboundHeaders(\n    secret: string,\n    rawBody: string,\n    nowEpochSecs: number,\n  ): { headers: Record<string, string>; signatureHex: string; timestamp: number } {\n    const signatureHex = crypto\n      .createHmac('sha256', secret)\n      .update(`${nowEpochSecs}.${rawBody}`)\n      .digest('hex');\n    return {\n      signatureHex,\n      timestamp: nowEpochSecs,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Webhook-Timestamp': String(nowEpochSecs),\n        'X-Webhook-Signature': `v1=${signatureHex}`,\n      },\n    };\n  }\n\n  verifyInbound(\n    tsHeader: string | undefined,\n    sigHeader: string | undefined,\n    rawBody: string,\n    secret: string,\n    nowEpochSecs: number,\n  ): VerifyOk | VerifyFail {\n    if (!tsHeader || !sigHeader) return { ok: false, status: 401 };\n\n    const ts = Number(tsHeader);\n    if (!Number.isFinite(ts) || Math.abs(nowEpochSecs - ts) > this.maxSkewSeconds) {\n      return { ok: false, status: 401 };\n    }\n\n    const seenAt = this.replayCache.get(sigHeader);\n    if (seenAt && nowEpochSecs - seenAt <= this.replayTtlSeconds) {\n      return { ok: false, status: 409 };\n    }\n\n    const presented = sigHeader.startsWith('v1=') ? sigHeader.slice(3) : sigHeader;\n    const expected = crypto.createHmac('sha256', secret).update(`${ts}.${rawBody}`).digest('hex');\n\n    const a = Buffer.from(expected, 'hex');\n    const b = Buffer.from(presented, 'hex');\n    if (a.length !== b.length || !crypto.timingSafeEqual(a, b)) {\n      return { ok: false, status: 401 };\n    }\n\n    this.replayCache.set(sigHeader, nowEpochSecs);\n    for (const [sig, firstSeen] of this.replayCache.entries()) {\n      if (nowEpochSecs - firstSeen > this.replayTtlSeconds) {\n        this.replayCache.delete(sig);\n      }\n    }\n    return { ok: true };\n  }\n}\n\nexport default WebhookSignatureService;\n"]}