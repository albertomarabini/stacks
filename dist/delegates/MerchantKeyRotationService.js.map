{"version":3,"file":"MerchantKeyRotationService.js","sourceRoot":"","sources":["../../src/delegates/MerchantKeyRotationService.ts"],"names":[],"mappings":";;;AAAA,8CAA8C;AAC9C,mCAAqC;AAGrC,MAAa,0BAA0B;IAAvC;QACU,kBAAa,GAAG,IAAI,GAAG,EAAU,CAAC;IAyB5C,CAAC;IAvBC,MAAM,CACJ,KAAmB,EACnB,OAAe;QAKf,MAAM,MAAM,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QAClF,IAAI,CAAC,MAAM;YAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAElD,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YACpC,4CAA4C;YAC5C,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;QAC/C,CAAC;QAED,MAAM,MAAM,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,UAAU,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEnD,KAAK,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEhC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;IAC1C,CAAC;CACF;AA1BD,gEA0BC","sourcesContent":["// src/delegates/MerchantKeyRotationService.ts\nimport { randomBytes } from 'crypto';\nimport type { ISqliteStore } from '../contracts/dao';\n\nexport class MerchantKeyRotationService {\n  private deliveredOnce = new Set<string>();\n\n  rotate(\n    store: ISqliteStore,\n    storeId: string\n  ):\n    | { ok: true; apiKey: string; hmacSecret: string }\n    | { ok: false; notFound: true }\n    | { ok: false; alreadyDelivered: true } {\n    const exists = store.listMerchantsProjection().some((m: any) => m.id === storeId);\n    if (!exists) return { ok: false, notFound: true };\n\n    if (this.deliveredOnce.has(storeId)) {\n      // Do not rotate again and do not leak again\n      return { ok: false, alreadyDelivered: true };\n    }\n\n    const apiKey = randomBytes(32).toString('hex');\n    const hmacSecret = randomBytes(32).toString('hex');\n\n    store.updateMerchantKeysTx(storeId, apiKey, hmacSecret);\n    this.deliveredOnce.add(storeId);\n\n    return { ok: true, apiKey, hmacSecret };\n  }\n}\n"]}