{"version":3,"file":"InvoiceStatusResolver.js","sourceRoot":"","sources":["../../src/delegates/InvoiceStatusResolver.ts"],"names":[],"mappings":"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","sourcesContent":["// src/delegates/InvoiceStatusResolver.ts\nimport type { IStacksChainClient } from '../contracts/interfaces';\nimport type { InvoiceIdGuard } from '../delegates/InvoiceIdGuard';\n\ntype OnchainInvoiceStatus = 'not-found' | 'paid' | 'canceled' | 'expired' | 'unpaid';\ntype PublicStatus        = 'paid' | 'canceled' | 'expired' | 'unpaid' | 'pending';\n\ntype InvoiceRowMinimal = {\n  id_hex: string;\n  status: PublicStatus;\n  quote_expires_at: number; // ms epoch\n};\n\ntype InvoiceIdGuardLike = Pick<InvoiceIdGuard, 'validateHexIdOrThrow'>;\n\ntype ChainInvoice = {\n  status?: string;\n  paidAtHeight?: number;\n  lastChangeHeight?: number;\n  lastTxId?: string;\n};\n\nfunction isChainInvoice(x: unknown): x is ChainInvoice {\n  return typeof x === 'object' && x !== null;\n}\n\nexport class InvoiceStatusResolver {\n  constructor(\n    private readonly chain: IStacksChainClient, // duck-type at runtime\n    private readonly idGuard: InvoiceIdGuardLike,\n  ) {}\n\n  private withTimeout<T>(p: Promise<T>, ms = 6000): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const t = setTimeout(() => reject(new Error('read_timeout')), ms);\n      p.then(v => { clearTimeout(t); resolve(v); },\n             e => { clearTimeout(t); reject(e); });\n    });\n  }\n\n  private async readFromChain(idHex: string): Promise<OnchainInvoiceStatus> {\n    const anyChain = this.chain as unknown as {\n      readInvoiceStatus?: (id: string) => Promise<string>;\n      readInvoice?: (id: string) => Promise<unknown>;\n    };\n\n    try {\n      if (typeof anyChain.readInvoiceStatus === 'function') {\n        const s = (await this.withTimeout(anyChain.readInvoiceStatus(idHex), 6000)).toLowerCase();\n        if (s === 'paid' || s === 'canceled' || s === 'expired' || s === 'unpaid') return s as OnchainInvoiceStatus;\n        return 'not-found';\n      }\n      if (typeof anyChain.readInvoice === 'function') {\n        const inv = await this.withTimeout(anyChain.readInvoice(idHex), 6000);\n        if (isChainInvoice(inv)) {\n          const s = String(inv.status ?? 'not-found').toLowerCase();\n          if (s === 'paid' || s === 'canceled' || s === 'expired' || s === 'unpaid') return s as OnchainInvoiceStatus;\n        }\n        return 'not-found';\n      }\n      return 'not-found';\n    } catch {\n      return 'not-found';\n    }\n  }\n\n  async readOnchainStatus(idHex: string): Promise<OnchainInvoiceStatus> {\n    this.idGuard.validateHexIdOrThrow(idHex);\n    return this.readFromChain(idHex);\n  }\n\n  computeDisplayStatus(\n    row: InvoiceRowMinimal,\n    onchain: OnchainInvoiceStatus,\n    nowMs: number,\n  ): PublicStatus {\n    if (onchain === 'paid') return 'paid';\n    if (onchain === 'canceled') return 'canceled';\n    if (nowMs > row.quote_expires_at || onchain === 'expired') return 'expired';\n    // If chain doesn’t know it yet, honor the DB (tests expect “unpaid” not “pending”)\n    return row.status === 'pending' ? 'unpaid' : row.status;\n  }\n}\n"]}