{"version":3,"file":"InvoiceIdCodec.js","sourceRoot":"","sources":["../../src/utils/InvoiceIdCodec.ts"],"names":[],"mappings":";;;;;;AAAA,8BAA8B;AAC9B,oDAA4B;AAG5B,MAAa,cAAc;IACzB,WAAW,CAAC,KAAa;QACvB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACtC,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,SAAS,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,GAAe;QAC3B,IAAI,CAAC,CAAC,GAAG,YAAY,UAAU,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,uBAAuB;QACrB,OAAO,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,oBAAoB;QAClB,OAAO,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;CACF;AArDD,wCAqDC","sourcesContent":["// src/utils/InvoiceIdCodec.ts\nimport crypto from 'crypto';\nimport type { IInvoiceIdCodec } from '../contracts/interfaces';\n\nexport class InvoiceIdCodec implements IInvoiceIdCodec {\n  assertHex64(idHex: string): void {\n    if (typeof idHex !== 'string' || idHex.length !== 64) {\n      throw new Error('idHex must be a 64-character hex string');\n    }\n    if (!/^[0-9A-Fa-f]{64}$/.test(idHex)) {\n      throw new Error('idHex must contain only hexadecimal characters');\n    }\n    const buf = Buffer.from(idHex, 'hex');\n    if (buf.length !== 32) {\n      throw new Error('idHex must decode to exactly 32 bytes');\n    }\n    const roundTrip = Buffer.from(buf).toString('hex');\n    if (roundTrip.length !== 64) {\n      throw new Error('idHex round-trip failed to produce 64 chars');\n    }\n  }\n\n  isValidHex64(idHex: string): boolean {\n    try {\n      this.assertHex64(idHex);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  toBuff32Hex(idHex: string): Uint8Array {\n    this.assertHex64(idHex);\n    return Buffer.from(idHex, 'hex');\n  }\n\n  hexFromBuff32(buf: Uint8Array): string {\n    if (!(buf instanceof Uint8Array) || buf.length !== 32) {\n      throw new Error('buf32 must be a 32-byte buffer');\n    }\n    const hex = Buffer.from(buf).toString('hex');\n    if (hex.length !== 64) {\n      throw new Error('hex round-trip failed to produce 64 chars');\n    }\n    if (Buffer.from(hex, 'hex').length !== 32) {\n      throw new Error('hex did not round-trip to 32 bytes');\n    }\n    return hex;\n  }\n\n  generateRandomBuff32Hex(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  generateRandomBuff32(): Buffer {\n    return crypto.randomBytes(32);\n  }\n}\n"]}