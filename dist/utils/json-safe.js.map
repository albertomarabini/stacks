{"version":3,"file":"json-safe.js","sourceRoot":"","sources":["../../src/utils/json-safe.ts"],"names":[],"mappings":";;AACA,gCAkBG;AAnBH,4DAA4D;AAC5D,SAAgB,UAAU,CAAI,CAAI;IAC9B,MAAM,IAAI,GAAG,IAAI,OAAO,EAAe,CAAC;IACxC,MAAM,IAAI,GAAG,CAAC,CAAM,EAAO,EAAE;QAC3B,IAAI,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YACxC,OAAO,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;QACD,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YACrB,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAAC,OAAO,GAAG,CAAC;QACxD,CAAC;QACD,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QACzF,IAAI,CAAC,YAAY,GAAG;YAAE,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtF,IAAI,CAAC,YAAY,GAAG;YAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAQ,EAAE,CAAC;QAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACtC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACzD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IACF,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC","sourcesContent":["// utils/json-safe.ts (you already have something like this)\nexport function toJsonSafe<T>(v: T): T {\n    const seen = new WeakMap<object, any>();\n    const walk = (x: any): any => {\n      if (x === null || typeof x !== 'object') {\n        return typeof x === 'bigint' ? x.toString() : x;\n      }\n      if (seen.has(x)) return seen.get(x);\n      if (Array.isArray(x)) {\n        const arr = x.map(walk); seen.set(x, arr); return arr;\n      }\n      if (typeof Buffer !== 'undefined' && Buffer.isBuffer(x)) return `0x${x.toString('hex')}`;\n      if (x instanceof Map) return Object.fromEntries([...x].map(([k, v]) => [k, walk(v)]));\n      if (x instanceof Set) return [...x].map(walk);\n      const out: any = {}; seen.set(x, out);\n      for (const [k, v] of Object.entries(x)) out[k] = walk(v);\n      return out;\n    };\n    return walk(v);\n  }\n"]}