{"version":3,"file":"fold-logger.js","sourceRoot":"","sources":["../../src/utils/fold-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/* Minimal, zero-deps folding logger that keeps the last TWO keys.\n * Prints \"… called x N times\" when a streak ends.\n * Usage:\n *   const flog = new FoldLog('[CHAIN]', process.env.GLOBAL_DEBUGGING === '1');\n *   flog.line('RO|get-invoice|0x1234', '[RO] get-invoice(0x1234) → ok 177B');\n *   flog.flushAll() // on shutdown\n */\nexport class FoldLog {\n    private enabled: boolean;\n    private scope: string;\n\n    private last0: { key: string; line: string; count: number } | null = null;\n    private last1: { key: string; line: string; count: number } | null = null;\n\n    constructor(scope = '', enabled = true) {\n      this.enabled = !!enabled;\n      this.scope = scope ? String(scope).trim() : '';\n      if (this.enabled) {\n        process.once('exit', () => this.flushAll());\n        process.once('SIGINT', () => { this.flushAll(); process.exit(130); });\n      }\n    }\n\n    private print(line: string) {\n      if (!this.enabled) return;\n      if (this.scope) {\n        // Match your style: [CHAIN] ...\n        console.log(`${this.scope} ${line}`);\n      } else {\n        console.log(line);\n      }\n    }\n\n    private flushEntry(e: { key: string; line: string; count: number } | null) {\n      if (!this.enabled || !e) return;\n      if (e.count > 1) {\n        // Print the compressed summary line once the streak ends\n        this.print(`${e.line} … called x ${e.count} times`);\n      }\n    }\n\n    /** Emit a (key,line). First time prints the line.\n     *  Repeats with same key are buffered and later summarized.\n     *  Keeps last two distinct keys; flushes the older one when a new third key appears.\n     */\n    line(key: string, line: string) {\n      if (!this.enabled) return;\n\n      if (this.last0 && this.last0.key === key) {\n        this.last0.count++;\n        return; // keep folding\n      }\n      if (this.last1 && this.last1.key === key) {\n        this.last1.count++;\n        return; // keep folding\n      }\n\n      // New distinct key\n      // Flush the older of the TWO slots\n      if (this.last1) this.flushEntry(this.last1);\n\n      // Slide: last0 → last1\n      this.last1 = this.last0;\n      // Insert new as last0 and print its first occurrence immediately\n      this.last0 = { key, line, count: 1 };\n      this.print(line);\n    }\n\n    /** Force-flush both buffers (used at shutdown/tests). */\n    flushAll() {\n      if (!this.enabled) return;\n      // Flush last1 then last0 in that order (older first)\n      this.flushEntry(this.last1);\n      this.last1 = null;\n      this.flushEntry(this.last0);\n      this.last0 = null;\n    }\n  }\n\n  export default FoldLog;\n"]}