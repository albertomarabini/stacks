{"version":3,"file":"AdminStaticServer.js","sourceRoot":"","sources":["../../src/servers/AdminStaticServer.ts"],"names":[],"mappings":";;;;;;AAAA,sDAAqE;AACrE,gDAAwB;AACxB,4CAAoB;AAEpB,MAAa,iBAAiB;IAI5B,kBAAkB,CAAC,WAAmB;QACpC,uCAAuC;QACvC,4FAA4F;QAC5F,IAAI;QACJ,gFAAgF;QAChF,2HAA2H;QAC3H,IAAI;QAEJ,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,wEAAwE;QACxE,IAAI,CAAC,gBAAgB,GAAG,iBAAO,CAAC,MAAM,CAAC,WAAW,EAAE;YAClD,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,IAAI;YAClB,mFAAmF;YACnF,MAAM,EAAE,IAAI;YACZ,UAAU,EAAE,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE;gBAC5B,yEAAyE;gBACzE,IAAI,6DAA6D,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACjF,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,qCAAqC,CAAC,CAAC;gBACxE,CAAC;qBAAM,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACtC,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;gBAC7C,CAAC;gBACD,GAAG,CAAC,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;YACrD,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3B,MAAM,IAAI,SAAS,CAAC,iEAAiE,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,UAAU,CAAC,IAAa,EAAE,GAAa;QACrC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,MAAM,IAAI,SAAS,CAAC,gEAAgE,CAAC,CAAC;QACxF,CAAC;QACD,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QACD,2CAA2C;QAC3C,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3C,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1B,CAAC;CACF;AArDD,8CAqDC","sourcesContent":["import express, { Request, Response, RequestHandler } from 'express';\nimport path from 'path';\nimport fs from 'fs';\n\nexport class AdminStaticServer {\n  private staticDirAbs?: string;\n  private staticMiddleware?: RequestHandler;\n\n  configureStaticDir(rootAbsPath: string): void {\n    // if (!path.isAbsolute(rootAbsPath)) {\n    //   throw new TypeError('AdminStaticServer.configureStaticDir requires an absolute path.');\n    // }\n    // if (!fs.existsSync(rootAbsPath) || !fs.statSync(rootAbsPath).isDirectory()) {\n    //   throw new TypeError(`AdminStaticServer.configureStaticDir path does not exist or is not a directory: ${rootAbsPath}`);\n    // }\n\n    this.staticDirAbs = rootAbsPath;\n\n    // Serve assets with sensible caching; never auto-serve index.html here.\n    this.staticMiddleware = express.static(rootAbsPath, {\n      index: false,\n      etag: true,\n      lastModified: true,\n      // short default for non-fingerprinted files; index will be handled in serveIndex()\n      maxAge: '1h',\n      setHeaders: (res, filePath) => {\n        // Strong cache for typical finger-printed assets, else no-cache for HTML\n        if (/\\.(?:js|css|map|svg|png|jpg|jpeg|webp|gif|ico|woff2?|ttf)$/i.test(filePath)) {\n          res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');\n        } else if (/\\.html?$/i.test(filePath)) {\n          res.setHeader('Cache-Control', 'no-cache');\n        }\n        res.setHeader('X-Content-Type-Options', 'nosniff');\n      },\n    });\n  }\n\n  serveStatic(): RequestHandler {\n    if (!this.staticMiddleware) {\n      throw new TypeError('AdminStaticServer.serveStatic called before configureStaticDir.');\n    }\n    return this.staticMiddleware;\n  }\n\n  serveIndex(_req: Request, res: Response): void {\n    if (!this.staticDirAbs) {\n      throw new TypeError('AdminStaticServer.serveIndex called before configureStaticDir.');\n    }\n    const indexFile = path.join(this.staticDirAbs, 'index.html');\n    if (!fs.existsSync(indexFile)) {\n      res.status(404).type('text/plain').send('Admin index not found');\n      return;\n    }\n    // Always discourage caching the shell HTML\n    res.setHeader('Cache-Control', 'no-cache');\n    res.sendFile(indexFile);\n  }\n}\n"]}