{"version":3,"file":"SqliteStore.js","sourceRoot":"","sources":["../../src/db/SqliteStore.ts"],"names":[],"mappings":"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","sourcesContent":["// src/db/SqliteStore.ts\nimport Database from 'better-sqlite3';\nimport fs from 'fs';\nimport path from 'path';\n\nimport type { ISqliteStore } from '../contracts/dao';\nimport type {\n  MerchantRow,\n  InvoiceRow,\n  SubscriptionRow,\n  WebhookLogRow,\n  InvoiceStatus,\n  WebhookEventType,\n  SubscriptionMode,\n} from '../contracts/domain';\nimport { WebhookRetryQueryComposer } from '../delegates/WebhookRetryQueryComposer';\nimport { MerchantProjectionPolicy } from '../delegates/MerchantProjectionPolicy';\nimport { SqlInListBuilder } from '../delegates/SqlInListBuilder';\nimport type { IInvoiceIdCodec } from '../contracts/interfaces';\n\nconst nowSec = () => Math.floor(Date.now() / 1000);\n\nexport class SqliteStore implements ISqliteStore {\n  private readonly db: Database.Database;\n  private readonly webhookRetryComposer = new WebhookRetryQueryComposer({\n    maxAttempts: 5,\n    backoffSeconds: [0, 60, 120, 240, 480, 960],\n  });\n  private readonly merchantProjection = new MerchantProjectionPolicy();\n  private readonly inListBuilder = new SqlInListBuilder();\n  // Optional codec, kept for integrators; local guards are used otherwise.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private readonly codec?: IInvoiceIdCodec;\n\n  constructor(db: Database.Database, codec?: IInvoiceIdCodec) {\n    this.db = db;\n    this.codec = codec;\n  }\n\n  migrate(): void {\n    const migrationsPath = path.join(process.cwd(), 'db', 'migrations.sql');\n    const sql = fs.readFileSync(migrationsPath, 'utf8');\n    this.db.exec(sql);\n  }\n\n  // Merchants\n\n  findActiveByApiKey(apiKey: string): MerchantRow | undefined {\n    const stmt = this.db.prepare(\n      `SELECT * FROM merchants WHERE api_key = ? AND active = 1 LIMIT 1`,\n    );\n    const row = stmt.get(apiKey) as MerchantRow | undefined;\n    return row;\n  }\n\n  insertMerchant(row: MerchantRow): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO merchants (\n        id, principal, name, display_name, logo_url, brand_color,\n        webhook_url, hmac_secret, api_key, active, support_email,\n        support_url, allowed_origins, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    stmt.run(\n      row.id,\n      row.principal,\n      row.name ?? null,\n      row.display_name ?? null,\n      row.logo_url ?? null,\n      row.brand_color ?? null,\n      row.webhook_url ?? null,\n      row.hmac_secret,\n      row.api_key,\n      row.active,\n      row.support_email ?? null,\n      row.support_url ?? null,\n      row.allowed_origins ?? null,\n      row.created_at,\n    );\n  }\n\n  updateMerchantActive(storeId: string, active: boolean): number {\n    const stmt = this.db.prepare(`UPDATE merchants SET active = ? WHERE id = ?`);\n    const info = stmt.run(active ? 1 : 0, storeId);\n    return info.changes;\n  }\n\n  updateMerchantKeysTx(storeId: string, apiKey: string, hmacSecret: string): void {\n    const tx = this.db.transaction((id: string, k: string, secret: string) => {\n      this.db\n        .prepare(`UPDATE merchants SET api_key = ?, hmac_secret = ? WHERE id = ?`)\n        .run(k, secret, id);\n    });\n    tx(storeId, apiKey, hmacSecret);\n  }\n\n  listMerchantsProjection(): Omit<MerchantRow, 'api_key' | 'hmac_secret'>[] {\n    const sql = this.merchantProjection.getListProjectionSQL();\n    const dbRows = this.db.prepare(sql).all() as any[];\n    return dbRows.map((r) => this.merchantProjection.mapListRow(r));\n  }\n  getMerchantById(storeId: string): MerchantRow | undefined {\n    return this.db.prepare(`SELECT * FROM merchants WHERE id = ?`).get(storeId) as MerchantRow | undefined;\n  }\n\n  public updateMerchantProfile(\n    storeId: string,\n    patch: Partial<Pick<\n      MerchantRow,\n      | 'name'\n      | 'display_name'\n      | 'logo_url'\n      | 'brand_color'\n      | 'webhook_url'\n      | 'support_email'\n      | 'support_url'\n      | 'allowed_origins'\n    >>\n  ): void {\n    const allowed = [\n      'name',\n      'display_name',\n      'logo_url',\n      'brand_color',\n      'webhook_url',\n      'support_email',\n      'support_url',\n      'allowed_origins',\n    ] as const;\n\n    const keys = allowed.filter(k => (patch as any)[k] !== undefined);\n    if (keys.length === 0) return; // nothing to update\n\n    const setSql = keys.map(k => `${k} = ?`).join(', ');\n    const values = keys.map(k => (patch as any)[k]);\n\n    this.db.prepare(\n      `UPDATE merchants SET ${setSql} WHERE id = ?`\n    ).run(...values, storeId);\n  }\n\n  // 1) Rotate + bump version, clear revealed flag (atomic)\n  rotateKeysPersist(storeId: string, apiKey: string, hmacSecret: string, now = nowSec()): number {\n    const update = this.db.prepare(`\n      UPDATE merchants\n         SET api_key = ?,\n             hmac_secret = ?,\n             keys_rotation_version = keys_rotation_version + 1,\n             keys_last_rotated_at = ?,\n             keys_last_revealed_at = NULL,\n             keys_dual_valid_until = NULL\n       WHERE id = ?\n    `);\n    const fetchV = this.db.prepare(`SELECT keys_rotation_version AS v FROM merchants WHERE id = ?`);\n\n    const tx = this.db.transaction((id: string) => {\n      update.run(apiKey, hmacSecret, now, id);\n      return fetchV.get(id) as { v: number } | undefined;\n    });\n\n    const row = tx(storeId);\n    return row?.v ?? 0;\n  }\n\n  // 2) Exactly-once reveal for that version\n  markKeysRevealedOnce(storeId: string, expectVersion: number, now = nowSec()): boolean {\n    const stmt = this.db.prepare(`\n      UPDATE merchants\n         SET keys_last_revealed_at = ?\n       WHERE id = ?\n         AND keys_rotation_version = ?\n         AND keys_last_revealed_at IS NULL\n    `);\n    const info = stmt.run(now, storeId, expectVersion);\n    return info.changes === 1;\n  }\n\n  // Invoices\n\n  public readonly invoices = {\n    insert: (row: InvoiceRow): void => {\n      SqliteStore.assertHex64(row.id_hex);\n      if (!Number.isInteger(row.amount_sats) || row.amount_sats <= 0) {\n        throw new TypeError('amount_sats must be positive int');\n      }\n      if (row.status !== 'unpaid') {\n        throw new TypeError(\"status must be 'unpaid' on insert\");\n      }\n      if (typeof row.merchant_principal !== 'string' || row.merchant_principal.length === 0) {\n        throw new TypeError('merchant_principal required');\n      }\n      if (!Number.isInteger(row.quote_expires_at)) {\n        throw new TypeError('quote_expires_at must be integer ms epoch');\n      }\n      if (!Number.isInteger(row.created_at)) {\n        throw new TypeError('created_at must be integer epoch seconds');\n      }\n\n      const stmt = this.db.prepare(`\n        INSERT INTO invoices (\n          id_raw, id_hex, store_id, amount_sats, usd_at_create, quote_expires_at,\n          merchant_principal, status, memo, webhook_url, created_at, subscription_id,\n          refunded_at, refund_amount, refund_txid, refund_count, payer, txid, expired\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, 0, NULL, 0, NULL, NULL, 0)\n      `);\n      stmt.run(\n        row.id_raw,\n        row.id_hex,\n        row.store_id,\n        row.amount_sats,\n        row.usd_at_create,\n        row.quote_expires_at,\n        row.merchant_principal,\n        'unpaid',\n        row.memo ?? null,\n        row.webhook_url ?? null,\n        row.created_at,\n        row.subscription_id ?? null,\n      );\n    },\n\n    markCanceled: (storeId: string, idRaw: string): number => {\n      const stmt = this.db.prepare(`\n        UPDATE invoices\n        SET status = 'canceled'\n        WHERE store_id = ? AND id_raw = ? AND status = 'unpaid' AND IFNULL(expired, 0) = 0\n      `);\n      const info = stmt.run(storeId, idRaw);\n      return info.changes ?? 0;\n    },\n\n    findByStoreAndIdRaw: (storeId: string, idRaw: string): InvoiceRow | undefined => {\n      const stmt = this.db.prepare(\n        `SELECT * FROM invoices WHERE store_id = ? AND id_raw = ? LIMIT 1`,\n      );\n      const row = stmt.get(storeId, idRaw) as InvoiceRow | undefined;\n      return row;\n    },\n  };\n\n  getInvoiceById(idRaw: string): InvoiceRow | undefined {\n    const stmt = this.db.prepare(`SELECT * FROM invoices WHERE id_raw = ? LIMIT 1`);\n    const row = stmt.get(idRaw) as InvoiceRow | undefined;\n    return row;\n  }\n\n  getInvoiceWithStore(idRaw: string): (InvoiceRow & { store: MerchantRow }) | undefined {\n    const inv = this.getInvoiceById(idRaw);\n    if (!inv) return undefined;\n    const m = this.db\n      .prepare(`SELECT * FROM merchants WHERE id = ? LIMIT 1`)\n      .get(inv.store_id) as MerchantRow | undefined;\n    if (!m) return undefined;\n    return Object.assign({}, inv, { store: m });\n  }\n\n  listInvoicesByStore(\n    storeId: string,\n    opts?: { status?: InvoiceStatus; orderByCreatedDesc?: boolean },\n  ): InvoiceRow[] {\n    if (opts?.status) {\n      const stmt = this.db.prepare(\n        `SELECT * FROM invoices WHERE store_id = ? AND status = ? ORDER BY created_at ${opts.orderByCreatedDesc ? 'DESC' : 'ASC'\n        }`,\n      );\n      return stmt.all(storeId, opts.status) as InvoiceRow[];\n    }\n    const stmt = this.db.prepare(\n      `SELECT * FROM invoices WHERE store_id = ? ORDER BY created_at ${opts?.orderByCreatedDesc ? 'DESC' : 'ASC'\n      }`,\n    );\n    return stmt.all(storeId) as InvoiceRow[];\n  }\n\n  markInvoicePaid(idHex: string, payer: string, txId: string, _tx?: unknown): void {\n    SqliteStore.assertHex64(idHex);\n    this.db\n      .prepare(\n        `UPDATE invoices SET status = 'paid', payer = ?, txid = ? WHERE id_hex = ?`,\n      )\n      .run(payer, txId, idHex);\n  }\n\n  upsertInvoiceRefund(idHex: string, amountSats: number, refundTxId: string, _tx?: unknown): void {\n    SqliteStore.assertHex64(idHex);\n    if (!Number.isInteger(amountSats) || amountSats <= 0) {\n      throw new TypeError('amountSats must be positive int');\n    }\n    const tx = this.db.transaction((hex: string, inc: number, rtx: string) => {\n      const current = this.db\n        .prepare(\n          `SELECT amount_sats, refund_amount FROM invoices WHERE id_hex = ? LIMIT 1`,\n        )\n        .get(hex) as { amount_sats: number; refund_amount: number } | undefined;\n      if (!current) return;\n      const newTotal = (current.refund_amount ?? 0) + inc;\n      const now = Math.floor(Date.now() / 1000);\n      const newStatus: InvoiceStatus =\n        newTotal >= current.amount_sats ? 'refunded' : 'partially_refunded';\n      this.db\n        .prepare(\n          `UPDATE invoices\n             SET refund_amount = ?, refund_txid = ?, refunded_at = ?, refund_count = refund_count + 1, status = ?\n           WHERE id_hex = ?`,\n        )\n        .run(newTotal, rtx, now, newStatus, hex);\n    });\n    tx(idHex, amountSats, refundTxId);\n  }\n\n  markInvoiceCanceled(idHexOrIdRaw: string, _tx?: unknown): void {\n    const info = this.db\n      .prepare(`UPDATE invoices SET status = 'canceled' WHERE id_hex = ?`)\n      .run(idHexOrIdRaw);\n    if (info.changes === 0) {\n      this.db\n        .prepare(`UPDATE invoices SET status = 'canceled' WHERE id_raw = ?`)\n        .run(idHexOrIdRaw);\n    }\n  }\n\n  updateInvoiceStatus(idRaw: string, status: InvoiceStatus, expired?: 0 | 1): void {\n    if (expired === undefined) {\n      this.db\n        .prepare(`UPDATE invoices SET status = ? WHERE id_raw = ?`)\n        .run(status, idRaw);\n      return;\n    }\n    this.db\n      .prepare(`UPDATE invoices SET status = ?, expired = ? WHERE id_raw = ?`)\n      .run(status, expired, idRaw);\n  }\n\n  ensureInvoiceIdHexUnique(idHex: string): boolean {\n    SqliteStore.assertHex64(idHex);\n    const row = this.db\n      .prepare(`SELECT 1 AS one FROM invoices WHERE id_hex = ? LIMIT 1`)\n      .get(idHex) as { one: number } | undefined;\n    return !row;\n  }\n\n  invoiceExists(idHex: string): boolean {\n    SqliteStore.assertHex64(idHex);\n    const row = this.db\n      .prepare(`SELECT 1 AS one FROM invoices WHERE id_hex = ? LIMIT 1`)\n      .get(idHex) as { one: number } | undefined;\n    return !!row;\n  }\n\n  bulkMarkExpired(idRawList: string[]): number {\n    if (!idRawList.length) return 0;\n    const { clause, params } = this.inListBuilder.buildInClause('id_raw', idRawList);\n    const stmt = this.db.prepare(\n      `UPDATE invoices SET status = 'expired', expired = 1 WHERE ${clause}`,\n    );\n    const info = stmt.run(...params);\n    return info.changes;\n  }\n\n  // Subscriptions\n\n  insertSubscription(row: SubscriptionRow): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO subscriptions (\n        id, id_hex, store_id, merchant_principal, subscriber,\n        amount_sats, interval_blocks, active, created_at,\n        last_billed_at, next_invoice_at, last_paid_invoice_id, mode\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    stmt.run(\n      row.id,\n      row.id_hex,\n      row.store_id,\n      row.merchant_principal,\n      row.subscriber,\n      row.amount_sats,\n      row.interval_blocks,\n      row.active,\n      row.created_at,\n      row.last_billed_at ?? null,\n      row.next_invoice_at,\n      row.last_paid_invoice_id ?? null,\n      row.mode,\n    );\n  }\n\n  getSubscriptionByIdForStore(id: string, storeId: string): SubscriptionRow | undefined {\n    const stmt = this.db.prepare(\n      `SELECT * FROM subscriptions WHERE id = ? AND store_id = ? LIMIT 1`,\n    );\n    const row = stmt.get(id, storeId) as SubscriptionRow | undefined;\n    return row;\n  }\n\n  getActiveSubscription(id: string, storeId: string): SubscriptionRow | undefined {\n    const stmt = this.db.prepare(\n      `SELECT * FROM subscriptions WHERE id = ? AND store_id = ? AND active = 1 LIMIT 1`,\n    );\n    const row = stmt.get(id, storeId) as SubscriptionRow | undefined;\n    return row;\n  }\n\n  updateSubscriptionMode(id: string, storeId: string, mode: SubscriptionMode): void {\n    this.db\n      .prepare(`UPDATE subscriptions SET mode = ? WHERE id = ? AND store_id = ?`)\n      .run(mode, id, storeId);\n  }\n\n  deactivateSubscription(id: string, storeId: string, _tx?: unknown): void {\n    this.db\n      .prepare(`UPDATE subscriptions SET active = 0 WHERE id = ? AND store_id = ?`)\n      .run(id, storeId);\n  }\n\n  setSubscriptionActive(input: { idHex: string; active: 0 | 1 }): void {\n    SqliteStore.assertHex64(input.idHex);\n    this.db\n      .prepare(`UPDATE subscriptions SET active = ? WHERE id_hex = ?`)\n      .run(input.active, input.idHex);\n  }\n\n  upsertSubscriptionByHex(input: {\n    idHex: string;\n    storeId: string;\n    merchantPrincipal: string;\n    subscriber: string;\n    amountSats: number;\n    intervalBlocks: number;\n    active: 1;\n  }): void {\n    SqliteStore.assertHex64(input.idHex);\n    const existing = this.db\n      .prepare(\n        `SELECT id, mode FROM subscriptions WHERE id_hex = ? AND store_id = ? LIMIT 1`,\n      )\n      .get(input.idHex, input.storeId) as { id: string; mode: SubscriptionMode } | undefined;\n\n    if (existing) {\n      this.db\n        .prepare(\n          `UPDATE subscriptions\n             SET merchant_principal = ?,\n                 subscriber = ?,\n                 amount_sats = ?,\n                 interval_blocks = ?,\n                 active = ?\n           WHERE id_hex = ? AND store_id = ?`,\n        )\n        .run(\n          input.merchantPrincipal,\n          input.subscriber,\n          input.amountSats,\n          input.intervalBlocks,\n          1,\n          input.idHex,\n          input.storeId,\n        );\n      return;\n    }\n\n    const now = Math.floor(Date.now() / 1000);\n    this.db\n      .prepare(\n        `INSERT INTO subscriptions (\n           id, id_hex, store_id, merchant_principal, subscriber,\n           amount_sats, interval_blocks, active, created_at, last_billed_at,\n           next_invoice_at, last_paid_invoice_id, mode\n         ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, NULL, ?)`,\n      )\n      .run(\n        input.idHex,\n        input.idHex,\n        input.storeId,\n        input.merchantPrincipal,\n        input.subscriber,\n        input.amountSats,\n        input.intervalBlocks,\n        1,\n        now,\n        0,\n        'invoice',\n      );\n  }\n\n  advanceSubscriptionSchedule(id: string): void {\n    const now = Math.floor(Date.now() / 1000);\n    this.db\n      .prepare(\n        `UPDATE subscriptions\n           SET next_invoice_at = next_invoice_at + interval_blocks,\n               last_billed_at = ?\n         WHERE id = ?`,\n      )\n      .run(now, id);\n  }\n\n  updateSubscriptionLastPaid(input: { subscriptionId: string; lastPaidInvoiceId: string }): void {\n    this.db\n      .prepare(`UPDATE subscriptions SET last_paid_invoice_id = ? WHERE id_hex = ?`)\n      .run(input.lastPaidInvoiceId, input.subscriptionId);\n  }\n\n  subscriptionExists(idHex: string): boolean {\n    SqliteStore.assertHex64(idHex);\n    const row = this.db\n      .prepare(`SELECT 1 AS one FROM subscriptions WHERE id_hex = ? LIMIT 1`)\n      .get(idHex) as { one: number } | undefined;\n    return !!row;\n  }\n\n  selectDueSubscriptions(currentHeight: number): SubscriptionRow[] {\n    const stmt = this.db.prepare(\n      `SELECT * FROM subscriptions\n         WHERE active = 1\n           AND mode = 'invoice'\n           AND next_invoice_at <= ?\n       ORDER BY next_invoice_at ASC`,\n    );\n    return stmt.all(currentHeight) as SubscriptionRow[];\n  }\n\n  getStoreIdByPrincipal(merchantPrincipal: string): string | undefined {\n    const row = this.db\n      .prepare(`SELECT id FROM merchants WHERE principal = ? LIMIT 1`)\n      .get(merchantPrincipal) as { id: string } | undefined;\n    return row?.id;\n  }\n\n\n  selectInvoicesByStatuses(\n    statuses: InvoiceStatus[],\n    limit: number,\n    storeId?: string\n  ): Pick<InvoiceRow, 'id_hex' | 'status' | 'refund_amount' | 'merchant_principal'>[] {\n    if (typeof statuses === \"string\")\n      statuses =[statuses]\n    if (!Array.isArray(statuses) || statuses.length === 0) return [];\n\n    const cols = `id_hex, status, refund_amount, merchant_principal`;\n    const wheres: string[] = [];\n    const params: any[] = [];\n\n    if (storeId) {\n      wheres.push(`store_id = ?`);\n      params.push(storeId);\n    }\n    const placeholders = statuses.map(() => '?').join(',');\n    wheres.push(`status IN (${placeholders})`);\n    params.push(...statuses);\n\n    const whereSql = wheres.length ? `WHERE ${wheres.join(' AND ')}` : '';\n    const sql = `\n    SELECT ${cols}\n      FROM invoices\n      ${whereSql}\n     ORDER BY created_at DESC\n     LIMIT ?\n  `;\n    params.push(limit);\n\n    return this.db.prepare(sql).all(...params) as any[];\n  }\n\n  getInvoiceStatusByHex(idHex: string): InvoiceStatus | undefined {\n    SqliteStore.assertHex64(idHex);\n    const row = this.db\n      .prepare(`SELECT status FROM invoices WHERE id_hex = ? LIMIT 1`)\n      .get(idHex) as { status: InvoiceStatus } | undefined;\n    return row?.status;\n  }\n\n  // Webhooks\n\n  insertWebhookAttempt(row: WebhookLogRow): string {\n    const stmt = this.db.prepare(`\n      INSERT INTO webhook_logs (\n        id, store_id, invoice_id, subscription_id, event_type,\n        payload, status_code, success, attempts, last_attempt_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    stmt.run(\n      row.id,\n      row.store_id,\n      row.invoice_id ?? null,\n      row.subscription_id ?? null,\n      row.event_type,\n      row.payload,\n      row.status_code ?? null,\n      row.success,\n      row.attempts,\n      row.last_attempt_at,\n    );\n    return row.id;\n  }\n\n  updateWebhookAttemptStatus(id: string, patch: { success: 0 | 1; statusCode?: number }): void {\n    if (patch.statusCode === undefined) {\n      this.db\n        .prepare(`UPDATE webhook_logs SET success = ? WHERE id = ?`)\n        .run(patch.success, id);\n      return;\n    }\n    this.db\n      .prepare(`UPDATE webhook_logs SET success = ?, status_code = ? WHERE id = ?`)\n      .run(patch.success, patch.statusCode, id);\n  }\n\n  listWebhooksForStore(storeId: string): WebhookLogRow[] {\n    const stmt = this.db.prepare(\n      `SELECT * FROM webhook_logs WHERE store_id = ? ORDER BY last_attempt_at DESC`,\n    );\n    return stmt.all(storeId) as WebhookLogRow[];\n  }\n\n  listAdminWebhooks(storeId?: string, failedOnly?: boolean): WebhookLogRow[] {\n    const parts: string[] = [`SELECT * FROM webhook_logs`];\n    const wheres: string[] = [];\n    const params: any[] = [];\n    if (storeId) {\n      wheres.push(`store_id = ?`);\n      params.push(storeId);\n    }\n    if (failedOnly) {\n      wheres.push(`success = 0`);\n    }\n    if (wheres.length) {\n      parts.push(`WHERE ${wheres.join(' AND ')}`);\n    }\n    parts.push(`ORDER BY last_attempt_at DESC`);\n    const sql = parts.join(' ');\n    return this.db.prepare(sql).all(...params) as WebhookLogRow[];\n  }\n\n  getWebhookLogById(id: string): WebhookLogRow | undefined {\n    const stmt = this.db.prepare(`SELECT * FROM webhook_logs WHERE id = ? LIMIT 1`);\n    const row = stmt.get(id) as WebhookLogRow | undefined;\n    return row;\n  }\n\n  existsSuccessfulDeliveryFor(ctx: {\n    storeId: string;\n    invoiceId?: string;\n    subscriptionId?: string;\n    eventType: WebhookEventType;\n  }): boolean {\n    const { sql, params } = this.webhookRetryComposer.composeExistsSuccessfulDeliverySQL({\n      storeId: ctx.storeId,\n      invoiceId: ctx.invoiceId,\n      subscriptionId: ctx.subscriptionId,\n      eventType: ctx.eventType as WebhookEventType,\n    });\n    const row = this.db.prepare(sql).get(...params) as { 1: number } | undefined;\n    return !!row;\n  }\n\n  selectDueWebhookRetries(): WebhookLogRow[] {\n    const { sql } = this.webhookRetryComposer.composeSelectDueRetriesSQL();\n    const rows = this.db.prepare(sql).all() as WebhookLogRow[];\n    return rows;\n  }\n\n  getDueWebhookAttempts(nowEpochSecs: number): WebhookLogRow[] {\n    const { sql, params } = this.webhookRetryComposer.composeGetDueAttemptsSQL(nowEpochSecs);\n    const rows = this.db.prepare(sql).all(...params) as WebhookLogRow[];\n    return rows;\n  }\n\n  hasSuccessfulExpiredWebhook(storeId: string, invoiceId: string): boolean {\n    const { sql, params } = this.webhookRetryComposer.composeHasSuccessfulExpiredWebhookSQL(\n      storeId,\n      invoiceId,\n    );\n    const row = this.db.prepare(sql).get(...params) as { 1: number } | undefined;\n    return !!row;\n  }\n\n  // Admin queries\n\n  selectAdminInvoices(statuses?: InvoiceStatus[], storeId?: string): InvoiceRow[] {\n    const parts: string[] = [`SELECT * FROM invoices`];\n    const wheres: string[] = [];\n    const params: any[] = [];\n    if (storeId) {\n      wheres.push(`store_id = ?`);\n      params.push(storeId);\n    }\n    if (Array.isArray(statuses) && statuses.length > 0) {\n      const placeholders = statuses.map(() => '?').join(',');\n      wheres.push(`status IN (${placeholders})`);\n      params.push(...statuses);\n    }\n    if (wheres.length) {\n      parts.push(`WHERE ${wheres.join(' AND ')}`);\n    }\n    parts.push(`ORDER BY created_at DESC`);\n\n    // ✅ Soft cap: only applied when env set. No signature change.\n    const limit = Number(process.env.POLLER_SELECT_ADMIN_LIMIT || 0);\n    if (Number.isFinite(limit) && limit > 0) {\n      parts.push(`LIMIT ${limit}`);\n    }\n\n    const sql = parts.join(' ');\n    return this.db.prepare(sql).all(...params) as InvoiceRow[];\n  }\n\n  // Poller cursor\n\n  getPollerCursor():\n    | { lastRunAt: number; lastHeight: number; lastTxId?: string; lastBlockHash?: string }\n    | null {\n    const row = this.db\n      .prepare(\n        `SELECT last_run_at, last_height, last_txid, last_block_hash FROM poller_cursor WHERE id = 1`,\n      )\n      .get() as\n      | { last_run_at: number; last_height: number; last_txid: string | null; last_block_hash: string | null }\n      | undefined;\n    if (!row) return null;\n    return {\n      lastRunAt: Number(row.last_run_at),\n      lastHeight: Number(row.last_height),\n      lastTxId: row.last_txid ?? undefined,\n      lastBlockHash: row.last_block_hash ?? undefined,\n    };\n  }\n\n  savePollerCursor(cursor: {\n    lastRunAt: number;\n    lastHeight: number;\n    lastTxId?: string;\n    lastBlockHash?: string;\n  }): void {\n    if (!Number.isInteger(cursor.lastRunAt) || cursor.lastRunAt <= 0) {\n      throw new TypeError('lastRunAt must be positive integer');\n    }\n    if (!Number.isInteger(cursor.lastHeight) || cursor.lastHeight < 0) {\n      throw new TypeError('lastHeight must be non-negative integer');\n    }\n    const stmt = this.db.prepare(`\n      INSERT INTO poller_cursor (id, last_run_at, last_height, last_txid, last_block_hash)\n      VALUES (1, ?, ?, ?, ?)\n      ON CONFLICT(id) DO UPDATE SET\n        last_run_at = excluded.last_run_at,\n        last_height = excluded.last_height,\n        last_txid = excluded.last_txid,\n        last_block_hash = excluded.last_block_hash\n    `);\n    stmt.run(\n      cursor.lastRunAt,\n      cursor.lastHeight,\n      cursor.lastTxId ?? null,\n      cursor.lastBlockHash ?? null,\n    );\n  }\n\n  // Utilities\n\n  private static assertHex64(idHex: string): void {\n    if (typeof idHex !== 'string' || idHex.length !== 64) {\n      throw new Error('idHex must be a 64-character hex string');\n    }\n    if (!/^[0-9A-Fa-f]{64}$/.test(idHex)) {\n      throw new Error('idHex must contain only hex characters');\n    }\n    const buf = Buffer.from(idHex, 'hex');\n    if (buf.length !== 32) {\n      throw new Error('idHex must decode to 32 bytes');\n    }\n    const roundTrip = Buffer.from(buf).toString('hex');\n    if (roundTrip.length !== 64) {\n      throw new Error('idHex round-trip failed');\n    }\n  }\n}\n\nexport function openDatabaseAndMigrate(dbPath: string): ISqliteStore {\n  if (process.env.GLOBAL_DEBUGGING === \"1\") {\n    try {\n      fs.rmSync(dbPath, { force: true });\n      fs.rmSync(`${dbPath}-wal`, { force: true });\n      fs.rmSync(`${dbPath}-shm`, { force: true });\n    } catch { /* ignore */ }\n  }\n\n  const db = new Database(dbPath);\n  const store = new SqliteStore(db);\n  store.migrate();\n  return store;\n}\n"]}