{"version":3,"file":"ContractCallBuilder.js","sourceRoot":"","sources":["../../src/builders/ContractCallBuilder.ts"],"names":[],"mappings":";;;AASA,gFAA6E;AAC7E,8EAA2E;AAC3E,uDAS8B;AAE9B,MAAa,mBAAmB;IAS9B,YACE,GAAmB,EACnB,GAAsB,EACtB,GAA0B,EAC1B,KAAsB;QAEtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,IAAI,+CAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK,GAAG,IAAI,6CAAqB,EAAE,CAAC;IAC3C,CAAC;IAED,8EAA8E;IAC9E,6EAA6E;IAC7E,6EAA6E;IAC7E,8DAA8D;IAC9D,8EAA8E;IAC9E,8BAA8B;IAC9B,8EAA8E;IAC9E,4CAA4C;IAC5C,oHAAoH;IACpH,wHAAwH;IACxH,OAAO;IAEP,8CAA8C;IAC9C,kFAAkF;IAClF,2CAA2C;IAC3C,4EAA4E;IAE5E,kCAAkC;IAClC,yCAAyC;IACzC,6FAA6F;IAC7F,0FAA0F;IAC1F,6CAA6C;IAC7C,6CAA6C;IAC7C,6FAA6F;IAC7F,0FAA0F;IAC1F,MAAM;IAEN,6CAA6C;IAC7C,uBAAuB;IACvB,+IAA+I;IAC/I,SAAS;IACT,MAAM;IACN,+DAA+D;IAC/D,IAAI;IAEI,eAAe;QACrB,MAAM,eAAe,GACnB,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;QACtE,MAAM,YAAY,GAChB,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC;QAChE,IAAI,CAAC,eAAe,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CACb,6EAA6E,CAC9E,CAAC;QACJ,CAAC;QACD,OAAO,IAAA,kCAAmB,EAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,kBAAkB,CAAC,IAKlB;QACC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtD,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjE,MAAM,YAAY,GAAG;YACnB,IAAA,uBAAQ,EAAC,KAAK,CAAC;YACf,IAAA,qBAAM,EAAC,IAAI,CAAC,UAAU,CAAC;YACvB,OAAO;YACP,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,IAAA,qBAAM,EAAC,IAAA,qBAAM,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,qBAAM,GAAE;SACnF,CAAC;QAEF,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,kBAAkB,CAAC,IAKlB;QACC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtD,0CAA0C;QAC1C,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEjD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAExE,gEAAgE;QAChE,MAAM,YAAY,GAAG,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,EAAE,IAAA,qBAAM,EAAC,IAAI,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QACjG,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED,eAAe,CAAC,IAKf;QACC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtD,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9C,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEjD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1F,wCAAwC;QACxC,MAAM,YAAY,GAAG,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,kBAAkB,CAAC,IAAuB;QACxC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,uBAAuB,CAAC,IAMvB;QACC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxC,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAE9D,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG;YACnB,IAAA,uBAAQ,EAAC,KAAK,CAAC;YACf,IAAA,kCAAmB,EAAC,IAAI,CAAC,QAAQ,CAAC;YAClC,IAAA,kCAAmB,EAAC,IAAI,CAAC,UAAU,CAAC;YACpC,IAAA,qBAAM,EAAC,IAAI,CAAC,UAAU,CAAC;YACvB,IAAA,qBAAM,EAAC,IAAI,CAAC,cAAc,CAAC;SAC5B,CAAC;QACF,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,oBAAoB,CAAC,IAKpB;QACC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtD,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,KAAK,IAAA,kCAAmB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAExC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7E,wCAAwC;QACxC,MAAM,YAAY,GAAG,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;IAC9D,CAAC;IAED,uBAAuB,CAAC,IAAuB;QAC7C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,qBAAqB,CAAC,IAAyC;QAC7D,MAAM,UAAU,GAAG,IAAA,kCAAmB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAC1D,CAAC;IAED,sBAAsB,CAAC,IAA2C;QAChE,MAAM,UAAU,GAAG,IAAA,kCAAmB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAA,qBAAM,GAAE,CAAC,CAAC,CAAC,IAAA,sBAAO,GAAE,CAAC;QACpD,MAAM,YAAY,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,iBAAiB,CAAC,IAGjB;QACC,MAAM,EAAE,GAAG,IAAA,kCAAmB,EAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACxE,MAAM,YAAY,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;IAEO,QAAQ,CACd,YAAoB,EACpB,YAAmB,EACnB,GAA0D;QAE1D,MAAM,EAAE,eAAe,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QACnE,MAAM,IAAI,GAAyB;YACjC,eAAe;YACf,YAAY;YACZ,YAAY;YACZ,YAAY;YACZ,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;YAC9B,UAAU,EAAE,KAAK;SAClB,CAAC;QACF,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,iBAAiB,CAAC;YAC/C,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC;QAC3C,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,iBAAiB,CAAC,CAAS,EAAE,IAAY;QAC/C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACnC,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,6BAA6B,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAEO,oBAAoB,CAAC,CAAS,EAAE,IAAY;QAClD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,iCAAiC,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;CACF;AA3PD,kDA2PC","sourcesContent":["// src/builders/ContractCallBuilder.ts\nimport type {\n  IContractCallBuilder,\n  IConfigService,\n  IAssetInfoFactory,\n  IPostConditionFactory,\n  IInvoiceIdCodec,\n} from '../contracts/interfaces';\nimport type { UnsignedContractCall } from '../contracts/domain';\nimport { PostConditionsComposer } from '../delegates/PostConditionsComposer';\nimport { OptionalBuff34Encoder } from '../delegates/OptionalBuff34Encoder';\nimport {\n  bufferCV,\n  uintCV,\n  standardPrincipalCV,\n  contractPrincipalCV,\n  someCV,\n  noneCV,\n  trueCV,\n  falseCV,\n} from '@stacks/transactions';\n\nexport class ContractCallBuilder implements IContractCallBuilder {\n  private readonly cfg: IConfigService;\n  private readonly aif: IAssetInfoFactory;\n  private readonly pcf: IPostConditionFactory;\n  private readonly codec: IInvoiceIdCodec;\n\n  private readonly pcc: PostConditionsComposer;\n  private readonly opt34: OptionalBuff34Encoder;\n\n  constructor(\n    cfg: IConfigService,\n    aif: IAssetInfoFactory,\n    pcf: IPostConditionFactory,\n    codec: IInvoiceIdCodec\n  ) {\n    this.cfg = cfg;\n    this.aif = aif;\n    this.pcf = pcf;\n    this.codec = codec;\n    this.pcc = new PostConditionsComposer(this.aif, this.pcf);\n    this.opt34 = new OptionalBuff34Encoder();\n  }\n\n  // ───────────────────────────────────────────────────────────────────────────\n  // NEW: helper – resolve the configured sBTC token as a contract-principal CV\n  // Tries cfg.getSbtcTokenId() or cfg.getTokenContractId(); falls back to env.\n  // Throws with a clear message if the token is not configured.\n  // ───────────────────────────────────────────────────────────────────────────\n  // private tokenContractCv() {\n  //   // Try config service first (optional to keep this a non-breaking change)\n  //   const anyCfg = this.cfg as unknown as {\n  //     getSbtcTokenId?: () => { contractAddress: string; contractName: string } | { address: string; name: string };\n  //     getTokenContractId?: () => { contractAddress: string; contractName: string } | { address: string; name: string };\n  //   };\n\n  //   let contractAddress: string | undefined =\n  //     process.env.SBTC_CONTRACT_ADDRESS || process.env.SBTC_ADDRESS || undefined;\n  //   let contractName: string | undefined =\n  //     process.env.SBTC_CONTRACT_NAME || process.env.SBTC_NAME || undefined;\n\n  //   if (anyCfg?.getSbtcTokenId) {\n  //     const x = anyCfg.getSbtcTokenId();\n  //     contractAddress = (x as any).contractAddress ?? (x as any).address ?? contractAddress;\n  //     contractName    = (x as any).contractName    ?? (x as any).name    ?? contractName;\n  //   } else if (anyCfg?.getTokenContractId) {\n  //     const x = anyCfg.getTokenContractId();\n  //     contractAddress = (x as any).contractAddress ?? (x as any).address ?? contractAddress;\n  //     contractName    = (x as any).contractName    ?? (x as any).name    ?? contractName;\n  //   }\n\n  //   if (!contractAddress || !contractName) {\n  //     throw new Error(\n  //       'sBTC token not configured: missing contract address/name (provide via ConfigService or SBTC_CONTRACT_ADDRESS/SBTC_CONTRACT_NAME env)'\n  //     );\n  //   }\n  //   return contractPrincipalCV(contractAddress, contractName);\n  // }\n\n  private tokenContractCv() {\n    const contractAddress =\n      process.env.SBTC_CONTRACT_ADDRESS ?? process.env.SBTC_ADDRESS ?? '';\n    const contractName =\n      process.env.SBTC_CONTRACT_NAME ?? process.env.SBTC_NAME ?? '';\n    if (!contractAddress || !contractName) {\n      throw new Error(\n        'sBTC token not configured: set SBTC_CONTRACT_ADDRESS and SBTC_CONTRACT_NAME'\n      );\n    }\n    return contractPrincipalCV(contractAddress, contractName);\n  }\n\n  buildCreateInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    memo?: string;\n    expiresAtBlock?: number;\n  }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    this.assertPositiveInt(args.amountSats, 'amountSats');\n    if (args.expiresAtBlock !== undefined) {\n      this.assertNonNegativeInt(args.expiresAtBlock, 'expiresAtBlock');\n    }\n\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const memoOpt = this.opt34.encodeOptionalUtf8ToBuff34(args.memo);\n\n    const functionArgs = [\n      bufferCV(idBuf),\n      uintCV(args.amountSats),\n      memoOpt,\n      args.expiresAtBlock !== undefined ? someCV(uintCV(args.expiresAtBlock)) : noneCV(),\n    ];\n\n    return this.baseCall('create-invoice', functionArgs);\n  }\n\n  buildRefundInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    memo?: string;\n    merchantPrincipal: string;\n  }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    this.assertPositiveInt(args.amountSats, 'amountSats');\n    // principal validation by CV construction\n    void standardPrincipalCV(args.merchantPrincipal);\n\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const memoOpt = this.opt34.encodeOptionalUtf8ToBuff34(args.memo);\n    const pcs = this.pcc.forRefund(args.merchantPrincipal, args.amountSats);\n\n    // CHANGED: append trait-typed token arg (as contract principal)\n    const functionArgs = [bufferCV(idBuf), uintCV(args.amountSats), memoOpt, this.tokenContractCv()];\n    return this.baseCall('refund-invoice', functionArgs, pcs);\n  }\n\n  buildPayInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    payerPrincipal: string;\n    merchantPrincipal: string;\n  }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    this.assertPositiveInt(args.amountSats, 'amountSats');\n    void standardPrincipalCV(args.payerPrincipal);\n    void standardPrincipalCV(args.merchantPrincipal);\n\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const pcs = this.pcc.forPay(args.payerPrincipal, args.merchantPrincipal, args.amountSats);\n\n    // CHANGED: add the missing ft trait arg\n    const functionArgs = [bufferCV(idBuf), this.tokenContractCv()];\n    return this.baseCall('pay-invoice', functionArgs, pcs);\n  }\n\n  buildCancelInvoice(args: { idHex: string }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const functionArgs = [bufferCV(idBuf)];\n    return this.baseCall('cancel-invoice', functionArgs);\n  }\n\n  buildCreateSubscription(args: {\n    idHex: string;\n    merchant: string;\n    subscriber: string;\n    amountSats: number;\n    intervalBlocks: number;\n  }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    void standardPrincipalCV(args.merchant);\n    void standardPrincipalCV(args.subscriber);\n    this.assertPositiveInt(args.amountSats, 'amountSats');\n    this.assertPositiveInt(args.intervalBlocks, 'intervalBlocks');\n\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const functionArgs = [\n      bufferCV(idBuf),\n      standardPrincipalCV(args.merchant),\n      standardPrincipalCV(args.subscriber),\n      uintCV(args.amountSats),\n      uintCV(args.intervalBlocks),\n    ];\n    return this.baseCall('create-subscription', functionArgs);\n  }\n\n  buildPaySubscription(args: {\n    idHex: string;\n    amountSats: number;\n    subscriber: string;\n    merchant: string;\n  }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    this.assertPositiveInt(args.amountSats, 'amountSats');\n    void standardPrincipalCV(args.subscriber);\n    void standardPrincipalCV(args.merchant);\n\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const pcs = this.pcc.forPay(args.subscriber, args.merchant, args.amountSats);\n\n    // CHANGED: add the missing ft trait arg\n    const functionArgs = [bufferCV(idBuf), this.tokenContractCv()];\n    return this.baseCall('pay-subscription', functionArgs, pcs);\n  }\n\n  buildCancelSubscription(args: { idHex: string }): UnsignedContractCall {\n    this.codec.assertHex64(args.idHex);\n    const idBuf = this.codec.toBuff32Hex(args.idHex);\n    const functionArgs = [bufferCV(idBuf)];\n    return this.baseCall('cancel-subscription', functionArgs);\n  }\n\n  buildRegisterMerchant(args: { merchant: string; name?: string }): UnsignedContractCall {\n    const merchantCv = standardPrincipalCV(args.merchant);\n    const nameOpt = this.opt34.encodeOptionalUtf8ToBuff34(args.name);\n    const functionArgs = [merchantCv, nameOpt];\n    return this.baseCall('register-merchant', functionArgs);\n  }\n\n  buildSetMerchantActive(args: { merchant: string; active: boolean }): UnsignedContractCall {\n    const merchantCv = standardPrincipalCV(args.merchant);\n    const activeCv = args.active ? trueCV() : falseCV();\n    const functionArgs = [merchantCv, activeCv];\n    return this.baseCall('set-merchant-active', functionArgs);\n  }\n\n  buildSetSbtcToken(args: {\n    contractAddress: string;\n    contractName: string;\n  }): UnsignedContractCall {\n    const cp = contractPrincipalCV(args.contractAddress, args.contractName);\n    const functionArgs = [cp];\n    return this.baseCall('set-sbtc-token', functionArgs);\n  }\n\n  buildBootstrapAdmin(): UnsignedContractCall {\n    return this.baseCall('bootstrap-admin', []);\n  }\n\n  private baseCall(\n    functionName: string,\n    functionArgs: any[],\n    pcs?: { postConditionMode: 'deny'; postConditions: any[] }\n  ): UnsignedContractCall {\n    const { contractAddress, contractName } = this.cfg.getContractId();\n    const base: UnsignedContractCall = {\n      contractAddress,\n      contractName,\n      functionName,\n      functionArgs,\n      network: this.cfg.getNetwork(),\n      anchorMode: 'any',\n    };\n    if (pcs) {\n      base.postConditionMode = pcs.postConditionMode;\n      base.postConditions = pcs.postConditions;\n    }\n    return base;\n  }\n\n  private assertPositiveInt(n: number, name: string): void {\n    if (!Number.isInteger(n) || n <= 0) {\n      throw new TypeError(`${name} must be a positive integer`);\n    }\n  }\n\n  private assertNonNegativeInt(n: number, name: string): void {\n    if (!Number.isInteger(n) || n < 0) {\n      throw new TypeError(`${name} must be a non-negative integer`);\n    }\n  }\n}\n"]}