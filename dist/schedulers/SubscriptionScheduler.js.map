{"version":3,"file":"SubscriptionScheduler.js","sourceRoot":"","sources":["../../src/schedulers/SubscriptionScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["// src/schedulers/SubscriptionScheduler.ts\nimport { makeContractCall, broadcastTransaction } from '@stacks/transactions';\nimport { STACKS_MAINNET, STACKS_TESTNET, STACKS_DEVNET, STACKS_MOCKNET } from '@stacks/network';\n\nimport type {\n  IStacksChainClient,\n  IContractCallBuilder,\n  IConfigService,\n  IInvoiceIdCodec,\n  IWebhookDispatcher,\n} from '../contracts/interfaces';\nimport type { ISqliteStore } from '../contracts/dao';\nimport type { SubscriptionRow } from '../contracts/domain';\nimport { PricingService } from '../services/PricingService';\nimport { SubscriptionInvoicePlanner } from '../delegates/SubscriptionInvoicePlanner';\n\ntype BroadcastInput = {\n  idBuf32: Uint8Array;\n  amountSats: number;\n  memo?: string;\n  expiresAtBlocks?: number;\n};\n\nexport class SubscriptionScheduler {\n  private chain!: IStacksChainClient;\n  private builder!: IContractCallBuilder;\n  private store!: ISqliteStore;\n  private pricing!: PricingService;\n  private cfg!: IConfigService;\n  private dispatcher!: IWebhookDispatcher;\n  private codec!: IInvoiceIdCodec;\n\n  private intervalId: NodeJS.Timeout | undefined;\n\n  bindDependencies(deps: {\n    chain: IStacksChainClient;\n    builder: IContractCallBuilder;\n    store: ISqliteStore;\n    pricing: PricingService;\n    cfg: IConfigService;\n    dispatcher: IWebhookDispatcher;\n    codec: IInvoiceIdCodec;\n  }): void {\n    this.chain = deps.chain;\n    this.builder = deps.builder;\n    this.store = deps.store;\n    this.pricing = deps.pricing;\n    this.cfg = deps.cfg;\n    this.dispatcher = deps.dispatcher;\n    this.codec = deps.codec;\n  }\n\n  bootstrapScheduler(): void {\n    if (this.intervalId) return;\n\n    const avgBlockSecs = this.cfg.getAvgBlockSecs();\n    const poll = this.cfg.getPollingConfig().pollIntervalSecs;\n    const ttlSecs = Number(process.env.QUOTE_TTL_SECONDS);\n\n    if (!Number.isFinite(avgBlockSecs) || avgBlockSecs <= 0) return;\n    if (!Number.isFinite(poll) || poll <= 0) return;\n    if (!Number.isFinite(ttlSecs) || ttlSecs <= 0) return;\n\n    const intervalMs = poll * 1000;\n    this.intervalId = setInterval(() => this.timerCallback(), intervalMs);\n  }\n\n  private timerCallback(): void {\n    void this.tick().catch(() => {});\n  }\n\n  async tick(): Promise<void> {\n    const tip = await this.chain.getTip();\n    await this.processDueSubscriptions(tip.height);\n  }\n\n  async processDueSubscriptions(currentHeight: number): Promise<void> {\n    const subs = this.store.selectDueSubscriptions(currentHeight);\n    for (const sub of subs) {\n      try {\n        await this.onSubscriptionInvoiceCreated({ subscription: sub, currentHeight });\n      } catch {\n        // Skip failed item and continue with others\n      }\n    }\n  }\n\n  async onSubscriptionInvoiceCreated(ctx: {\n    subscription: SubscriptionRow;\n    currentHeight: number;\n  }): Promise<void> {\n    const sub = ctx.subscription;\n\n    const planner = new SubscriptionInvoicePlanner(\n      this.store,\n      this.pricing,\n      this.cfg,\n      this.codec,\n    );\n    const planned = await planner.plan(sub, ctx.currentHeight);\n\n    await this.broadcastCreateInvoiceTx({\n      idBuf32: planned.idBuf32,\n      amountSats: sub.amount_sats,\n      memo: undefined,\n      expiresAtBlocks: planned.expiresAtBlocks,\n    });\n\n    const nowSecs = Math.floor(Date.now() / 1000);\n    this.store.invoices.insert({\n      id_raw: planned.idRaw,\n      id_hex: planned.idHex,\n      store_id: sub.store_id,\n      amount_sats: sub.amount_sats,\n      usd_at_create: planned.usdAtCreate,\n      quote_expires_at: planned.quoteExpiresAtMs,\n      merchant_principal: sub.merchant_principal,\n      status: 'unpaid',\n      payer: undefined,\n      txid: undefined,\n      memo: undefined,\n      webhook_url: undefined,\n      created_at: nowSecs,\n      refunded_at: undefined,\n      refund_amount: 0,\n      refund_txid: undefined,\n      subscription_id: sub.id,\n      refund_count: 0,\n      expired: 0,\n    });\n    this.store.advanceSubscriptionSchedule(sub.id);\n\n    const rawBody = planner.buildWebhookRawBody(planned, sub);\n    await this.dispatcher.dispatch({\n      storeId: sub.store_id,\n      subscriptionId: sub.id,\n      invoiceId: planned.idRaw,\n      eventType: 'subscription',\n      rawBody,\n    });\n  }\n\n  async broadcastCreateInvoiceTx(input: BroadcastInput): Promise<string> {\n    if (!(input.idBuf32 instanceof Uint8Array) || input.idBuf32.length !== 32) {\n      throw new Error('idBuf32 must be 32 bytes');\n    }\n    if (!Number.isInteger(input.amountSats) || input.amountSats <= 0) {\n      throw new TypeError('amountSats must be a positive integer');\n    }\n\n    const idHex = this.codec.hexFromBuff32(input.idBuf32);\n    const payload = this.builder.buildCreateInvoice({\n      idHex,\n      amountSats: input.amountSats,\n      memo: input.memo,\n      expiresAtBlock: input.expiresAtBlocks,\n    });\n\n    if (!this.cfg.isAutoBroadcastEnabled()) {\n      throw new Error('auto_broadcast_disabled');\n    }\n\n    const senderKey = String(process.env.SCHEDULER_SENDER_KEY ?? process.env.SIGNER_PRIVATE_KEY ?? '');\n    const { contractAddress, contractName, functionName, functionArgs } = payload;\n    const networkName = this.cfg.getNetwork();\n\n    const network =\n      networkName === 'mainnet' ? STACKS_MAINNET :\n      networkName === 'testnet' ? STACKS_TESTNET :\n      networkName === 'devnet'  ? STACKS_DEVNET  :\n      STACKS_MOCKNET;\n\n    const tx = await makeContractCall({\n      contractAddress,\n      contractName,\n      functionName,\n      functionArgs,\n      senderKey,\n      network\n      // anchorMode removed — not part of SignedContractCallOptions in v7\n    });\n\n    const resp: any = await broadcastTransaction({ transaction: tx, network });\n    if (typeof resp === 'string') return resp;\n    if (resp && typeof resp.txid === 'string') return resp.txid;\n    throw new Error('broadcast_failed');\n  }\n}\n"]}