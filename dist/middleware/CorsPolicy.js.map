{"version":3,"file":"CorsPolicy.js","sourceRoot":"","sources":["../../src/middleware/CorsPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// src/middleware/CorsPolicy.ts\nimport type { ISqliteStore } from '../contracts/dao';\n\n/**\n * Public CORS policy\n * - Enforced ONLY for customer-facing routes:\n *   • GET  /i/:invoiceId\n *   • POST /create-tx\n *   • GET  /api/v1/stores/:storeId/public-profile\n *\n * Goals:\n * 1) Server-to-server (no Origin) must always pass (admin/merchant APIs, curl, Node fetch).\n * 2) Browser requests are allowed IFF their Origin is in the store’s allowed_origins CSV.\n * 3) OPTIONS preflights for public routes must pass (even when /create-tx has no query/body yet).\n * 4) If applied globally by mistake, non-public paths will:\n *    - allow if no Origin (server-to-server), or\n *    - reject when an Origin is present (browser) to avoid leaking CORS on private/admin APIs.\n *\n * Notes:\n * - This class only provides the `origin` validator. Use with `cors({ origin })`.\n * - Use `CorsPolicy.ALLOWED_HEADERS` in your CORS config for Access-Control-Allow-Headers.\n */\nexport class CorsPolicy {\n  static readonly ALLOWED_HEADERS =\n    'Content-Type,X-API-Key,X-Webhook-Timestamp,X-Webhook-Signature';\n\n  private store!: ISqliteStore;\n\n  bindStore(store: ISqliteStore): void {\n    this.store = store;\n  }\n\n  /**\n   * Origin validator compatible with `cors` package. We accept an extra `req` param\n   * by wrapping this method in your middleware factory (capture `req` via closure).\n   *\n   * Example usage:\n   *   const origin = (o: string | undefined, cb: any) =>\n   *     policy.publicCorsOriginValidator(o, cb, req);\n   *   app.use('/i/:invoiceId', cors({ origin }));\n   */\n  publicCorsOriginValidator(\n    origin: string | undefined,\n    cb: (err: Error | null, allow?: boolean) => void,\n    req: import('express').Request,\n  ): void {\n    // (1) Server-to-server (no CORS): allow pass-through\n    if (!origin) {\n      cb(null, true);\n      return;\n    }\n\n    // Normalize browser-provided Origin and path\n    const normOrigin = this.normalizeOrigin(origin);\n    const path = req.path;\n\n    const isPublicInvoice = /^\\/i\\/[^/]+$/.test(path);\n    const isPublicCreateTx = path === '/create-tx';\n    const isPublicStoreProfile = /^\\/api\\/v1\\/stores\\/[^/]+\\/public-profile$/.test(path);\n\n    // (2) If not a public route: allow server-to-server (handled above), block browsers here.\n    if (!isPublicInvoice && !isPublicCreateTx && !isPublicStoreProfile) {\n      cb(new Error('Not allowed'), false);\n      return;\n    }\n\n// (3) OPTIONS preflight for public routes: only allow if Origin is allow-listed.\nif (req.method === 'OPTIONS') {\n  const allowedCsv = this.lookupAllowedOriginsCsv(req, {\n    isPublicInvoice,\n    isPublicCreateTx,\n    isPublicStoreProfile,\n    origin: normOrigin,\n  });\n\n  // no allow-list found → deny, but do NOT throw\n  if (!allowedCsv) {\n    cb(null, false);\n    return;\n  }\n\n  const allowlist = this.parseAllowlist(allowedCsv);\n  const ok = allowlist.has(normOrigin);\n\n  // allow if in list; otherwise deny quietly (no error throw)\n  cb(null, ok);\n  return;\n}\n\n\n\n\n    // (4) Resolve store.allowed_origins for the route\n    const allowedCsv = this.lookupAllowedOriginsCsv(req, {\n      isPublicInvoice,\n      isPublicCreateTx,\n      isPublicStoreProfile,\n      origin: normOrigin,\n    });\n\n    if (!allowedCsv) {\n      cb(null, false);\n      return;\n    }\n\n    const allowlist = this.parseAllowlist(allowedCsv);\n    const ok = allowlist.has(normOrigin);\n\n    if (ok) {\n      cb(null, true);\n      return;\n    }\n    cb(null, false);\n  }\n\n  // ───────────────────────────── helpers ─────────────────────────────\n\n  private normalizeOrigin(o: string): string {\n    // Lowercase and strip trailing slash to match CSV entries consistently\n    try {\n      const u = new URL(o);\n      // Keep scheme + host + optional port (the canonical Origin form)\n      const origin = `${u.protocol}//${u.host}`.toLowerCase();\n      return origin.endsWith('/') ? origin.slice(0, -1) : origin;\n    } catch {\n      const s = (o || '').toLowerCase();\n      return s.endsWith('/') ? s.slice(0, -1) : s;\n    }\n  }\n\n  private parseAllowlist(csv: string): Set<string> {\n    const out = new Set<string>();\n    for (const raw of csv.split(',')) {\n      const s = raw.trim();\n      if (!s) continue;\n      // Accept either full origin (\"https://app.example.com\") or with trailing slash\n      const norm = this.normalizeOrigin(s);\n      out.add(norm);\n    }\n    return out;\n  }\n\n  /**\n   * Attempts to fetch the per-store allowed_origins CSV for the current request.\n   * For /create-tx when we cannot extract an invoiceId (e.g., early CORS phase),\n   * we fall back to: allow if the Origin appears in *any* store's allowlist.\n   */\n  private lookupAllowedOriginsCsv(\n    req: import('express').Request,\n    flags: {\n      isPublicInvoice: boolean;\n      isPublicCreateTx: boolean;\n      isPublicStoreProfile: boolean;\n      origin: string;\n    },\n  ): string | undefined {\n    if (flags.isPublicInvoice) {\n      const invoiceId = (req.params as any)?.invoiceId as string | undefined;\n      if (!invoiceId) return undefined;\n      const row = this.store.getInvoiceWithStore(invoiceId) as any;\n      return row?.store?.allowed_origins as string | undefined;\n    }\n\n    if (flags.isPublicStoreProfile) {\n      const storeId = (req.params as any)?.storeId as string | undefined;\n      const rows = (this.store.listMerchantsProjection() as any[]) || [];\n\n      // 1) Try direct store match first\n      if (storeId) {\n        const m = rows.find(r => r?.id === storeId);\n        if (m?.allowed_origins) return m.allowed_origins as string;\n      }\n\n      // 2) Fallback: allow if Origin is present in any store's allowlist\n      const origin = String(flags.origin || '');\n      for (const r of rows) {\n        const csv = (r?.allowed_origins ?? '') as string;\n        if (!csv) continue;\n        const set = this.parseAllowlist(csv);\n        if (set.has(origin)) return csv;\n      }\n      return undefined;\n    }\n\n\n\n\n    // /create-tx\n    if (flags.isPublicCreateTx) {\n      // Best-effort invoiceId read from query (body likely not parsed here).\n      const qInvoiceId = (req.query as any)?.invoiceId as string | undefined;\n      if (qInvoiceId) {\n        const row = this.store.getInvoiceWithStore(qInvoiceId) as any;\n        return row?.store?.allowed_origins as string | undefined;\n      }\n\n      // Fallback (safe): allow only if this Origin is configured for any store.\n      // This keeps /create-tx usable from known merchant frontends during preflight/early phases\n      // without opening it to arbitrary sites.\n      const rows = (this.store.listMerchantsProjection() as any[]) || [];\n      for (const r of rows) {\n        const csv = r?.allowed_origins as string | undefined;\n        if (!csv) continue;\n        const set = this.parseAllowlist(csv);\n        if (set.has(flags.origin)) return csv;\n      }\n      return undefined;\n    }\n\n    return undefined;\n  }\n}\n"]}