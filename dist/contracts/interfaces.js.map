{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/contracts/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// src/contracts/interfaces.ts\nimport type {\n  AnchorCase,\n  NetworkName,\n  OnChainSubscription,\n  UnsignedContractCall,\n  WebhookEventType,\n} from './domain';\n\nexport interface IStacksChainClient {\n  callReadOnly(fn: string, args: any[]): Promise<any>;\n  readSbtcToken(): Promise<{ contractAddress: string; contractName: string } | undefined>;\n  readSubscription(idHex: string): Promise<OnChainSubscription | undefined>;\n  getTip(): Promise<{ height: number; blockHash: string }>;\n  getTipHeight(): Promise<number>;\n  readInvoiceStatus(idHex: string): Promise<'not-found' | 'paid' | 'canceled' | 'expired' | 'unpaid'>;\n  getFungibleBalance(\n    assetContract: { contractAddress: string; contractName: string },\n    principal: string,\n  ): Promise<bigint>;\n  getContractCallEvents(params: { fromHeight: number }): Promise<any[]>;\n  getBlockHeader(\n    height: number,\n  ): Promise<{ parent_block_hash: string; block_hash: string }>;\n  signAndBroadcast(\n    unsigned: {\n      contractAddress: string;\n      contractName: string;\n      functionName: string;\n      functionArgs?: any[];\n      postConditions?: any[];\n      post_conditions?: any[];\n      postConditionMode?: 'allow' | 'deny';\n      post_condition_mode?: 'allow' | 'deny';\n      anchorMode?: AnchorCase;\n      network?: NetworkName;\n    },\n    senderKeyHex: string,\n  ): Promise<{ txid: string }>;\n}\n\nexport interface IContractCallBuilder {\n  buildCreateInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    memo?: string;\n    expiresAtBlock?: number;\n  }): UnsignedContractCall;\n\n  buildRefundInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    memo?: string;\n    merchantPrincipal: string;\n  }): UnsignedContractCall;\n\n  buildPayInvoice(args: {\n    idHex: string;\n    amountSats: number;\n    payerPrincipal: string;\n    merchantPrincipal: string;\n  }): UnsignedContractCall;\n\n  buildCancelInvoice(args: { idHex: string }): UnsignedContractCall;\n\n  buildCreateSubscription(args: {\n    idHex: string;\n    merchant: string;\n    subscriber: string;\n    amountSats: number;\n    intervalBlocks: number;\n  }): UnsignedContractCall;\n\n  buildPaySubscription(args: {\n    idHex: string;\n    amountSats: number;\n    subscriber: string;\n    merchant: string;\n  }): UnsignedContractCall;\n\n  buildCancelSubscription(args: { idHex: string }): UnsignedContractCall;\n\n  buildRegisterMerchant(args: { merchant: string; name?: string }): UnsignedContractCall;\n\n  buildSetMerchantActive(args: {\n    merchant: string;\n    active: boolean;\n  }): UnsignedContractCall;\n\n  buildSetSbtcToken(args: {\n    contractAddress: string;\n    contractName: string;\n  }): UnsignedContractCall;\n\n  buildBootstrapAdmin(): UnsignedContractCall;\n}\n\nexport interface IAssetInfoFactory {\n  getSbtcAssetInfo(): {\n    contractAddress: string;\n    contractName: string;\n    assetName: string;\n  };\n}\n\nexport interface IPostConditionFactory {\n  forPayInvoice(\n    payer: string,\n    merchant: string,\n    amountSats: number,\n    asset: any,\n  ): any[];\n  forRefund(merchant: string, amountSats: number, asset: any): any[];\n}\n\nexport interface IInvoiceIdCodec {\n  assertHex64(idHex: string): void;\n  isValidHex64(idHex: string): boolean;\n  toBuff32Hex(idHex: string): Uint8Array;\n  hexFromBuff32(buf: Uint8Array): string;\n  generateRandomBuff32Hex(): string;\n}\n\nexport interface IConfigService {\n  getNetwork(): 'mainnet' | 'testnet' | 'devnet';\n  getContractId(): { contractAddress: string; contractName: string };\n  getSbtcContractId():\n    | { contractAddress: string; contractName: string }\n    | undefined;\n  getPollingConfig(): {\n    minConfirmations: number;\n    reorgWindowBlocks: number;\n    pollIntervalSecs: number;\n  };\n  getAvgBlockSecs(): number;\n  getPriceApiUrl(): string | undefined;\n  isAutoBroadcastOnChainEnabled(): boolean;\n  getServerSignerPrivKey(): string | undefined;\n  getAdminToken():string | undefined;\n  getHiroAPIKey():string | undefined;\n}\n\nexport interface IWebhookDispatcher {\n  dispatch(ctx: {\n    storeId: string;\n    invoiceId?: string;\n    subscriptionId?: string;\n    eventType: WebhookEventType;\n    rawBody: string;\n    attempts?: number;\n  }): Promise<void>;\n}\n\nexport interface IWebhookRetryScheduler {\n  enqueueRetry(ctx: {\n    storeId: string;\n    invoiceId?: string;\n    subscriptionId?: string;\n    eventType: WebhookEventType;\n    rawBody: string;\n    attempts: number;\n  }): void;\n}\n"]}