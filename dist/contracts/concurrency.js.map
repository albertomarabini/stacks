{"version":3,"file":"concurrency.js","sourceRoot":"","sources":["../../src/contracts/concurrency.ts"],"names":[],"mappings":";AAAA,8BAA8B","sourcesContent":["// ../contracts/concurrency.ts\n\n// Concurrency & Synchronization Handling\n\n/**\n * Single-flight guard to prevent re-entrant execution within a processing tick.\n * Returns false if an operation is already running and should be skipped.\n */\nexport interface ReentrancyGuard {\n  guardReentrancy(): boolean;\n}\n\n/**\n * In-flight de-duplication for retryable operations (e.g., webhooks).\n * Key represents a logical context (storeId + invoiceId/subscriptionId + eventType).\n */\nexport interface RetryDeduper {\n  isInflight(key: string): boolean;\n  markInflight(key: string): void;\n  clearInflight(key: string): void;\n}\n\n// Error Handling & Fault Tolerance\n\n/**\n * Webhook retry backoff and attempt cap policy.\n * maxAttempts is a literal type of 5 to encode the fixed cap.\n */\nexport interface WebhookRetryPolicy {\n  maxAttempts: 5;\n  backoffSeconds: number[]; // e.g., [0, 60, 120, 240, 480, 960]\n}\n\n/**\n * Resilience configuration for the payment poller.\n * minConfirmations and reorgWindowBlocks come from configuration.\n * singleFlightPerTick is a literal true, enforcing reentrancy prevention per tick.\n */\nexport interface PollerResilience {\n  minConfirmations: number;\n  reorgWindowBlocks: number;\n  singleFlightPerTick: true;\n}\n"]}