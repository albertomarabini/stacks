{"version":3,"file":"PostConditionFactory.js","sourceRoot":"","sources":["../../src/factories/PostConditionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// src/factories/PostConditionFactory.ts\nimport { Pc } from '@stacks/transactions';\nimport { IPostConditionFactory } from '../contracts/interfaces';\n\ntype FtAsset = {\n  contractAddress: string; // e.g. 'ST...'\n  contractName: string;    // e.g. 'sbtc-token'\n  assetName: string;       // e.g. 'sbtc'\n};\n\n// Stacks v7 Pc.ft expects a template-literal ContractId: `${string}.${string}`\ntype ContractId = `${string}.${string}`;\n\nexport class PostConditionFactory implements IPostConditionFactory {\n  /**\n   * Build post-conditions for paying an invoice.\n   * NOTE: Post-conditions constrain the *sender* only. Recipient guarantees are enforced in Clarity.\n   */\n  forPayInvoice(payer: string, merchant: string, amountSats: number, asset: FtAsset): any[] {\n    if (typeof payer !== 'string' || payer.length === 0) throw new Error('invalid_payer_principal');\n    if (typeof merchant !== 'string' || merchant.length === 0) throw new Error('invalid_merchant_principal');\n    if (typeof asset?.contractAddress !== 'string' || asset.contractAddress.length === 0) throw new Error('invalid_contract_address');\n    if (typeof asset?.contractName !== 'string' || asset.contractName.length === 0) throw new Error('invalid_contract_name');\n    if (typeof asset?.assetName !== 'string' || asset.assetName.length === 0) throw new Error('invalid_asset_name');\n\n    const amt = BigInt(amountSats);\n    if (amt <= 0n) throw new Error('invalid_amount');\n\n    const contractId: ContractId = `${asset.contractAddress}.${asset.contractName}`;\n\n    // Payer must send >= amount of the FT (sBTC)\n    const payerSendsGte = Pc.principal(payer).willSendGte(amt).ft(contractId, asset.assetName);\n    // extra guard: merchant does not send any sBTC in this tx\n    const merchantSendsLte0 = Pc.principal(merchant).willSendLte(0n).ft(contractId, asset.assetName);\n\n    return [payerSendsGte, merchantSendsLte0];\n  }\n\n  /**\n   * Build post-conditions for a refund (cap merchant outflow).\n   */\n  forRefund(merchant: string, amountSats: number, asset: FtAsset): any[] {\n    if (typeof merchant !== 'string' || merchant.length === 0) throw new Error('invalid_merchant_principal');\n    if (typeof asset?.contractAddress !== 'string' || asset.contractAddress.length === 0) throw new Error('invalid_contract_address');\n    if (typeof asset?.contractName !== 'string' || asset.contractName.length === 0) throw new Error('invalid_contract_name');\n    if (typeof asset?.assetName !== 'string' || asset.assetName.length === 0) throw new Error('invalid_asset_name');\n\n    const amt = BigInt(amountSats);\n    if (amt <= 0n) throw new Error('invalid_amount');\n\n    const contractId: ContractId = `${asset.contractAddress}.${asset.contractName}`;\n\n    // Merchant will send <= amount of the FT (sBTC)\n    const capOutflow = Pc.principal(merchant).willSendLte(amt).ft(contractId, asset.assetName);\n\n    return [capOutflow];\n  }\n}\n\nexport default PostConditionFactory;\n"]}