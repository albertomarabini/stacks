import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect, useState } from 'react';
import { UniversalConnector } from '../src/UniversalConnector.js';
export const UniversalConnectorContext = createContext(null);
export function useUniversalConnector() {
    const context = useContext(UniversalConnectorContext);
    if (!context) {
        throw new Error('useUniversalConnector must be used within UniversalConnectorProvider');
    }
    return context;
}
export function UniversalConnectorProvider({ children, ...props }) {
    const [connector, setConnector] = useState(null);
    const [isReady, setIsReady] = useState(false);
    async function initConnector(config) {
        try {
            if (!connector) {
                const universalConnector = await UniversalConnector.init(config);
                setConnector(universalConnector);
                setIsReady(true);
            }
        }
        catch (error) {
            console.log('Failed to initialize UniversalConnector', error);
            setIsReady(true);
        }
    }
    useEffect(() => {
        initConnector(props);
    }, [props]);
    return (_jsx(UniversalConnectorContext.Provider, { value: { connector, ready: isReady }, children: children }));
}
//# sourceMappingURL=react.js.map