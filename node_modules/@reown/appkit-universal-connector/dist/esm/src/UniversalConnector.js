import { UniversalProvider } from '@walletconnect/universal-provider';
import { AppKit, createAppKit } from '@reown/appkit/core';
export class UniversalConnector {
    constructor({ appKit, provider, config }) {
        this.appKit = appKit;
        this.provider = provider;
        this.config = config;
    }
    static async init(config) {
        const provider = await UniversalProvider.init({
            projectId: config.projectId,
            metadata: config.metadata
        });
        const appKitConfig = {
            networks: config.networks.flatMap(network => network.chains),
            projectId: config.projectId,
            metadata: config.metadata,
            universalProvider: provider,
            manualWCControl: true
        };
        const appKit = createAppKit(appKitConfig);
        return new UniversalConnector({ appKit, provider, config });
    }
    async connect() {
        const namespaces = this.config?.networks.reduce((acc, namespace) => {
            acc[namespace.namespace] = {
                ...(namespace || {}),
                methods: namespace?.methods || [],
                events: namespace?.events || [],
                chains: namespace?.chains?.map((chain) => chain.caipNetworkId) || []
            };
            return acc;
        }, {});
        try {
            await this.appKit.open();
            const session = await this.provider.connect({
                optionalNamespaces: namespaces
            });
            if (!session) {
                throw new Error('Error connecting to wallet: No session found');
            }
            await this.appKit.close();
            return { session };
        }
        catch (error) {
            await this.appKit.close();
            throw new Error(`Error connecting to wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    async disconnect() {
        await this.appKit.disconnect();
        await this.provider.disconnect();
    }
    async request(params, chain) {
        return await this.provider.request(params, chain);
    }
}
export default UniversalConnector;
//# sourceMappingURL=UniversalConnector.js.map