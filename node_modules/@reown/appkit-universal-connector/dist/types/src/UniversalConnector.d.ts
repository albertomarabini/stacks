import type { SessionTypes } from '@walletconnect/types';
import { type RequestArguments, UniversalProvider } from '@walletconnect/universal-provider';
import type { CustomCaipNetwork } from '@reown/appkit-common';
import { AppKit, type Metadata } from '@reown/appkit/core';
type ExtendedNamespaces = Omit<SessionTypes.Namespace, 'chains' | 'accounts'> & {
    chains: CustomCaipNetwork[];
    namespace: string;
};
export type Config = {
    projectId: string;
    metadata: Metadata;
    networks: ExtendedNamespaces[];
};
export declare class UniversalConnector {
    private appKit;
    private config;
    provider: Awaited<ReturnType<typeof UniversalProvider.init>>;
    constructor({ appKit, provider, config }: {
        appKit: AppKit;
        provider: Awaited<ReturnType<typeof UniversalProvider.init>>;
        config: Config;
    });
    static init(config: Config): Promise<UniversalConnector>;
    connect(): Promise<{
        session: SessionTypes.Struct;
    }>;
    disconnect(): Promise<void>;
    request(params: RequestArguments, chain: string): Promise<unknown>;
}
export default UniversalConnector;
