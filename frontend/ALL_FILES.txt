

---
# ./src/merchant-dashboard/flows/RefundFlowCoordinator.ts

import { PublicInvoiceDTO, UnsignedContractCall } from '/src/contracts/domain';

export type RefundDialogState = {
  open: boolean;
  invoice?: PublicInvoiceDTO;
  amountSats?: number;
  memo?: string;
  error?: string | null;
  submitting: boolean;
  pending: boolean;
};

export class RefundFlowCoordinator {
  public openDialog(invoice: PublicInvoiceDTO): RefundDialogState {
    return {
      open: true,
      invoice,
      amountSats: undefined,
      memo: undefined,
      error: null,
      submitting: false,
      pending: false,
    };
  }

  public closeDialog(): RefundDialogState {
    return { open: false, submitting: false, pending: false };
  }

  public async submit(
    formEl: HTMLFormElement,
    dialog: RefundDialogState,
    storeId: string,
    http: {
      requestJson<T>(url: string, init: RequestInit & { expectJson?: boolean }, onAuthError: (e: unknown) => never): Promise<T>;
      buildHeaders(hasJson: boolean, overrideApiKey?: string): HeadersInit;
    },
    onAuthError: (e: unknown) => never,
    toSnake: (v: any) => any,
  ): Promise<{ newState: RefundDialogState; unsignedCall?: UnsignedContractCall }> {
    if (!dialog.invoice) throw new Error('No invoice selected for refund.');
    const fd = new FormData(formEl);
    const amountSats = parseInt(String(fd.get('amountSats') ?? '0'), 10);
    const memo = fd.get('memo') ? String(fd.get('memo')) : undefined;

    const refunded = dialog.invoice.refundAmount ?? 0;
    const cap = dialog.invoice.amountSats - refunded;

    if (!Number.isInteger(amountSats) || amountSats <= 0) {
      return { newState: { ...dialog, error: 'Amount must be > 0.' } };
    }
    if (amountSats > cap) {
      return { newState: { ...dialog, error: `Amount exceeds refundable cap (${cap}).` } };
    }
    if (memo) {
      const bytes = new TextEncoder().encode(memo);
      if (bytes.length > 34) {
        return { newState: { ...dialog, error: 'Memo must be â‰¤ 34 bytes.' } };
      }
    }

    const body = toSnake({ invoiceId: dialog.invoice.invoiceId, amountSats, memo });

    const res = await fetch(`/api/v1/stores/${encodeURIComponent(storeId)}/refunds`, {
      method: 'POST',
      headers: http.buildHeaders(true),
      body: JSON.stringify(body),
    });

    if (res.status === 401 || res.status === 403) onAuthError(res);

    let json: any = {};
    try {
      json = await res.json();
    } catch {}

    if (json?.error === 'insufficient_balance') {
      return { newState: { ...dialog, error: 'Insufficient merchant sBTC balance.' } };
    }

    const unsignedCall = json as UnsignedContractCall;
    const newState: RefundDialogState = { ...dialog, submitting: true, error: null };
    return { newState, unsignedCall };
  }

  public invokeWallet(
    payload: UnsignedContractCall,
    handlers: { onFinish: (tx?: unknown) => void; onCancel: () => void },
  ): void {
    const anyWin = window as any;
    if (!anyWin || typeof anyWin.openContractCall !== 'function') {
      throw new Error('openContractCall is not available on window.');
    }
    anyWin.openContractCall({
      ...payload,
      onFinish: handlers.onFinish,
      onCancel: handlers.onCancel,
    });
  }

  public onFinish(dialog: RefundDialogState): { newState: RefundDialogState; shouldRefetch: boolean } {
    return { newState: { ...dialog, pending: true }, shouldRefetch: true };
  }

  public onCancel(dialog: RefundDialogState): RefundDialogState {
    return { ...dialog, submitting: false };
  }
}


---
# ./src/merchant-dashboard/profile/StoreProfileCoordinator.ts

// ../merchant-dashboard/profile/StoreProfileCoordinator.ts
import { StorePrivateProfileDTO } from '/src/contracts/domain';
import type { MerchantApiHttpClient } from '../http/MerchantApiHttpClient';

export class StoreProfileCoordinator {
  private profile?: StorePrivateProfileDTO;

  public setProfileLocal(profile?: StorePrivateProfileDTO): void {
    this.profile = profile;
  }

  public async save(
    formEl: HTMLFormElement,
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
    toSnake: (v: any) => any,
  ): Promise<StorePrivateProfileDTO> {
    const fd = new FormData(formEl);
    const name = fd.get('name') ? String(fd.get('name')) : undefined;
    const displayName = fd.get('displayName') ? String(fd.get('displayName')) : undefined;
    const logoUrl = fd.get('logoUrl') ? String(fd.get('logoUrl')) : undefined;
    const brandColor = fd.get('brandColor') ? String(fd.get('brandColor')) : undefined;
    const webhookUrl = fd.get('webhookUrl') ? String(fd.get('webhookUrl')) : undefined;
    const supportEmail = fd.get('supportEmail') ? String(fd.get('supportEmail')) : undefined;
    const supportUrl = fd.get('supportUrl') ? String(fd.get('supportUrl')) : undefined;
    const allowedOriginsRaw = fd.get('allowedOrigins') ? String(fd.get('allowedOrigins')) : '';
    const allowedOrigins = allowedOriginsRaw.split('\n').map((s) => s.trim()).filter(Boolean);

    const body = toSnake({
      name,
      displayName,
      logoUrl,
      brandColor,
      webhookUrl,
      supportEmail,
      supportUrl,
      allowedOrigins: allowedOrigins.join(','),
    });

    const prof = await http.requestJson<StorePrivateProfileDTO>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/profile`,
      { method: 'PATCH', headers: http.buildHeaders(true), body: JSON.stringify(body) },
      onAuthError,
    );
    this.profile = prof;
    return prof;
  }
}


---
# ./src/merchant-dashboard/viewmodels/InvoiceListViewModel.ts

// ../merchant-dashboard/viewmodels/InvoiceListViewModel.ts
import { PublicInvoiceDTO, InvoiceStatus } from '/src/contracts/domain';

export class InvoiceListViewModel {
  private invoices: PublicInvoiceDTO[] = [];
  private filtered: PublicInvoiceDTO[] = [];
  private sortDirection: 'asc' | 'desc' = 'desc';

  public setData(invoices: PublicInvoiceDTO[], filtered: PublicInvoiceDTO[], sortDir: 'asc' | 'desc'): void {
    this.invoices = [...invoices];
    this.filtered = [...filtered];
    this.sortDirection = sortDir;
  }

  public updateAfterCreate(created: PublicInvoiceDTO): { invoices: PublicInvoiceDTO[]; filtered: PublicInvoiceDTO[] } {
    const exists = this.invoices.find((i) => i.invoiceId === created.invoiceId);
    const nextInvoices = exists
      ? this.invoices.map((i) => (i.invoiceId === created.invoiceId ? created : i))
      : [created, ...this.invoices];
    const nextFiltered = [created, ...this.filtered];
    return { invoices: nextInvoices, filtered: this.sort(nextFiltered, this.sortDirection) };
  }

  public setStatus(invoiceId: string, status: InvoiceStatus): { invoices: PublicInvoiceDTO[]; filtered: PublicInvoiceDTO[] } {
    const mapStatus = (arr: PublicInvoiceDTO[]) => arr.map((i) => (i.invoiceId === invoiceId ? { ...i, status } : i));
    const invoices = mapStatus(this.invoices);
    const filtered = mapStatus(this.filtered);
    return { invoices, filtered };
  }

  public applyFilter(value: InvoiceStatus | 'all'): { filtered: PublicInvoiceDTO[] } {
    const filtered = value === 'all' ? [...this.invoices] : this.invoices.filter((i) => i.status === value);
    return { filtered: this.sort(filtered, this.sortDirection) };
  }

  public sortByCreatedAt(direction: 'asc' | 'desc'): { filtered: PublicInvoiceDTO[] } {
    this.sortDirection = direction;
    return { filtered: this.sort([...this.filtered], direction) };
  }

  public toggleSort(): 'asc' | 'desc' {
    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    return this.sortDirection;
  }

  public toCsv(rows: Array<{ invoiceId: string; amountSats: number; usdAtCreate: number; status: InvoiceStatus; txId?: string; createdAt: number; refundAmount?: number | string; refundTxId?: string }>): string {
    const headers = ['invoiceId', 'amountSats', 'usdAtCreate', 'status', 'txId', 'createdAt', 'refundAmount', 'refundTxId'];
    const escape = (v: unknown) => {
      const s = v === undefined || v === null ? '' : String(v);
      return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
    };
    const lines = [
      headers.join(','),
      ...rows.map((r) =>
        [
          escape(r.invoiceId),
          escape(r.amountSats),
          escape(r.usdAtCreate),
          escape(r.status),
          escape(r.txId ?? ''),
          escape(r.createdAt),
          escape(r.refundAmount ?? ''),
          escape(r.refundTxId ?? ''),
        ].join(','),
      ),
    ];
    return lines.join('\n');
  }

  public exportCsv(rows: Array<{ invoiceId: string; amountSats: number; usdAtCreate: number; status: InvoiceStatus; txId?: string; createdAt: number; refundAmount?: number | string; refundTxId?: string }>): void {
    const csv = this.toCsv(rows);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'invoices.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  private sort(arr: PublicInvoiceDTO[], direction: 'asc' | 'desc'): PublicInvoiceDTO[] {
    const mult = direction === 'asc' ? 1 : -1;
    return arr.sort((a, b) => (a.createdAt - b.createdAt) * mult);
  }
}


---
# ./src/merchant-dashboard/keys/KeyRotationCoordinator.ts

// ../merchant-dashboard/keys/KeyRotationCoordinator.ts
import type { MerchantApiHttpClient } from '../http/MerchantApiHttpClient';

export class KeyRotationCoordinator {
  private oneTimeSecrets: { apiKey: string; hmacSecret: string } | null = null;

  public async rotate(
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
  ): Promise<{ apiKey: string; hmacSecret: string }> {
    const secrets = await http.requestJson<{ apiKey: string; hmacSecret: string }>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/rotate-keys`,
      { method: 'POST', headers: http.buildHeaders(false) },
      onAuthError,
    );
    return secrets;
  }

  public show(secrets: { apiKey: string; hmacSecret: string }): { apiKey: string; hmacSecret: string } {
    this.oneTimeSecrets = secrets;
    return secrets;
  }

  public clear(): null {
    this.oneTimeSecrets = null;
    return this.oneTimeSecrets;
  }

  public get(): { apiKey: string; hmacSecret: string } | null {
    return this.oneTimeSecrets;
  }
}


---
# ./src/merchant-dashboard/MerchantDashboardFrontend.ts

// ../merchant-dashboard/MerchantDashboardFrontend.ts
import { RequestShapeAdapter } from './adapters/RequestShapeAdapter';
import { MerchantApiHttpClient } from './http/MerchantApiHttpClient';
import { RefundFlowCoordinator } from './flows/RefundFlowCoordinator';
import { InvoiceListViewModel } from './viewmodels/InvoiceListViewModel';
import { SubscriptionsCoordinator } from './subscriptions/SubscriptionsCoordinator';
import { WebhookConsoleCoordinator } from './webhooks/WebhookConsoleCoordinator';
import { StoreProfileCoordinator } from './profile/StoreProfileCoordinator';
import { KeyRotationCoordinator } from './keys/KeyRotationCoordinator';
import {
  PublicInvoiceDTO,
  StorePrivateProfileDTO,
  SubscriptionMode,
  InvoiceStatus,
  UnsignedContractCall,
} from '../../../src/contracts/domain';

type SubscriptionItem = {
  id: string;
  subscriber: string;
  amountSats: number;
  intervalBlocks: number;
  active: boolean;
  nextInvoiceAt: number;
  lastBilledAt?: number;
  mode: SubscriptionMode;
};

type OneTimeSecrets = { apiKey: string; hmacSecret: string };

type DashboardState = {
  storeId: string;
  apiKey: string;
  invoices: PublicInvoiceDTO[];
  filteredInvoices: PublicInvoiceDTO[];
  invoiceDetail?: PublicInvoiceDTO;
  subscriptions: SubscriptionItem[];
  profile?: StorePrivateProfileDTO;
  webhookLogs: any[];
  testResult?: 'success' | 'failure';
  refundDialog?: any;
  oneTimeSecrets?: OneTimeSecrets | null;
  sortDirection: 'asc' | 'desc';
  refetchKey: number;
  authError: boolean;
};

const requestShapeAdapter = new RequestShapeAdapter();
const http = new MerchantApiHttpClient();
const refundFlow = new RefundFlowCoordinator();
const listVm = new InvoiceListViewModel();
const subsCoord = new SubscriptionsCoordinator();
const webhookCoord = new WebhookConsoleCoordinator();
const storeProfileCoord = new StoreProfileCoordinator();
const keyRotator = new KeyRotationCoordinator();

export const state: DashboardState = {
  storeId: '',
  apiKey: '',
  invoices: [],
  filteredInvoices: [],
  subscriptions: [],
  webhookLogs: [],
  sortDirection: 'desc',
  refetchKey: 0,
  authError: false,
};

export async function handleCreateInvoice(e: React.FormEvent<HTMLFormElement>): Promise<void> {
  e.preventDefault();
  const fd = new FormData(e.currentTarget);
  const amountSats = parseInt(String(fd.get('amountSats') ?? '0'), 10);
  const ttlSeconds = parseInt(String(fd.get('ttlSeconds') ?? '0'), 10);
  const memo = fd.get('memo') ? String(fd.get('memo')) : undefined;
  const webhookUrl = fd.get('webhookUrl') ? String(fd.get('webhookUrl')) : undefined;

  if (!Number.isInteger(amountSats) || amountSats <= 0) {
    throw new Error('amount_sats must be > 0');
  }
  if (!Number.isInteger(ttlSeconds) || ttlSeconds <= 0) {
    throw new Error('ttl_seconds must be > 0');
  }
  if (memo) {
    const bytes = new TextEncoder().encode(memo);
    if (bytes.length > 34) throw new Error('memo must be â‰¤ 34 bytes (UTF-8).');
  }

  http.setContext({ storeId: state.storeId, apiKey: state.apiKey });
  const body = requestShapeAdapter.toSnake({ amountSats, ttlSeconds, memo, webhookUrl });
  const created = await http.requestJson<PublicInvoiceDTO>(
    `/api/v1/stores/${state.storeId}/invoices`,
    { method: 'POST', headers: http.buildHeaders(true), body: JSON.stringify(body) },
    onErrorAuthGate,
  );

  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { invoices, filtered } = listVm.updateAfterCreate(created);
  state.invoices = invoices;
  state.filteredInvoices = filtered;
  state.refetchKey++;
}

export function toSnake<T extends Record<string, any>>(camel: T): Record<string, any> {
  return requestShapeAdapter.toSnake(camel);
}

export function updateInvoicesList(created: PublicInvoiceDTO): void {
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { invoices, filtered } = listVm.updateAfterCreate(created);
  state.invoices = invoices;
  state.filteredInvoices = filtered;
}

export async function onCancelInvoice(invoiceId: string): Promise<void> {
  http.setContext({ storeId: state.storeId, apiKey: state.apiKey });
  await http.requestJson<void>(
    `/api/v1/stores/${state.storeId}/invoices/${invoiceId}/cancel`,
    { method: 'POST', headers: http.buildHeaders(false), expectJson: false as any } as any,
    onErrorAuthGate,
  );
  setInvoiceStatus(invoiceId, 'canceled');
  state.refetchKey++;
}

export function setInvoiceStatus(invoiceId: string, statusValue: InvoiceStatus): void {
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { invoices, filtered } = listVm.setStatus(invoiceId, statusValue);
  state.invoices = invoices;
  state.filteredInvoices = filtered;
}

export function openRefundDialog(invoice: PublicInvoiceDTO): void {
  state.refundDialog = refundFlow.openDialog(invoice);
}

export async function handleRefundSubmit(e: React.FormEvent<HTMLFormElement>): Promise<void> {
  e.preventDefault();
  const { newState, unsignedCall } = await refundFlow.submit(
    e.currentTarget as HTMLFormElement,
    state.refundDialog,
    state.storeId,
    http as any,
    onErrorAuthGate,
    requestShapeAdapter.toSnake.bind(requestShapeAdapter),
  );
  state.refundDialog = newState;
  if (unsignedCall) {
    refundFlow.invokeWallet(unsignedCall, {
      onFinish: (tx?: unknown) => onRefundTxFinish(tx),
      onCancel: () => onRefundTxCancel(),
    });
  }
}

export async function invokeWalletOpenContractCall(payload: UnsignedContractCall): Promise<void> {
  refundFlow.invokeWallet(payload, {
    onFinish: (tx?: unknown) => onRefundTxFinish(tx),
    onCancel: () => onRefundTxCancel(),
  });
}

export function onRefundTxFinish(_tx?: unknown): void {
  const out = refundFlow.onFinish(state.refundDialog);
  state.refundDialog = out.newState;
  if (out.shouldRefetch) state.refetchKey++;
}

export function onRefundTxCancel(): void {
  state.refundDialog = refundFlow.onCancel(state.refundDialog);
}

export function closeRefundDialog(): void {
  state.refundDialog = refundFlow.closeDialog();
}

export async function handleCreateSubscription(e: React.FormEvent<HTMLFormElement>): Promise<void> {
  e.preventDefault();
  subsCoord.setData(state.subscriptions);
  const out = await subsCoord.create(
    e.currentTarget as HTMLFormElement,
    state.storeId,
    http as any,
    onErrorAuthGate,
    requestShapeAdapter.toSnake.bind(requestShapeAdapter),
  );
  state.subscriptions = out.newList as SubscriptionItem[];
  state.refetchKey++;
}

export function validatePrincipal(address: string): boolean {
  return subsCoord.validatePrincipal(address);
}

export async function generateInvoiceForSubscription(id: string): Promise<void> {
  subsCoord.setData(state.subscriptions);
  const { invoice } = await subsCoord.generateInvoice(id, state.storeId, http as any, onErrorAuthGate);
  state.subscriptions = subsCoord.associateInvoiceToSub(id, invoice) as SubscriptionItem[];
  state.refetchKey++;
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { invoices, filtered } = listVm.updateAfterCreate(invoice);
  state.invoices = invoices;
  state.filteredInvoices = filtered;
}

export function associateInvoiceToSubscription(subId: string, invoice: PublicInvoiceDTO): void {
  subsCoord.setData(state.subscriptions);
  state.subscriptions = subsCoord.associateInvoiceToSub(subId, invoice) as SubscriptionItem[];
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { invoices, filtered } = listVm.updateAfterCreate(invoice);
  state.invoices = invoices;
  state.filteredInvoices = filtered;
}

export async function cancelSubscription(id: string): Promise<void> {
  subsCoord.setData(state.subscriptions);
  state.subscriptions = (await subsCoord.cancel(id, state.storeId, http as any, onErrorAuthGate)) as SubscriptionItem[];
  state.refetchKey++;
}

export function setSubscriptionActive(id: string, active: boolean): void {
  subsCoord.setData(state.subscriptions);
  state.subscriptions = subsCoord.setActive(id, active) as SubscriptionItem[];
}

export async function handleSaveStoreSettings(e: React.FormEvent<HTMLFormElement>): Promise<void> {
  e.preventDefault();
  storeProfileCoord.setProfileLocal(state.profile);
  const prof = await storeProfileCoord.save(
    e.currentTarget as HTMLFormElement,
    state.storeId,
    http as any,
    onErrorAuthGate,
    requestShapeAdapter.toSnake.bind(requestShapeAdapter),
  );
  setProfile(prof);
}

export function setProfile(profile: StorePrivateProfileDTO): void {
  storeProfileCoord.setProfileLocal(profile);
  state.profile = profile;
}

export async function testWebhook(): Promise<void> {
  webhookCoord.setData(state.webhookLogs as any[], state.testResult);
  const res = await webhookCoord.test(state.storeId, http as any, onErrorAuthGate);
  state.testResult = res;
  state.webhookLogs = await webhookCoord.fetchLogs(state.storeId, http as any, onErrorAuthGate);
}

export function setTestResult(result: 'success' | 'failure'): void {
  webhookCoord.setData(state.webhookLogs as any[], state.testResult);
  state.testResult = webhookCoord.setTestResult(result);
}

export async function fetchWebhookLogs(invoiceIdFilter?: string): Promise<void> {
  webhookCoord.setData(state.webhookLogs as any[], state.testResult);
  state.webhookLogs = await webhookCoord.fetchLogs(state.storeId, http as any, onErrorAuthGate, invoiceIdFilter);
}

export async function rotateKeys(): Promise<void> {
  const secrets = await keyRotator.rotate(state.storeId, http as any, onErrorAuthGate);
  state.oneTimeSecrets = keyRotator.show(secrets);
}

export function showOneTimeSecretsModal(secrets: { apiKey: string; hmacSecret: string }): void {
  state.oneTimeSecrets = keyRotator.show(secrets);
}

export function clearOneTimeSecrets(): void {
  state.oneTimeSecrets = keyRotator.clear();
}

export function toggleSort(field: 'createdAt'): void {
  if (field !== 'createdAt') return;
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const newDir = listVm.toggleSort();
  state.sortDirection = newDir;
  state.filteredInvoices = listVm.sortByCreatedAt(newDir).filtered;
}

export function sortInvoicesByCreatedAt(direction: 'asc' | 'desc'): void {
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { filtered } = listVm.sortByCreatedAt(direction);
  state.filteredInvoices = filtered;
}

export function applyInvoiceStatusFilter(value: InvoiceStatus | 'all'): void {
  listVm.setData(state.invoices, state.filteredInvoices, state.sortDirection);
  const { filtered } = listVm.applyFilter(value);
  listVm.setData(state.invoices, filtered, state.sortDirection);
  state.filteredInvoices = listVm.sortByCreatedAt(state.sortDirection).filtered;
}

export function setFilteredInvoices(list: PublicInvoiceDTO[]): void {
  state.filteredInvoices = list;
}

export function exportCsv(): void {
  const rows = state.filteredInvoices.map((i) => ({
    invoiceId: i.invoiceId,
    amountSats: i.amountSats,
    usdAtCreate: i.usdAtCreate,
    status: i.status,
    txId: i.txId ?? '',
    createdAt: i.createdAt,
    refundAmount: i.refundAmount ?? '',
    refundTxId: i.refundTxId ?? '',
  }));
  listVm.exportCsv(rows as any);
}

export function toCsv(rows: Array<{ invoiceId: string; amountSats: number; usdAtCreate: number; status: InvoiceStatus; txId?: string; createdAt: number; refundAmount?: number; refundTxId?: string }>): string {
  return listVm.toCsv(rows as any);
}

export function openInExplorer(txId: string): void {
  if (!txId) throw new Error('txId required');
  const base =
    (window as any).__EXPLORER_BASE_URL__ ??
    ((typeof process !== 'undefined' && (process as any).env && (process as any).env.EXPLORER_BASE_URL) || '');
  const url = `${String(base)}/txid/${encodeURIComponent(txId)}`;
  window.open(url, '_blank', 'noopener');
}

export async function fetchInvoices(
  storeId: string,
  apiKey: string,
  options?: { status?: InvoiceStatus; signal?: AbortSignal },
): Promise<PublicInvoiceDTO[]> {
  http.setContext({ storeId, apiKey });
  const q = options?.status ? `?status=${encodeURIComponent(options.status)}` : '';
  const rows = await http.requestJson<PublicInvoiceDTO[]>(
    `/api/v1/stores/${storeId}/invoices${q}`,
    { headers: http.buildHeaders(false), signal: options?.signal },
    onErrorAuthGate,
  );
  state.invoices = rows;
  state.filteredInvoices = rows;
  sortInvoicesByCreatedAt(state.sortDirection);
  return rows;
}

export function onErrorAuthGate(error: unknown): never {
  const status = (error as any)?.response?.status ?? (error as any)?.status;
  if (status === 401 || status === 403) {
    state.authError = true;
  }
  throw error as any;
}

export async function fetchInvoice(
  storeId: string,
  invoiceId: string,
  apiKey: string,
  options?: { signal?: AbortSignal },
): Promise<PublicInvoiceDTO> {
  http.setContext({ storeId, apiKey });
  const dto = await http.requestJson<PublicInvoiceDTO>(
    `/api/v1/stores/${storeId}/invoices/${invoiceId}`,
    { headers: http.buildHeaders(false), signal: options?.signal },
    onErrorAuthGate,
  );
  state.invoiceDetail = dto;
  return dto;
}

export async function fetchSubscriptions(
  storeId: string,
  apiKey: string,
  options?: { signal?: AbortSignal },
): Promise<
  Array<{
    id: string;
    subscriber: string;
    amountSats: number;
    intervalBlocks: number;
    active: boolean;
    nextInvoiceAt: number;
    lastBilledAt?: number;
    mode: SubscriptionMode;
  }>
> {
  http.setContext({ storeId, apiKey });
  const rows = await http.requestJson<
    Array<{ id: string; subscriber: string; amountSats: number; intervalBlocks: number; active: boolean; nextInvoiceAt: number; lastBilledAt?: number; mode: SubscriptionMode }>
  >(`/api/v1/stores/${storeId}/subscriptions`, { headers: http.buildHeaders(false), signal: options?.signal }, onErrorAuthGate);
  state.subscriptions = rows as SubscriptionItem[];
  return rows;
}

export async function fetchStoreProfile(
  storeId: string,
  apiKey: string,
  options?: { signal?: AbortSignal },
): Promise<StorePrivateProfileDTO> {
  http.setContext({ storeId, apiKey });
  const prof = await http.requestJson<any>(
    `/api/v1/stores/${storeId}/profile`,
    { headers: http.buildHeaders(false), signal: options?.signal },
    onErrorAuthGate,
  );

  const normalizeAllowed = (v: unknown): string[] => {
    if (Array.isArray(v)) return v.filter(Boolean).map((s) => String(s).trim()).filter((s) => s.length > 0);
    if (typeof v === 'string') {
      return v.split(/[\n,]/g).map((s) => s.trim()).filter((s) => s.length > 0);
    }
    return [];
  };
  prof.allowedOrigins = normalizeAllowed(prof.allowedOrigins);

  storeProfileCoord.setProfileLocal(prof as StorePrivateProfileDTO);
  state.profile = prof as StorePrivateProfileDTO;
  return prof as StorePrivateProfileDTO;
}

export async function refetch(ctx: {
  view: 'invoices' | 'invoice' | 'subscriptions' | 'webhooks';
  storeId: string;
  apiKey: string;
  invoiceId?: string;
  invoiceIdFilter?: string;
  signal?: AbortSignal;
}): Promise<void> {
  switch (ctx.view) {
    case 'invoices':
      await fetchInvoices(ctx.storeId, ctx.apiKey, { signal: ctx.signal });
      break;
    case 'invoice':
      if (!ctx.invoiceId) throw new Error('invoiceId required for view=invoice');
      await fetchInvoice(ctx.storeId, ctx.invoiceId, ctx.apiKey, { signal: ctx.signal });
      break;
    case 'subscriptions':
      await fetchSubscriptions(ctx.storeId, ctx.apiKey, { signal: ctx.signal });
      break;
    case 'webhooks':
      await fetchWebhookLogs(ctx.invoiceIdFilter);
      break;
    default:
      return;
  }

  const inv =
    state.invoiceDetail ??
    (ctx.invoiceId ? state.invoices.find((i) => i.invoiceId === ctx.invoiceId) : undefined);
  if (state.refundDialog?.pending && inv) {
    const refunded = !!inv.refundTxId || inv.status === 'refunded';
    if (refunded) state.refundDialog = refundFlow.closeDialog();
  }
}

export async function setSubscriptionMode(
  storeId: string,
  subId: string,
  mode: SubscriptionMode,
  apiKey: string,
): Promise<{ id: string; mode: SubscriptionMode }> {
  http.setContext({ storeId, apiKey });
  subsCoord.setData(state.subscriptions);
  const resp = await subsCoord.setMode(storeId, subId, mode, http as any, onErrorAuthGate);
  state.subscriptions = resp.newList as SubscriptionItem[];
  state.refetchKey++;
  return resp.confirmed;
}


---
# ./src/merchant-dashboard/http/MerchantApiHttpClient.ts

// ../merchant-dashboard/http/MerchantApiHttpClient.ts

export class MerchantApiHttpClient {
  private storeId = '';
  private apiKey = '';

  public setContext(ctx: { storeId: string; apiKey: string }): void {
    this.storeId = ctx.storeId;
    this.apiKey = ctx.apiKey;
  }

  public buildHeaders(hasJson: boolean, overrideApiKey?: string): HeadersInit {
    return {
      ...(hasJson ? { 'Content-Type': 'application/json' } : {}),
      'X-API-Key': overrideApiKey ?? this.apiKey,
    };
  }

  public async requestJson<T>(
    url: string,
    init: RequestInit & { expectJson?: boolean } = {},
    onAuthError: (e: unknown) => never,
  ): Promise<T> {
    const res = await fetch(url, init);
    if (res.status === 401 || res.status === 403) {
      onAuthError(res);
    }
    if ((init as any).expectJson === false) {
      return undefined as unknown as T;
    }
    const data = (await res.json()) as T;
    return data;
  }
}


---
# ./src/merchant-dashboard/adapters/RequestShapeAdapter.ts

// frontend/merchant-dashboard/adapters/RequestShapeAdapter.ts

export class RequestShapeAdapter {
  public toSnake<T extends Record<string, any>>(camel: T): Record<string, any> {
    const out: Record<string, any> = {};
    for (const [key, value] of Object.entries(camel)) {
      const snake = key
        .replace(/([A-Z])/g, '_$1')
        .replace(/__/g, '_')
        .toLowerCase();
      out[snake] = value;
    }
    return out;
  }
}


---
# ./src/merchant-dashboard/subscriptions/SubscriptionsCoordinator.ts

// ../merchant-dashboard/subscriptions/SubscriptionsCoordinator.ts
import { PublicInvoiceDTO, SubscriptionMode } from '/src/contracts/domain';
import type { MerchantApiHttpClient } from '../http/MerchantApiHttpClient';

type SubItem = {
  id: string;
  subscriber: string;
  amountSats: number;
  intervalBlocks: number;
  active: boolean;
  nextInvoiceAt: number;
  lastBilledAt?: number;
  mode: SubscriptionMode;
};

export class SubscriptionsCoordinator {
  private subs: SubItem[] = [];

  public setData(subs: SubItem[]): void {
    this.subs = [...subs];
  }

  public validatePrincipal(address: string): boolean {
    return /^[ST][A-Za-z0-9]{20,}/.test(address);
  }

  public async create(
    formEl: HTMLFormElement,
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
    toSnake: (v: any) => any,
  ): Promise<{ newList: SubItem[] }> {
    const fd = new FormData(formEl);
    const subscriber = String(fd.get('subscriber') ?? '');
    const amountSats = parseInt(String(fd.get('amountSats') ?? '0'), 10);
    const intervalBlocks = parseInt(String(fd.get('intervalBlocks') ?? '0'), 10);
    const mode = String(fd.get('mode') ?? 'invoice') as SubscriptionMode;

    if (!this.validatePrincipal(subscriber)) throw new Error('Invalid subscriber principal.');
    if (!Number.isInteger(amountSats) || amountSats <= 0) throw new Error('amount_sats must be > 0.');
    if (!Number.isInteger(intervalBlocks) || intervalBlocks <= 0) throw new Error('interval_blocks must be > 0.');
    if (!(mode === 'invoice' || mode === 'direct')) throw new Error('Invalid subscription mode.');

    const body = toSnake({ subscriber, amountSats, intervalBlocks, mode });

    const sub = await http.requestJson<{
      id: string;
      idHex: string;
      storeId: string;
      merchantPrincipal: string;
      subscriber: string;
      amountSats: number;
      intervalBlocks: number;
      active: boolean;
      createdAt: number;
      lastBilledAt?: number;
      nextInvoiceAt: number;
      lastPaidInvoiceId?: string;
      mode: SubscriptionMode;
    }>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/subscriptions`,
      { method: 'POST', headers: http.buildHeaders(true), body: JSON.stringify(body) },
      onAuthError,
    );

    const newItem: SubItem = {
      id: sub.id,
      subscriber: sub.subscriber,
      amountSats: sub.amountSats,
      intervalBlocks: sub.intervalBlocks,
      active: sub.active,
      nextInvoiceAt: sub.nextInvoiceAt,
      lastBilledAt: sub.lastBilledAt,
      mode: sub.mode,
    };
    return { newList: [newItem, ...this.subs] };
  }

  public async generateInvoice(
    id: string,
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
  ): Promise<{ invoice: PublicInvoiceDTO }> {
    const resp = await http.requestJson<{ invoice: PublicInvoiceDTO; magicLink: string }>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/subscriptions/${encodeURIComponent(id)}/invoice`,
      { method: 'POST', headers: http.buildHeaders(true), body: JSON.stringify({}) },
      onAuthError,
    );
    return { invoice: resp.invoice };
  }

  public associateInvoiceToSub(subId: string, invoice: PublicInvoiceDTO): SubItem[] {
    return this.subs.map((s) => (s.id === subId ? { ...s, lastBilledAt: invoice.createdAt } : s));
  }

  public async cancel(
    id: string,
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
  ): Promise<SubItem[]> {
    await http.requestJson<void>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/subscriptions/${encodeURIComponent(id)}/cancel`,
      { method: 'POST', headers: http.buildHeaders(true), expectJson: false as any } as any,
      onAuthError,
    );
    return this.setActive(id, false);
  }

  public setActive(id: string, active: boolean): SubItem[] {
    return this.subs.map((s) => (s.id === id ? { ...s, active } : s));
  }

  public async setMode(
    storeId: string,
    subId: string,
    mode: SubscriptionMode,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
  ): Promise<{ newList: SubItem[]; confirmed: { id: string; mode: SubscriptionMode } }> {
    if (!(mode === 'invoice' || mode === 'direct')) throw new Error('Invalid mode');
    const confirmed = await http.requestJson<{ id: string; mode: SubscriptionMode }>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/subscriptions/${encodeURIComponent(subId)}/mode`,
      { method: 'POST', headers: http.buildHeaders(true), body: JSON.stringify({ mode }) },
      onAuthError,
    );
    const newList = this.subs.map((s) => (s.id === subId ? { ...s, mode: confirmed.mode } : s));
    return { newList, confirmed };
  }
}


---
# ./src/merchant-dashboard/webhooks/WebhookConsoleCoordinator.ts

// ../merchant-dashboard/webhooks/WebhookConsoleCoordinator.ts

import type { MerchantApiHttpClient } from '../http/MerchantApiHttpClient';

export interface WebhookLogDTO {
  id: string;
  storeId: string;
  invoiceId?: string;
  subscriptionId?: string;
  eventType: string;
  payload: string;
  statusCode?: number;
  success: boolean;
  attempts: number;
  lastAttemptAt: number;
}

export class WebhookConsoleCoordinator {
  private logs: WebhookLogDTO[] = [];
  private testResult?: 'success' | 'failure';

  public setData(logs: WebhookLogDTO[], testResult?: 'success' | 'failure'): void {
    this.logs = [...logs];
    this.testResult = testResult;
  }

  public async test(
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
  ): Promise<'success' | 'failure'> {
    const res = await fetch(`/api/v1/stores/${encodeURIComponent(storeId)}/webhooks/test`, {
      method: 'POST',
      headers: http.buildHeaders(false),
    });
    if (res.status === 401 || res.status === 403) onAuthError(res);
    this.testResult = res.ok ? 'success' : 'failure';
    return this.testResult;
  }

  public async fetchLogs(
    storeId: string,
    http: MerchantApiHttpClient,
    onAuthError: (e: unknown) => never,
    invoiceIdFilter?: string,
  ): Promise<WebhookLogDTO[]> {
    const q = invoiceIdFilter ? `?invoiceId=${encodeURIComponent(invoiceIdFilter)}` : '';
    const rows = await http.requestJson<WebhookLogDTO[]>(
      `/api/v1/stores/${encodeURIComponent(storeId)}/webhooks${q}`,
      { headers: http.buildHeaders(false) },
      onAuthError,
    );
    this.logs = rows.slice(0, 100);
    return this.logs;
  }

  public setTestResult(result: 'success' | 'failure'): 'success' | 'failure' {
    this.testResult = result;
    return this.testResult;
  }
}


---
# ./src/checkout/CheckoutFrontend.ts

// frontend/checkout/CheckoutFrontend.ts
import { InvoiceCountdownDelegate } from './delegates/InvoiceCountdownDelegate';
import { InvoiceStatusPollerDelegate } from './delegates/InvoiceStatusPollerDelegate';
import { WalletContractCallDelegate } from './delegates/WalletContractCallDelegate';
import { StoreBrandingDelegate } from './delegates/StoreBrandingDelegate';
import { StatusBadgeDelegate } from './delegates/StatusBadgeDelegate';
import { PaymentActionsDelegate } from './delegates/PaymentActionsDelegate';
import { PublicCheckoutApiClient } from './delegates/PublicCheckoutApiClient';
import { QrRenderDelegate } from './delegates/QrRenderDelegate';
import { BannerDelegate } from './delegates/BannerDelegate';
import type { PublicInvoiceDTO, StorePublicProfileDTO, UnsignedContractCall, InvoiceStatus } from '/src/contracts/domain';

const HIGHLIGHT_THRESHOLD_MS = 60_000;

type UiState = {
  invoice: PublicInvoiceDTO | null;
  store: StorePublicProfileDTO | null;
  loaderAbort: AbortController | null;
};

function extractInvoiceIdFromPath(path: string): string | null {
  const m = path.match(/^\/i\/([^/]+)$/);
  return m ? decodeURIComponent(m[1]) : null;
}

function show(selector: string): void {
  const el = document.querySelector(selector) as HTMLElement | null;
  if (el) el.removeAttribute('hidden');
}

function hide(selector: string): void {
  const el = document.querySelector(selector) as HTMLElement | null;
  if (el) el.setAttribute('hidden', 'true');
}

function wireOpenWalletButton(): void {
  const btn = document.getElementById('openWallet') as HTMLButtonElement | null;
  if (btn) {
    btn.onclick = () => void CheckoutFrontend.onOpenWallet();
    btn.removeAttribute('hidden');
  }
}

export const CheckoutFrontend = {
  state: {
    invoice: null,
    store: null,
    loaderAbort: null,
  } as UiState,

  _countdown: new InvoiceCountdownDelegate({ highlightThresholdMs: HIGHLIGHT_THRESHOLD_MS }),
  _poller: new InvoiceStatusPollerDelegate(),
  _wallet: new WalletContractCallDelegate(),
  _branding: new StoreBrandingDelegate(),
  _badge: new StatusBadgeDelegate(),
  _actions: new PaymentActionsDelegate(),
  _api: new PublicCheckoutApiClient(),
  _qr: new QrRenderDelegate(),
  _banner: new BannerDelegate(),

  async onRouteEnter(_evt?: Event): Promise<void> {
    const invoiceId = extractInvoiceIdFromPath(location.pathname);
    this.clearTimers();
    this.resetUiState();
    wireOpenWalletButton();
    if (!invoiceId) {
      this.renderNotFound();
      return;
    }
    this.state.loaderAbort = new AbortController();
    try {
      const dto = await this.fetchInvoiceJson(invoiceId, { signal: this.state.loaderAbort.signal });
      await this.handleInvoiceResponse(dto);
    } catch (e: any) {
      if (e && typeof e.status === 'number' && e.status === 404) {
        this.renderNotFound();
        return;
      }
      this.banner('Failed to load invoice', 'error');
    }
  },

  clearTimers(): void {
    this._countdown.stop();
    this._poller.stop();
  },

  resetUiState(): void {
    this.state.invoice = null;
    this.state.store = null;

    hide('#expiredView');

    const badge = document.querySelector('#statusBadge') as HTMLElement | null;
    if (badge) {
      badge.className = 'badge';
      badge.textContent = 'Loadingâ€¦';
    }

    const banner = document.querySelector('#banner') as HTMLElement | null;
    if (banner) banner.setAttribute('hidden', 'true');

    const btn = document.getElementById('openWallet') as HTMLButtonElement | null;
    if (btn) {
      btn.disabled = false;
      btn.removeAttribute('hidden');
    }

    const actions = document.querySelector('#actions') as HTMLElement | null;
    if (actions) actions.removeAttribute('hidden');

    const qr = document.querySelector('#qrCanvas') as HTMLCanvasElement | null;
    if (qr) {
      const ctx = qr.getContext('2d');
      if (ctx) ctx.clearRect(0, 0, qr.width, qr.height);
    }
  },

  async fetchInvoiceJson(invoiceId: string, opts?: { signal?: AbortSignal }): Promise<PublicInvoiceDTO> {
    return this._api.fetchInvoiceJson(invoiceId, opts);
  },

  renderNotFound(): void {
    this.disablePaymentActions();
    const container = document.querySelector('#checkoutContainer') as HTMLElement | null;
    if (container) {
      container.innerHTML = '<div class="not-found">Invoice not found.</div>';
    }
  },

  async onRouteChange(): Promise<void> {
    const invoiceId = extractInvoiceIdFromPath(location.pathname);
    this.clearTimers();
    this.resetUiState();
    if (this.state.loaderAbort) this.state.loaderAbort.abort();
    wireOpenWalletButton();
    if (!invoiceId) {
      this.renderNotFound();
      return;
    }
    this.state.loaderAbort = new AbortController();
    try {
      const dto = await this.fetchInvoiceJson(invoiceId, { signal: this.state.loaderAbort.signal });
      await this.handleInvoiceResponse(dto);
    } catch (e: any) {
      if (e && typeof e.status === 'number' && e.status === 404) {
        this.renderNotFound();
        return;
      }
      this.banner('Failed to load invoice', 'error');
    }
  },

  async handleInvoiceResponse(invoice: PublicInvoiceDTO): Promise<void> {
    if (
      !invoice ||
      typeof invoice.invoiceId !== 'string' ||
      typeof invoice.storeId !== 'string' ||
      typeof invoice.status !== 'string' ||
      !Number.isInteger(invoice.amountSats) ||
      typeof invoice.quoteExpiresAt !== 'number' ||
      typeof invoice.idHex !== 'string' ||
      !/^[0-9A-Fa-f]{64}$/.test(invoice.idHex)
    ) {
      this.banner('Invalid invoice payload', 'error');
      return;
    }

    this.state.invoice = invoice;
    this.setStatusBadge(invoice.status as InvoiceStatus);

    if (invoice.store) {
      this.applyBranding(invoice.store);
      this.state.store = invoice.store;
    } else {
      const profile = await this.fetchStorePublicProfile(invoice.storeId);
      this.applyBranding(profile);
      this.state.store = profile;
    }

    if (invoice.status === 'unpaid') {
      this.renderQr(invoice.invoiceId);
      show('#openWallet');
      this.startCountdown(invoice.quoteExpiresAt);
      this.startPoll(invoice.invoiceId, 15000);
    } else {
      this.disablePaymentActions();
    }
  },

  setStatusBadge(status: InvoiceStatus): void {
    this._badge.setStatusBadge(status, '#statusBadge');
  },

  async fetchStorePublicProfile(storeId: string, opts?: { signal?: AbortSignal }): Promise<StorePublicProfileDTO> {
    return this._api.fetchStorePublicProfile(storeId, opts);
  },

  renderQr(invoiceId: string): void {
    this._qr.renderInvoiceLink('#qrCanvas', invoiceId);
  },

  startCountdown(quoteExpiresAtMs: number): void {
    this._countdown.start(
      quoteExpiresAtMs,
      (timeLeftMs) => this.renderCountdown(timeLeftMs),
      () => {
        this.setStatusBadge('expired');
        this.disablePaymentActions();
        show('#expiredView');
      },
    );
  },

  startPoll(invoiceId: string, intervalMs: number = 15000): void {
    const client = this._api;
    this._poller.start(
      invoiceId,
      intervalMs,
      (id, signal) => client.fetchInvoiceJson(id, { signal }),
      (dto) => this.handlePoll(dto),
    );
  },

  disablePaymentActions(): void {
    this._actions.disablePaymentActions();
  },

  applyBranding(profile: StorePublicProfileDTO): void {
    this._branding.applyBranding(profile);
  },

  updateHeader(displayName?: string, logoUrl?: string): void {
    this._branding.updateHeader(displayName, logoUrl);
  },

  async onOpenWallet(): Promise<void> {
    const provider = this._wallet.getProvider();
    if (!provider) {
      this.banner('Wallet not connected', 'error');
      return;
    }
    if (!this.state.invoice) return;
    const res = await this.requestCreateTx(this.state.invoice.invoiceId);
    await this.handleCreateTxResponse(res);
  },

  getStacksProvider(): (Window & typeof globalThis)['StacksProvider'] | null {
    return this._wallet.getProvider();
  },

  async requestCreateTx(invoiceId: string): Promise<Response> {
    return fetch('/create-tx', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ invoiceId }),
    });
  },

  banner(message: string, type: 'info' | 'success' | 'error' = 'info'): void {
    this._banner.show(message, type, '#banner');
  },

  async handleCreateTxResponse(res: Response): Promise<void> {
    if (res.ok) {
      const payload = (await res.json()) as UnsignedContractCall;
      await this.invokeWalletOpenContractCall(payload);
      return;
    }
    switch (res.status) {
      case 404:
        this.banner('Invoice not found', 'error');
        break;
      case 409:
        this.banner('Invoice cannot be paid (already paid, canceled, or expired)', 'error');
        break;
      case 400:
        this.banner('Invalid invoice ID', 'error');
        break;
      case 422:
        this.banner('Merchant inactive or sBTC token not configured', 'error');
        break;
      case 426:
        this.banner('Wrong network selected in wallet', 'error');
        break;
      default:
        this.banner('Failed to prepare transaction', 'error');
    }
  },

  async invokeWalletOpenContractCall(payload: UnsignedContractCall): Promise<void> {
    await this._wallet.openUnsignedContractCall(
      payload as unknown as Record<string, any>,
      (tx) => this.onTxFinish(tx),
      () => this.onTxCancel(),
    );
  },

  onTxFinish(tx?: unknown): void {
    this._wallet.onFinish(this.banner.bind(this), () => this.disableOpenWallet(), tx);
  },

  disableOpenWallet(): void {
    this._wallet.disableOpenWallet('#openWallet');
  },

  onTxCancel(): void {
    this._wallet.onCancel(this.banner.bind(this));
  },

  handlePoll(fresh: PublicInvoiceDTO): void {
    if (fresh.status === 'paid') {
      this.setStatusBadge('paid');
      this.banner('Payment confirmed', 'success');
      this.disablePaymentActions();
      this.clearTimers();
      return;
    }
    if (fresh.status === 'expired' || fresh.status === 'canceled') {
      this.setStatusBadge(fresh.status as InvoiceStatus);
      this.disablePaymentActions();
      this.clearTimers();
    }
  },

  updateCountdown(): void {
    this._countdown.forceTick();
  },

  renderCountdown(timeLeftMs: number): void {
    const node = document.querySelector('#countdown') as HTMLElement | null;
    if (!node) return;
    const totalSeconds = Math.floor(timeLeftMs / 1000);
    const m = Math.floor(totalSeconds / 60);
    const s = totalSeconds % 60;
    node.textContent = `${m}:${s.toString().padStart(2, '0')}`;
    if (timeLeftMs <= HIGHLIGHT_THRESHOLD_MS) node.classList.add('expiring');
    else node.classList.remove('expiring');
  },

  handleExpiry(): void {
    this._countdown.expireNow();
  },

  async pollStatus(): Promise<void> {
    await this._poller.tick();
  },
};

// Register global event listeners on module load
document.addEventListener('DOMContentLoaded', () => {
  void CheckoutFrontend.onRouteEnter();
});

window.addEventListener('popstate', () => {
  void CheckoutFrontend.onRouteChange();
});


---
# ./src/checkout/delegates/InvoiceStatusPollerDelegate.ts

// frontend/checkout/delegates/InvoiceStatusPollerDelegate.ts

export type InvoiceFetcher = (invoiceId: string, signal: AbortSignal) => Promise<any>;
export type InvoiceHandler = (dto: any) => void;

export class InvoiceStatusPollerDelegate {
  private invoiceId: string | null = null;
  private intervalMs = 15000;
  private intervalId: number | undefined;
  private abort: AbortController | null = null;
  private fetcher: InvoiceFetcher | null = null;
  private handler: InvoiceHandler | null = null;
  private isPolling = false;

  start(invoiceId: string, intervalMs: number, fetcher: InvoiceFetcher, handler: InvoiceHandler): void {
    this.stop();
    this.invoiceId = invoiceId;
    this.intervalMs = intervalMs;
    this.fetcher = fetcher;
    this.handler = handler;
    this.intervalId = window.setInterval(() => void this.tick(), this.intervalMs);
  }

  async tick(): Promise<void> {
    if (!this.invoiceId || !this.fetcher || !this.handler) return;
    if (this.abort) this.abort.abort();
    this.abort = new AbortController();
    this.isPolling = true;
    try {
      const dto = await this.fetcher(this.invoiceId, this.abort.signal);
      this.handler(dto);
    } catch {
      // Silent failure; next tick will try again.
    } finally {
      this.isPolling = false;
    }
  }

  stop(): void {
    if (this.intervalId !== undefined) {
      window.clearInterval(this.intervalId);
      this.intervalId = undefined;
    }
    if (this.abort) {
      this.abort.abort();
      this.abort = null;
    }
    this.invoiceId = null;
    this.fetcher = null;
    this.handler = null;
    this.isPolling = false;
  }
}


---
# ./src/checkout/delegates/PublicCheckoutApiClient.ts

// ../checkout/delegates/PublicCheckoutApiClient.ts
import { PublicInvoiceDTO, StorePublicProfileDTO } from '/src/contracts/domain';

export class PublicCheckoutApiClient {
  async fetchInvoiceJson(
    invoiceId: string,
    opts?: { signal?: AbortSignal }
  ): Promise<PublicInvoiceDTO> {
    const res = await fetch(`/i/${encodeURIComponent(invoiceId)}`, {
      headers: { Accept: 'application/json' },
      signal: opts?.signal,
    });
    if (!res.ok) {
      const err: any = new Error(`HTTP ${res.status}`);
      err.status = res.status;
      throw err;
    }
    return (await res.json()) as PublicInvoiceDTO;
  }

  async fetchStorePublicProfile(
    storeId: string,
    opts?: { signal?: AbortSignal }
  ): Promise<StorePublicProfileDTO> {
    const res = await fetch(
      `/api/v1/stores/${encodeURIComponent(storeId)}/public-profile`,
      {
        headers: { Accept: 'application/json' },
        signal: opts?.signal,
      }
    );
    if (!res.ok) return {} as StorePublicProfileDTO;
    return (await res.json()) as StorePublicProfileDTO;
  }
}


---
# ./src/checkout/delegates/StoreBrandingDelegate.ts

import type { StorePublicProfileDTO } from '/src/contracts/domain';

export class StoreBrandingDelegate {
  applyBranding(profile: StorePublicProfileDTO): void {
    if (profile.brandColor) {
      document.documentElement.style.setProperty('--accent', profile.brandColor);
    }
    this.updateHeader(profile.displayName, profile.logoUrl);
  }

  updateHeader(displayName?: string, logoUrl?: string): void {
    const nameEl = document.querySelector('#storeName') as HTMLElement | null;
    const logoEl = document.querySelector('#storeLogo') as HTMLImageElement | null;

    if (nameEl) nameEl.textContent = displayName ?? '';

    if (logoUrl && logoEl) {
      logoEl.src = logoUrl;
      logoEl.alt = displayName ? `${displayName} logo` : 'Store logo';
      logoEl.removeAttribute('hidden');
    } else if (logoEl) {
      logoEl.removeAttribute('src');
      logoEl.alt = 'Store logo';
      logoEl.setAttribute('hidden', 'true');
    }
  }
}


---
# ./src/checkout/delegates/WalletContractCallDelegate.ts

export type BannerFn = (message: string, type?: 'info' | 'success' | 'error') => void;

export class WalletContractCallDelegate {
  getProvider(): (Window & typeof globalThis)['StacksProvider'] | null {
    return (window as any).StacksProvider || null;
  }

  async openUnsignedContractCall(
    payload: Record<string, any>,
    onFinish: (tx?: unknown) => void,
    onCancel: () => void
  ): Promise<void> {
    const openContractCall = (window as any).openContractCall;
    await openContractCall({ ...payload, onFinish, onCancel });
  }

  onFinish(notify: BannerFn, afterFinish: () => void, _tx?: unknown): void {
    notify('Payment submitted', 'success');
    afterFinish();
  }

  onCancel(notify: BannerFn): void {
    notify('User rejected transaction', 'info');
  }

  disableOpenWallet(selector = '#openWallet'): void {
    const btn = document.querySelector(selector) as HTMLButtonElement | null;
    if (btn) btn.disabled = true;
  }
}


---
# ./src/checkout/delegates/QrRenderDelegate.ts

// frontend/checkout/delegates/QrRenderDelegate.ts

export class QrRenderDelegate {
  renderInvoiceLink(canvasSelector: string, invoiceId: string): void {
    const canvas = document.querySelector(canvasSelector) as HTMLCanvasElement | null;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const link = `${location.protocol}//${location.host}/i/${encodeURIComponent(invoiceId)}`;
    ctx.fillStyle = '#000000';
    ctx.font = '14px monospace';
    ctx.fillText('Scan link:', 10, 20);
    ctx.fillText(link, 10, 40);
  }
}


---
# ./src/checkout/delegates/BannerDelegate.ts

// frontend/checkout/delegates/BannerDelegate.ts

export class BannerDelegate {
  show(
    message: string,
    type: 'info' | 'success' | 'error' = 'info',
    selector: string = '#banner',
  ): void {
    const node = document.querySelector(selector) as HTMLElement | null;
    if (!node) return;
    node.textContent = message;
    node.className = 'banner';
    node.classList.add(`banner-${type}`);
    node.removeAttribute('hidden');
  }
}


---
# ./src/checkout/delegates/StatusBadgeDelegate.ts

// frontend/checkout/delegates/StatusBadgeDelegate.ts
import type { InvoiceStatus } from '/src/contracts/domain';

export class StatusBadgeDelegate {
  setStatusBadge(status: InvoiceStatus, selector: string = '#statusBadge'): void {
    const badge = document.querySelector(selector) as HTMLElement;

    badge.className = 'badge';
    switch (status) {
      case 'unpaid':
        badge.classList.add('badge-unpaid');
        badge.textContent = 'Unpaid';
        break;
      case 'paid':
        badge.classList.add('badge-paid');
        badge.textContent = 'Paid';
        break;
      case 'partially_refunded':
        badge.classList.add('badge-partial');
        badge.textContent = 'Partially Refunded';
        break;
      case 'refunded':
        badge.classList.add('badge-refunded');
        badge.textContent = 'Refunded';
        break;
      case 'canceled':
        badge.classList.add('badge-canceled');
        badge.textContent = 'Canceled';
        break;
      case 'expired':
        badge.classList.add('badge-expired');
        badge.textContent = 'Expired';
        break;
    }
    badge.setAttribute('aria-live', 'polite');
  }
}


---
# ./src/checkout/delegates/InvoiceCountdownDelegate.ts

// frontend/checkout/delegates/InvoiceCountdownDelegate.ts

export type CountdownTick = (timeLeftMs: number) => void;

export class InvoiceCountdownDelegate {
  private quoteExpiresAtMs: number | null = null;
  private readonly highlightThresholdMs: number;
  private intervalId: number | undefined;
  private expiredHandled = false;
  private readonly now: () => number;
  private onTick: CountdownTick | null = null;
  private onExpire: (() => void) | null = null;

  constructor(opts?: { highlightThresholdMs?: number; now?: () => number }) {
    this.highlightThresholdMs = opts?.highlightThresholdMs ?? 60_000;
    this.now = opts?.now ?? (() => Date.now());
  }

  start(quoteExpiresAtMs: number, onTick: CountdownTick, onExpire: () => void): void {
    this.stop();
    this.quoteExpiresAtMs = quoteExpiresAtMs;
    this.onTick = onTick;
    this.onExpire = onExpire;
    this.expiredHandled = false;
    this.intervalId = window.setInterval(() => this.tick(), 1000);
    this.tick();
  }

  stop(): void {
    if (this.intervalId !== undefined) {
      window.clearInterval(this.intervalId);
      this.intervalId = undefined;
    }
    this.onTick = null;
    this.onExpire = null;
    this.quoteExpiresAtMs = null;
    this.expiredHandled = false;
  }

  forceTick(): void {
    this.tick();
  }

  private computeTimeLeftMs(): number {
    if (this.quoteExpiresAtMs === null) return 0;
    return Math.max(0, this.quoteExpiresAtMs - this.now());
  }

  private tick(): void {
    if (this.quoteExpiresAtMs === null) return;
    const timeLeftMs = this.computeTimeLeftMs();
    if (this.onTick) this.onTick(timeLeftMs);

    if (timeLeftMs <= 0 && !this.expiredHandled) {
      this.expiredHandled = true;
      if (this.onExpire) this.onExpire();
      if (this.intervalId !== undefined) {
        window.clearInterval(this.intervalId);
        this.intervalId = undefined;
      }
    }
  }

  expireNow(): void {
    if (!this.expiredHandled) {
      this.expiredHandled = true;
      if (this.onExpire) this.onExpire();
      if (this.intervalId !== undefined) {
        window.clearInterval(this.intervalId);
        this.intervalId = undefined;
      }
    }
  }
}


---
# ./src/checkout/delegates/PaymentActionsDelegate.ts

// ../checkout/delegates/PaymentActionsDelegate.ts

export class PaymentActionsDelegate {
  disablePaymentActions(opts?: {
    openWalletSelector?: string;
    qrSelector?: string;
    actionsSelector?: string;
  }): void {
    const openSel = opts?.openWalletSelector ?? '#openWallet';
    const qrSel = opts?.qrSelector ?? '#qrCanvas';
    const actionsSel = opts?.actionsSelector ?? '#actions';

    const btn = document.querySelector(openSel) as HTMLButtonElement;
    btn.disabled = true;

    const qr = document.querySelector(qrSel) as HTMLElement;
    qr.classList.add('disabled');

    const actions = document.querySelector(actionsSel) as HTMLElement;
    actions.setAttribute('hidden', 'true');
  }
}


---
# ./src/admin-console/wallet/AdminContractCallSequencer.ts

// ../admin-console/wallet/AdminContractCallSequencer.ts

export class AdminContractCallSequencer {
  static async runSequential(
    calls: any[],
    openContractCall: (call: any) => Promise<void>,
  ): Promise<void> {
    for (const call of calls) {
      await openContractCall(call);
    }
  }

  static async runSingle(
    call: any,
    openContractCall: (call: any) => Promise<void>,
  ): Promise<void> {
    await openContractCall(call);
  }
}


---
# ./src/admin-console/AdminConsoleFrontend.ts

// ../admin-console/AdminConsoleFrontend.ts
import { AdminHttpClient } from './http/AdminHttpClient';
import { AdminInputValidator } from './validation/AdminInputValidator';
import { AdminStoreFormAdapter } from './adapters/AdminStoreFormAdapter';
import { AdminContractCallSequencer } from './wallet/AdminContractCallSequencer';
import type { AdminPollerStatusDTO } from '/src/contracts/domain';

export async function onCreateStoreSubmit(
  e: Event,
  form: {
    principal: string;
    name?: string;
    display_name?: string;
    logo_url?: string;
    brand_color?: string;
    webhook_url?: string;
    support_email?: string;
    support_url?: string;
    allowed_origins?: string;
  },
  authHeader: string,
): Promise<void> {
  e.preventDefault();
  AdminInputValidator.assertStacksAddress(form.principal, 'principal');
  const body = AdminStoreFormAdapter.toCreateStoreBody(form);
  const resp = await AdminHttpClient.request('/stores', { method: 'POST', authHeader, jsonBody: body });
  if (resp.status === 201) {
    await AdminHttpClient.parseJson(resp);
    return;
  }
  if (resp.status === 409) {
    throw new Error('conflict');
  }
  throw new Error(`create_store_failed_${resp.status}`);
}

export async function onActivateToggle(storeId: string, active: boolean, authHeader: string): Promise<void> {
  AdminInputValidator.assertUuid(storeId, 'storeId');
  const resp = await AdminHttpClient.request(`/stores/${storeId}/activate`, {
    method: 'PATCH',
    authHeader,
    jsonBody: { active },
  });
  if (resp.ok) {
    await AdminHttpClient.parseJson(resp);
    return;
  }
  throw new Error(`activate_toggle_failed_${resp.status}`);
}

export async function onRotateKeysClick(
  storeId: string,
  authHeader: string,
): Promise<{ apiKey: string; hmacSecret: string }> {
  AdminInputValidator.assertUuid(storeId, 'storeId');
  const resp = await AdminHttpClient.request(`/stores/${storeId}/rotate-keys`, {
    method: 'POST',
    authHeader,
  });
  if (!resp.ok) throw new Error(`rotate_keys_failed_${resp.status}`);
  const json = await AdminHttpClient.parseJson<{ apiKey: string; hmacSecret: string }>(resp);
  return { apiKey: String(json.apiKey), hmacSecret: String(json.hmacSecret) };
}

export async function onSyncOnchainClick(
  storeId: string,
  authHeader: string,
  openContractCall: (call: any) => Promise<void>,
): Promise<void> {
  AdminInputValidator.assertUuid(storeId, 'storeId');
  const resp = await AdminHttpClient.request(`/stores/${storeId}/sync-onchain`, {
    method: 'POST',
    authHeader,
  });
  if (!resp.ok) throw new Error(`sync_onchain_failed_${resp.status}`);
  const json = await AdminHttpClient.parseJson<{ calls: any[] }>(resp);
  await AdminContractCallSequencer.runSequential(Array.isArray(json.calls) ? json.calls : [], openContractCall);
}

export async function onSetSbtcTokenSubmit(
  e: Event,
  form: { contractAddress: string; contractName: string },
  authHeader: string,
  openContractCall: (call: any) => Promise<void>,
): Promise<void> {
  e.preventDefault();
  AdminInputValidator.assertContractPrincipalPair(form.contractAddress, form.contractName);
  const resp = await AdminHttpClient.request('/set-sbtc-token', {
    method: 'POST',
    authHeader,
    jsonBody: { contractAddress: form.contractAddress, contractName: form.contractName },
  });
  if (!resp.ok) throw new Error(`set_sbtc_token_failed_${resp.status}`);
  const json = await AdminHttpClient.parseJson<{ call: any }>(resp);
  await AdminContractCallSequencer.runSingle(json.call, openContractCall);
}

export async function onRestartPollerClick(authHeader: string): Promise<{ running: boolean }> {
  const resp = await AdminHttpClient.request('/poller/restart', { method: 'POST', authHeader });
  if (!resp.ok) throw new Error(`restart_poller_failed_${resp.status}`);
  const json = await AdminHttpClient.parseJson<AdminPollerStatusDTO>(resp);
  return { running: !!json.running };
}

export async function onRetryWebhookClick(webhookLogId: string, authHeader: string): Promise<void> {
  AdminInputValidator.assertUuid(webhookLogId, 'webhookLogId');
  const resp = await AdminHttpClient.request('/webhooks/retry', {
    method: 'POST',
    authHeader,
    jsonBody: { webhookLogId },
  });
  if (resp.status === 200 || resp.status === 202) return;
  throw new Error(`retry_webhook_failed_${resp.status}`);
}

export async function onCancelInvoiceClick(
  invoiceId: string,
  authHeader: string,
  maybeBuildOnchainCancel: () => Promise<any | undefined>,
  openContractCall: (call: any) => Promise<void>,
): Promise<void> {
  AdminInputValidator.assertUuid(invoiceId, 'invoiceId');
  const resp = await AdminHttpClient.request(`/invoices/${invoiceId}/cancel`, {
    method: 'POST',
    authHeader,
  });
  if (resp.status === 400) {
    const j = await AdminHttpClient.parseJson<{ error?: string }>(resp);
    if (j?.error === 'already_paid') throw new Error('already_paid');
    throw new Error('cancel_invoice_bad_request');
  }
  if (!resp.ok) throw new Error(`cancel_invoice_failed_${resp.status}`);
  await AdminHttpClient.parseJson(resp);
  const cancelCall = await maybeBuildOnchainCancel();
  if (cancelCall) await AdminContractCallSequencer.runSingle(cancelCall, openContractCall);
}

export async function onBootstrapAdminClick(
  authHeader: string,
  buildCall: () => Promise<any>,
  openContractCall: (call: any) => Promise<void>,
  verifyGetAdmin: () => Promise<boolean>,
): Promise<void> {
  const call = await buildCall();
  await AdminContractCallSequencer.runSingle(call, openContractCall);
  const ok = await verifyGetAdmin();
  if (!ok) throw new Error('bootstrap_admin_verification_failed');
}


---
# ./src/admin-console/validation/AdminInputValidator.ts

export class AdminInputValidator {
  static assertUuid(value: string, label: string = 'id'): string {
    const ok =
      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(
        value,
      );
    if (!ok) {
      throw new TypeError(`Invalid ${label}`);
    }
    return value;
  }

  static assertStacksAddress(value: string, label: string = 'principal'): string {
    if (typeof value !== 'string' || value.length < 2 || !value.startsWith('S')) {
      throw new TypeError(`Invalid ${label}`);
    }
    return value;
  }

  static assertContractPrincipalPair(
    contractAddress: string,
    contractName: string,
  ): { contractAddress: string; contractName: string } {
    this.assertStacksAddress(contractAddress, 'contractAddress');
    if (!contractName || typeof contractName !== 'string') {
      throw new TypeError('Invalid contractName');
    }
    return { contractAddress, contractName };
  }
}


---
# ./src/admin-console/http/AdminHttpClient.ts

// ../admin-console/http/AdminHttpClient.ts

export class AdminHttpClient {
  private static readonly base = '/api/admin';

  static async request(
    path: string,
    options: { method: 'GET' | 'POST' | 'PATCH'; authHeader: string; jsonBody?: any }
  ): Promise<Response> {
    const headers: Record<string, string> = { Authorization: options.authHeader };
    const init: RequestInit = { method: options.method, headers };
    if (options.jsonBody !== undefined) {
      headers['Content-Type'] = 'application/json';
      init.body = JSON.stringify(options.jsonBody);
    }
    const url = `${this.base}${path.startsWith('/') ? path : '/' + path}`;
    return fetch(url, init);
  }

  static async parseJson<T = any>(resp: Response): Promise<T> {
    const text = await resp.text();
    if (!text) {
      // @ts-expect-error allow undefined when caller expects optional
      return undefined as T;
    }
    return JSON.parse(text) as T;
  }
}


---
# ./src/admin-console/adapters/AdminStoreFormAdapter.ts

// ../admin-console/adapters/AdminStoreFormAdapter.ts

export class AdminStoreFormAdapter {
  static toCreateStoreBody(form: {
    principal: string;
    name?: string;
    display_name?: string;
    logo_url?: string;
    brand_color?: string;
    webhook_url?: string;
    support_email?: string;
    support_url?: string;
    allowed_origins?: string;
  }): {
    principal: string;
    name?: string;
    displayName?: string;
    logoUrl?: string;
    brandColor?: string;
    webhookUrl?: string;
    supportEmail?: string;
    supportUrl?: string;
    allowedOrigins?: string;
  } {
    return {
      principal: form.principal,
      name: form.name ?? undefined,
      displayName: form.display_name ?? undefined,
      logoUrl: form.logo_url ?? undefined,
      brandColor: form.brand_color ?? undefined,
      webhookUrl: form.webhook_url ?? undefined,
      supportEmail: form.support_email ?? undefined,
      supportUrl: form.support_url ?? undefined,
      allowedOrigins: form.allowed_origins ?? undefined,
    };
  }
}


---
# ./tsconfig.json

{
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,
      "jsx": "react-jsx",
      "moduleResolution": "Bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true,
      "strict": true,
      "baseUrl": ".",
      "paths": {
        "/src/*": ["src/*"]
      }
    },
    "include": ["src"]
  }


---
# ./package-lock.json

{
  "name": "frontend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/react": "^19.1.13",
        "@types/react-dom": "^19.1.9",
        "react": "^19.1.1",
        "react-dom": "^19.1.1",
        "typescript": "^5.9.2"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.7.0",
        "vite": "^5.4.20"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.50.1.tgz",
      "integrity": "sha512-HJXwzoZN4eYTdD8bVV22DN8gsPCAj3V20NHKOs8ezfXanGpmVPR7kalUHd+Y31IJp9stdB87VKPFbsGY3H/2ag==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.50.1.tgz",
      "integrity": "sha512-PZlsJVcjHfcH53mOImyt3bc97Ep3FJDXRpk9sMdGX0qgLmY0EIWxCag6EigerGhLVuL8lDVYNnSo8qnTElO4xw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.50.1.tgz",
      "integrity": "sha512-xc6i2AuWh++oGi4ylOFPmzJOEeAa2lJeGUGb4MudOtgfyyjr4UPNK+eEWTPLvmPJIY/pgw6ssFIox23SyrkkJw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.50.1.tgz",
      "integrity": "sha512-2ofU89lEpDYhdLAbRdeyz/kX3Y2lpYc6ShRnDjY35bZhd2ipuDMDi6ZTQ9NIag94K28nFMofdnKeHR7BT0CATw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.50.1.tgz",
      "integrity": "sha512-wOsE6H2u6PxsHY/BeFHA4VGQN3KUJFZp7QJBmDYI983fgxq5Th8FDkVuERb2l9vDMs1D5XhOrhBrnqcEY6l8ZA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.50.1.tgz",
      "integrity": "sha512-A/xeqaHTlKbQggxCqispFAcNjycpUEHP52mwMQZUNqDUJFFYtPHCXS1VAG29uMlDzIVr+i00tSFWFLivMcoIBQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.50.1.tgz",
      "integrity": "sha512-54v4okehwl5TaSIkpp97rAHGp7t3ghinRd/vyC1iXqXMfjYUTm7TfYmCzXDoHUPTTf36L8pr0E7YsD3CfB3ZDg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.50.1.tgz",
      "integrity": "sha512-p/LaFyajPN/0PUHjv8TNyxLiA7RwmDoVY3flXHPSzqrGcIp/c2FjwPPP5++u87DGHtw+5kSH5bCJz0mvXngYxw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.50.1.tgz",
      "integrity": "sha512-2AbMhFFkTo6Ptna1zO7kAXXDLi7H9fGTbVaIq2AAYO7yzcAsuTNWPHhb2aTA6GPiP+JXh85Y8CiS54iZoj4opw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.50.1.tgz",
      "integrity": "sha512-Cgef+5aZwuvesQNw9eX7g19FfKX5/pQRIyhoXLCiBOrWopjo7ycfB292TX9MDcDijiuIJlx1IzJz3IoCPfqs9w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.50.1.tgz",
      "integrity": "sha512-RPhTwWMzpYYrHrJAS7CmpdtHNKtt2Ueo+BlLBjfZEhYBhK00OsEqM08/7f+eohiF6poe0YRDDd8nAvwtE/Y62Q==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.50.1.tgz",
      "integrity": "sha512-eSGMVQw9iekut62O7eBdbiccRguuDgiPMsw++BVUg+1K7WjZXHOg/YOT9SWMzPZA+w98G+Fa1VqJgHZOHHnY0Q==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.50.1.tgz",
      "integrity": "sha512-S208ojx8a4ciIPrLgazF6AgdcNJzQE4+S9rsmOmDJkusvctii+ZvEuIC4v/xFqzbuP8yDjn73oBlNDgF6YGSXQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.50.1.tgz",
      "integrity": "sha512-3Ag8Ls1ggqkGUvSZWYcdgFwriy2lWo+0QlYgEFra/5JGtAd6C5Hw59oojx1DeqcA2Wds2ayRgvJ4qxVTzCHgzg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.50.1.tgz",
      "integrity": "sha512-t9YrKfaxCYe7l7ldFERE1BRg/4TATxIg+YieHQ966jwvo7ddHJxPj9cNFWLAzhkVsbBvNA4qTbPVNsZKBO4NSg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.50.1.tgz",
      "integrity": "sha512-MCgtFB2+SVNuQmmjHf+wfI4CMxy3Tk8XjA5Z//A0AKD7QXUYFMQcns91K6dEHBvZPCnhJSyDWLApk40Iq/H3tA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.50.1.tgz",
      "integrity": "sha512-nEvqG+0jeRmqaUMuwzlfMKwcIVffy/9KGbAGyoa26iu6eSngAYQ512bMXuqqPrlTyfqdlB9FVINs93j534UJrg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.50.1.tgz",
      "integrity": "sha512-RDsLm+phmT3MJd9SNxA9MNuEAO/J2fhW8GXk62G/B4G7sLVumNFbRwDL6v5NrESb48k+QMqdGbHgEtfU0LCpbA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.50.1.tgz",
      "integrity": "sha512-hpZB/TImk2FlAFAIsoElM3tLzq57uxnGYwplg6WDyAxbYczSi8O2eQ+H2Lx74504rwKtZ3N2g4bCUkiamzS6TQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.50.1.tgz",
      "integrity": "sha512-SXjv8JlbzKM0fTJidX4eVsH+Wmnp0/WcD8gJxIZyR6Gay5Qcsmdbi9zVtnbkGPG8v2vMR1AD06lGWy5FLMcG7A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.50.1.tgz",
      "integrity": "sha512-StxAO/8ts62KZVRAm4JZYq9+NqNsV7RvimNK+YM7ry//zebEH6meuugqW/P5OFUCjyQgui+9fUxT6d5NShvMvA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.13",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.13.tgz",
      "integrity": "sha512-hHkbU/eoO3EG5/MZkuFSKmYqPbSVk5byPFa3e7y/8TybHiLMACgI8seVYlicwk7H5K/rI2px9xrQp/C+AUDTiQ==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.9",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.9.tgz",
      "integrity": "sha512-qXRuZaOsAdXKFyOhRBg6Lqqc0yay13vN7KrIg4L7N4aaHN68ma9OK3NE1BoDFgFOTfM7zg+3/8+2n8rLUH3OKQ==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/baseline-browser-mapping": {
      "version": "2.8.3",
      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.3.tgz",
      "integrity": "sha512-mcE+Wr2CAhHNWxXN/DdTI+n4gsPc5QpXpWnyCQWiQYIYZX+ZMJ8juXZgjRa/0/YPJo/NSsgW15/YgmI4nbysYw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "baseline-browser-mapping": "dist/cli.js"
      }
    },
    "node_modules/browserslist": {
      "version": "4.26.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.26.0.tgz",
      "integrity": "sha512-P9go2WrP9FiPwLv3zqRD/Uoxo0RSHjzFCiQz7d4vbmwNqQFo9T9WCeP/Qn5EbcKQY6DBbkxEXNcpJOmncNrb7A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "baseline-browser-mapping": "^2.8.2",
        "caniuse-lite": "^1.0.30001741",
        "electron-to-chromium": "^1.5.218",
        "node-releases": "^2.0.21",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.218",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.218.tgz",
      "integrity": "sha512-uwwdN0TUHs8u6iRgN8vKeWZMRll4gBkz+QMqdS7DDe49uiK68/UX92lFb61oiFPrpYZNeZIqa4bA7O6Aiasnzg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.21",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.21.tgz",
      "integrity": "sha512-5b0pgg78U3hwXkCM8Z9b2FJdPZlr9Psr9V2gQPESdGHqbntyFJKFW4r5TeWGFzafGY3hzs1JC62VEQMbl1JFkw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/react": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.1.tgz",
      "integrity": "sha512-w8nqGImo45dmMIfljjMwOGtbmC/mk4CMYhWIicdSflH91J9TyCyczcPFXJzrZ/ZXcgGRFeP6BU0BEJTw6tZdfQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.1.tgz",
      "integrity": "sha512-Dlq/5LAZgF0Gaz6yiqZCf6VCcZs1ghAJyrsu84Q/GT0gV+mCxbfmKNoGRKBYMJ8IEdGPqu49YWXD02GCknEDkw==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.50.1.tgz",
      "integrity": "sha512-78E9voJHwnXQMiQdiqswVLZwJIzdBKJ1GdI5Zx6XwoFKUIk09/sSrr+05QFzvYb8q6Y9pPV45zzDuYa3907TZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.50.1",
        "@rollup/rollup-android-arm64": "4.50.1",
        "@rollup/rollup-darwin-arm64": "4.50.1",
        "@rollup/rollup-darwin-x64": "4.50.1",
        "@rollup/rollup-freebsd-arm64": "4.50.1",
        "@rollup/rollup-freebsd-x64": "4.50.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.50.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.50.1",
        "@rollup/rollup-linux-arm64-gnu": "4.50.1",
        "@rollup/rollup-linux-arm64-musl": "4.50.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.50.1",
        "@rollup/rollup-linux-ppc64-gnu": "4.50.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.50.1",
        "@rollup/rollup-linux-riscv64-musl": "4.50.1",
        "@rollup/rollup-linux-s390x-gnu": "4.50.1",
        "@rollup/rollup-linux-x64-gnu": "4.50.1",
        "@rollup/rollup-linux-x64-musl": "4.50.1",
        "@rollup/rollup-openharmony-arm64": "4.50.1",
        "@rollup/rollup-win32-arm64-msvc": "4.50.1",
        "@rollup/rollup-win32-ia32-msvc": "4.50.1",
        "@rollup/rollup-win32-x64-msvc": "4.50.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/vite": {
      "version": "5.4.20",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.20.tgz",
      "integrity": "sha512-j3lYzGC3P+B5Yfy/pfKNgVEg4+UtcIJcVRt2cDjIOmhLourAqPqf8P7acgxeiSgUB7E3p2P8/3gNIgDLpwzs4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    }
  }
}


---
# ./ALL_FILES.txt



---
# ./index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, viewport-fit=cover"
    />
    <title>Steroids Merchant Dashboard</title>
    <meta name="color-scheme" content="light dark" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


---
# ./tsconfig.node.json

{
    "compilerOptions": {
      "composite": true,
      "module": "ESNext",
      "moduleResolution": "Bundler",
      "allowSyntheticDefaultImports": true
    },
    "include": ["vite.config.ts"]
  }


---
# ./package.json

{
  "name": "frontend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "typescript": "^5.9.2"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.7.0",
    "vite": "^5.4.20"
  }
}


---
# ./vite.config.mts

// vite.config.mts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: { '/api': 'http://localhost:3000' },
  },
});
